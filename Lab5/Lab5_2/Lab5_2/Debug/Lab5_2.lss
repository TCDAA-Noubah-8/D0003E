
Lab5_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00002156  000021ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000361  00800122  00800122  0000220c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000223c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027ee  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f39  00000000  00000000  00004c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001447  00000000  00000000  00005ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b44  00000000  00000000  00006fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e0  00000000  00000000  00007b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029ea  00000000  00000000  00008410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000adfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_1>
       8:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__vector_2>
       c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__vector_3>
      10:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_4>
      14:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_9>
      28:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__vector_10>
      2c:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_11>
      30:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_12>
      34:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__vector_13>
      38:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_14>
      3c:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_15>
      40:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__vector_16>
      44:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_17>
      48:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_18>
      4c:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_19>
      50:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_20>
      54:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__vector_21>
      58:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 e5       	ldi	r30, 0x56	; 86
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 32       	cpi	r26, 0x22	; 34
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e2       	ldi	r26, 0x22	; 34
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a3 38       	cpi	r26, 0x83	; 131
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <main>
      92:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <onBridge>:

void output(Brain *b, int o){
	UDR0 = o;
}*/

void onBridge(Brain *brain, int d){
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	brain->queueBridge--;
      a6:	fc 01       	movw	r30, r24
      a8:	22 85       	ldd	r18, Z+10	; 0x0a
      aa:	33 85       	ldd	r19, Z+11	; 0x0b
      ac:	21 50       	subi	r18, 0x01	; 1
      ae:	31 09       	sbc	r19, r1
      b0:	33 87       	std	Z+11, r19	; 0x0b
      b2:	22 87       	std	Z+10, r18	; 0x0a
	ASYNC(brain,updateLCD,0);
      b4:	c1 2c       	mov	r12, r1
      b6:	d1 2c       	mov	r13, r1
      b8:	0f 2e       	mov	r0, r31
      ba:	fd ea       	ldi	r31, 0xAD	; 173
      bc:	ef 2e       	mov	r14, r31
      be:	f3 e0       	ldi	r31, 0x03	; 3
      c0:	ff 2e       	mov	r15, r31
      c2:	f0 2d       	mov	r31, r0
      c4:	8c 01       	movw	r16, r24
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	a9 01       	movw	r20, r18
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	cb 01       	movw	r24, r22
      d2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
}
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	df 90       	pop	r13
      e0:	cf 90       	pop	r12
      e2:	08 95       	ret

000000e4 <logicOfLight>:
	}
	//ASYNC(brain,updateLCD,0);
	ASYNC(brain,logicOfLight,0);
}

void logicOfLight(Brain* brain, int i){
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	fc 01       	movw	r30, r24
	if(brain->queueNorth==0&&brain->queueSouth==0){//No cars on bridge
      f2:	84 81       	ldd	r24, Z+4	; 0x04
      f4:	95 81       	ldd	r25, Z+5	; 0x05
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	09 f0       	breq	.+2      	; 0xfc <logicOfLight+0x18>
      fa:	54 c0       	rjmp	.+168    	; 0x1a4 <logicOfLight+0xc0>
      fc:	86 81       	ldd	r24, Z+6	; 0x06
      fe:	97 81       	ldd	r25, Z+7	; 0x07
     100:	89 2b       	or	r24, r25
     102:	91 f5       	brne	.+100    	; 0x168 <logicOfLight+0x84>
		brain->queueOther = NULL;
     104:	15 86       	std	Z+13, r1	; 0x0d
     106:	14 86       	std	Z+12, r1	; 0x0c
		ASYNC(brain, output, 0xA); //Send red lights to North/South
     108:	0f 2e       	mov	r0, r31
     10a:	fa e0       	ldi	r31, 0x0A	; 10
     10c:	cf 2e       	mov	r12, r31
     10e:	d1 2c       	mov	r13, r1
     110:	f0 2d       	mov	r31, r0
     112:	0f 2e       	mov	r0, r31
     114:	fc ed       	ldi	r31, 0xDC	; 220
     116:	ef 2e       	mov	r14, r31
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	ff 2e       	mov	r15, r31
     11c:	f0 2d       	mov	r31, r0
     11e:	8f 01       	movw	r16, r30
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	a9 01       	movw	r20, r18
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	cb 01       	movw	r24, r22
     12c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
     130:	3c c0       	rjmp	.+120    	; 0x1aa <logicOfLight+0xc6>
	}
	else if(brain->queueNorth>0&&brain->queueSouth==0){//Cars on North but not South
     132:	86 81       	ldd	r24, Z+6	; 0x06
     134:	97 81       	ldd	r25, Z+7	; 0x07
     136:	89 2b       	or	r24, r25
     138:	c1 f5       	brne	.+112    	; 0x1aa <logicOfLight+0xc6>
		brain->queueOther = 0;
     13a:	15 86       	std	Z+13, r1	; 0x0d
     13c:	14 86       	std	Z+12, r1	; 0x0c
		ASYNC(brain, output, 0x9); //Send green to North and red to South
     13e:	0f 2e       	mov	r0, r31
     140:	f9 e0       	ldi	r31, 0x09	; 9
     142:	cf 2e       	mov	r12, r31
     144:	d1 2c       	mov	r13, r1
     146:	f0 2d       	mov	r31, r0
     148:	0f 2e       	mov	r0, r31
     14a:	fc ed       	ldi	r31, 0xDC	; 220
     14c:	ef 2e       	mov	r14, r31
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	ff 2e       	mov	r15, r31
     152:	f0 2d       	mov	r31, r0
     154:	8f 01       	movw	r16, r30
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	a9 01       	movw	r20, r18
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	70 e0       	ldi	r23, 0x00	; 0
     160:	cb 01       	movw	r24, r22
     162:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
     166:	21 c0       	rjmp	.+66     	; 0x1aa <logicOfLight+0xc6>
	}
	else if(brain->queueNorth==0&&brain->queueSouth>0){//Cars not on North but on Cars South
     168:	86 81       	ldd	r24, Z+6	; 0x06
     16a:	97 81       	ldd	r25, Z+7	; 0x07
     16c:	18 16       	cp	r1, r24
     16e:	19 06       	cpc	r1, r25
     170:	e4 f4       	brge	.+56     	; 0x1aa <logicOfLight+0xc6>
		brain->queueOther = 1;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	95 87       	std	Z+13, r25	; 0x0d
     178:	84 87       	std	Z+12, r24	; 0x0c
		ASYNC(brain, output, 0x6);//Send red to North and green to South
     17a:	0f 2e       	mov	r0, r31
     17c:	f6 e0       	ldi	r31, 0x06	; 6
     17e:	cf 2e       	mov	r12, r31
     180:	d1 2c       	mov	r13, r1
     182:	f0 2d       	mov	r31, r0
     184:	0f 2e       	mov	r0, r31
     186:	fc ed       	ldi	r31, 0xDC	; 220
     188:	ef 2e       	mov	r14, r31
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ff 2e       	mov	r15, r31
     18e:	f0 2d       	mov	r31, r0
     190:	8f 01       	movw	r16, r30
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	a9 01       	movw	r20, r18
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	cb 01       	movw	r24, r22
     19e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
	}
}
     1a2:	03 c0       	rjmp	.+6      	; 0x1aa <logicOfLight+0xc6>
void logicOfLight(Brain* brain, int i){
	if(brain->queueNorth==0&&brain->queueSouth==0){//No cars on bridge
		brain->queueOther = NULL;
		ASYNC(brain, output, 0xA); //Send red lights to North/South
	}
	else if(brain->queueNorth>0&&brain->queueSouth==0){//Cars on North but not South
     1a4:	18 16       	cp	r1, r24
     1a6:	19 06       	cpc	r1, r25
     1a8:	24 f2       	brlt	.-120    	; 0x132 <logicOfLight+0x4e>
	}
	else if(brain->queueNorth==0&&brain->queueSouth>0){//Cars not on North but on Cars South
		brain->queueOther = 1;
		ASYNC(brain, output, 0x6);//Send red to North and green to South
	}
}
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	ef 90       	pop	r14
     1b2:	df 90       	pop	r13
     1b4:	cf 90       	pop	r12
     1b6:	08 95       	ret

000001b8 <output>:

void output(Brain *b, int o){
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	c6 2f       	mov	r28, r22
	ASYNC(b,updateLCD,0);
     1c8:	c1 2c       	mov	r12, r1
     1ca:	d1 2c       	mov	r13, r1
     1cc:	0f 2e       	mov	r0, r31
     1ce:	fd ea       	ldi	r31, 0xAD	; 173
     1d0:	ef 2e       	mov	r14, r31
     1d2:	f3 e0       	ldi	r31, 0x03	; 3
     1d4:	ff 2e       	mov	r15, r31
     1d6:	f0 2d       	mov	r31, r0
     1d8:	8c 01       	movw	r16, r24
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	a9 01       	movw	r20, r18
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	cb 01       	movw	r24, r22
     1e6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
	UDR0 = o;
     1ea:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <decode>:
void onBridge(Brain *brain, int d){
	brain->queueBridge--;
	ASYNC(brain,updateLCD,0);
}

void decode(Brain *brain, int inp){
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	ec 01       	movw	r28, r24
     212:	b6 2e       	mov	r11, r22
	ASYNC(brain,updateLCD,0);
     214:	c1 2c       	mov	r12, r1
     216:	d1 2c       	mov	r13, r1
     218:	0f 2e       	mov	r0, r31
     21a:	fd ea       	ldi	r31, 0xAD	; 173
     21c:	ef 2e       	mov	r14, r31
     21e:	f3 e0       	ldi	r31, 0x03	; 3
     220:	ff 2e       	mov	r15, r31
     222:	f0 2d       	mov	r31, r0
     224:	8c 01       	movw	r16, r24
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	a9 01       	movw	r20, r18
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	cb 01       	movw	r24, r22
     232:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
	if((inp&1)==1){
     236:	b0 fe       	sbrs	r11, 0
     238:	06 c0       	rjmp	.+12     	; 0x246 <decode+0x48>
		brain->queueNorth++;
     23a:	8c 81       	ldd	r24, Y+4	; 0x04
     23c:	9d 81       	ldd	r25, Y+5	; 0x05
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	9d 83       	std	Y+5, r25	; 0x05
     242:	8c 83       	std	Y+4, r24	; 0x04
     244:	6b c0       	rjmp	.+214    	; 0x31c <decode+0x11e>
	}
	else if(((inp>>1)&1)==1){
     246:	b1 fe       	sbrs	r11, 1
     248:	30 c0       	rjmp	.+96     	; 0x2aa <decode+0xac>
		brain->queueNorth--;
     24a:	8c 81       	ldd	r24, Y+4	; 0x04
     24c:	9d 81       	ldd	r25, Y+5	; 0x05
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	9d 83       	std	Y+5, r25	; 0x05
     252:	8c 83       	std	Y+4, r24	; 0x04
		brain->queueBridge++;
     254:	8a 85       	ldd	r24, Y+10	; 0x0a
     256:	9b 85       	ldd	r25, Y+11	; 0x0b
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	9b 87       	std	Y+11, r25	; 0x0b
     25c:	8a 87       	std	Y+10, r24	; 0x0a
		brain->queuePassed++;
     25e:	88 85       	ldd	r24, Y+8	; 0x08
     260:	99 85       	ldd	r25, Y+9	; 0x09
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	99 87       	std	Y+9, r25	; 0x09
     266:	88 87       	std	Y+8, r24	; 0x08
		ASYNC(brain,updateLCD,0);
     268:	c1 2c       	mov	r12, r1
     26a:	d1 2c       	mov	r13, r1
     26c:	0f 2e       	mov	r0, r31
     26e:	fd ea       	ldi	r31, 0xAD	; 173
     270:	ef 2e       	mov	r14, r31
     272:	f3 e0       	ldi	r31, 0x03	; 3
     274:	ff 2e       	mov	r15, r31
     276:	f0 2d       	mov	r31, r0
     278:	8e 01       	movw	r16, r28
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	a9 01       	movw	r20, r18
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	cb 01       	movw	r24, r22
     286:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
		AFTER(SEC(5),brain,onBridge,0);
     28a:	0f 2e       	mov	r0, r31
     28c:	fd e4       	ldi	r31, 0x4D	; 77
     28e:	ef 2e       	mov	r14, r31
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ff 2e       	mov	r15, r31
     294:	f0 2d       	mov	r31, r0
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	a9 01       	movw	r20, r18
     29c:	6a e5       	ldi	r22, 0x5A	; 90
     29e:	72 e6       	ldi	r23, 0x62	; 98
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
     2a8:	39 c0       	rjmp	.+114    	; 0x31c <decode+0x11e>
	}
	else if((((inp>>2)&1)==1)){
     2aa:	b2 fe       	sbrs	r11, 2
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <decode+0xbc>
		brain->queueSouth++;
     2ae:	8e 81       	ldd	r24, Y+6	; 0x06
     2b0:	9f 81       	ldd	r25, Y+7	; 0x07
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	9f 83       	std	Y+7, r25	; 0x07
     2b6:	8e 83       	std	Y+6, r24	; 0x06
     2b8:	31 c0       	rjmp	.+98     	; 0x31c <decode+0x11e>
	}
	else if(((inp>>3)&1)==1){
     2ba:	b3 fe       	sbrs	r11, 3
     2bc:	2f c0       	rjmp	.+94     	; 0x31c <decode+0x11e>
		brain->queueSouth--;
     2be:	8e 81       	ldd	r24, Y+6	; 0x06
     2c0:	9f 81       	ldd	r25, Y+7	; 0x07
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	9f 83       	std	Y+7, r25	; 0x07
     2c6:	8e 83       	std	Y+6, r24	; 0x06
		brain->queueBridge++;
     2c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ca:	9b 85       	ldd	r25, Y+11	; 0x0b
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	9b 87       	std	Y+11, r25	; 0x0b
     2d0:	8a 87       	std	Y+10, r24	; 0x0a
		brain->queuePassed++;
     2d2:	88 85       	ldd	r24, Y+8	; 0x08
     2d4:	99 85       	ldd	r25, Y+9	; 0x09
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	99 87       	std	Y+9, r25	; 0x09
     2da:	88 87       	std	Y+8, r24	; 0x08
		ASYNC(brain,updateLCD,0);
     2dc:	c1 2c       	mov	r12, r1
     2de:	d1 2c       	mov	r13, r1
     2e0:	0f 2e       	mov	r0, r31
     2e2:	fd ea       	ldi	r31, 0xAD	; 173
     2e4:	ef 2e       	mov	r14, r31
     2e6:	f3 e0       	ldi	r31, 0x03	; 3
     2e8:	ff 2e       	mov	r15, r31
     2ea:	f0 2d       	mov	r31, r0
     2ec:	8e 01       	movw	r16, r28
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	a9 01       	movw	r20, r18
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	cb 01       	movw	r24, r22
     2fa:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
		AFTER(SEC(5),brain,onBridge,0);
     2fe:	0f 2e       	mov	r0, r31
     300:	fd e4       	ldi	r31, 0x4D	; 77
     302:	ef 2e       	mov	r14, r31
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	ff 2e       	mov	r15, r31
     308:	f0 2d       	mov	r31, r0
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	a9 01       	movw	r20, r18
     310:	6a e5       	ldi	r22, 0x5A	; 90
     312:	72 e6       	ldi	r23, 0x62	; 98
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
	}
	if(brain->queuePassed>=MAX && (brain->queueNorth!=0&&brain->queueSouth!=0)){
     31c:	88 85       	ldd	r24, Y+8	; 0x08
     31e:	99 85       	ldd	r25, Y+9	; 0x09
     320:	06 97       	sbiw	r24, 0x06	; 6
     322:	0c f4       	brge	.+2      	; 0x326 <decode+0x128>
     324:	51 c0       	rjmp	.+162    	; 0x3c8 <decode+0x1ca>
     326:	8c 81       	ldd	r24, Y+4	; 0x04
     328:	9d 81       	ldd	r25, Y+5	; 0x05
     32a:	89 2b       	or	r24, r25
     32c:	09 f4       	brne	.+2      	; 0x330 <decode+0x132>
     32e:	4c c0       	rjmp	.+152    	; 0x3c8 <decode+0x1ca>
     330:	8e 81       	ldd	r24, Y+6	; 0x06
     332:	9f 81       	ldd	r25, Y+7	; 0x07
     334:	89 2b       	or	r24, r25
     336:	09 f4       	brne	.+2      	; 0x33a <decode+0x13c>
     338:	47 c0       	rjmp	.+142    	; 0x3c8 <decode+0x1ca>
		ASYNC(brain, output, 0xA);
     33a:	0f 2e       	mov	r0, r31
     33c:	fa e0       	ldi	r31, 0x0A	; 10
     33e:	cf 2e       	mov	r12, r31
     340:	d1 2c       	mov	r13, r1
     342:	f0 2d       	mov	r31, r0
     344:	0f 2e       	mov	r0, r31
     346:	fc ed       	ldi	r31, 0xDC	; 220
     348:	ef 2e       	mov	r14, r31
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	ff 2e       	mov	r15, r31
     34e:	f0 2d       	mov	r31, r0
     350:	8e 01       	movw	r16, r28
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	a9 01       	movw	r20, r18
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	cb 01       	movw	r24, r22
     35e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
		brain->queuePassed=0;
     362:	19 86       	std	Y+9, r1	; 0x09
     364:	18 86       	std	Y+8, r1	; 0x08
		if(brain->queueOther == 1){
     366:	8c 85       	ldd	r24, Y+12	; 0x0c
     368:	9d 85       	ldd	r25, Y+13	; 0x0d
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	91 05       	cpc	r25, r1
     36e:	89 f4       	brne	.+34     	; 0x392 <decode+0x194>
			brain->queueOther = 0;
     370:	1d 86       	std	Y+13, r1	; 0x0d
     372:	1c 86       	std	Y+12, r1	; 0x0c
			AFTER(SEC(5),brain,output,0x9);
     374:	0f 2e       	mov	r0, r31
     376:	f9 e0       	ldi	r31, 0x09	; 9
     378:	cf 2e       	mov	r12, r31
     37a:	d1 2c       	mov	r13, r1
     37c:	f0 2d       	mov	r31, r0
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	a9 01       	movw	r20, r18
     384:	6a e5       	ldi	r22, 0x5A	; 90
     386:	72 e6       	ldi	r23, 0x62	; 98
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
     390:	1b c0       	rjmp	.+54     	; 0x3c8 <decode+0x1ca>
		}
		else if(brain->queueOther == 0){
     392:	89 2b       	or	r24, r25
     394:	c9 f4       	brne	.+50     	; 0x3c8 <decode+0x1ca>
			brain->queueOther = 1;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9d 87       	std	Y+13, r25	; 0x0d
     39c:	8c 87       	std	Y+12, r24	; 0x0c
			AFTER(SEC(5),brain,output,0x6);
     39e:	0f 2e       	mov	r0, r31
     3a0:	f6 e0       	ldi	r31, 0x06	; 6
     3a2:	cf 2e       	mov	r12, r31
     3a4:	d1 2c       	mov	r13, r1
     3a6:	f0 2d       	mov	r31, r0
     3a8:	0f 2e       	mov	r0, r31
     3aa:	fc ed       	ldi	r31, 0xDC	; 220
     3ac:	ef 2e       	mov	r14, r31
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	ff 2e       	mov	r15, r31
     3b2:	f0 2d       	mov	r31, r0
     3b4:	8e 01       	movw	r16, r28
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	a9 01       	movw	r20, r18
     3bc:	6a e5       	ldi	r22, 0x5A	; 90
     3be:	72 e6       	ldi	r23, 0x62	; 98
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
		}	
	}
	//ASYNC(brain,updateLCD,0);
	ASYNC(brain,logicOfLight,0);
     3c8:	c1 2c       	mov	r12, r1
     3ca:	d1 2c       	mov	r13, r1
     3cc:	0f 2e       	mov	r0, r31
     3ce:	f2 e7       	ldi	r31, 0x72	; 114
     3d0:	ef 2e       	mov	r14, r31
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	ff 2e       	mov	r15, r31
     3d6:	f0 2d       	mov	r31, r0
     3d8:	8e 01       	movw	r16, r28
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	a9 01       	movw	r20, r18
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	cb 01       	movw	r24, r22
     3e6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	08 95       	ret

000003fe <recieiveMessage>:
 */ 

#include "Input.h"
#include "LCD.h"

void recieiveMessage(Input* inp){
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
	int d = UDR0;
     40a:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ASYNC(inp->brain, decode, d);
     40e:	d1 2c       	mov	r13, r1
     410:	fc 01       	movw	r30, r24
     412:	04 81       	ldd	r16, Z+4	; 0x04
     414:	15 81       	ldd	r17, Z+5	; 0x05
     416:	0f 2e       	mov	r0, r31
     418:	ff ef       	ldi	r31, 0xFF	; 255
     41a:	ef 2e       	mov	r14, r31
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ff 2e       	mov	r15, r31
     420:	f0 2d       	mov	r31, r0
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	a9 01       	movw	r20, r18
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	cb 01       	movw	r24, r22
     42e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
}
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	08 95       	ret

00000440 <writeChar>:
#define FOSC 8000000UL //unsigned long
#define BAUD 9600
#define UBRRR (((FOSC/(BAUD*16*UL)))-1)


void writeChar(char ch, int pos){
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	64 97       	sbiw	r28, 0x14	; 20
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
	char mask;
	uint16_t allSCC[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
     456:	94 e1       	ldi	r25, 0x14	; 20
     458:	ee e0       	ldi	r30, 0x0E	; 14
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	de 01       	movw	r26, r28
     45e:	11 96       	adiw	r26, 0x01	; 1
     460:	01 90       	ld	r0, Z+
     462:	0d 92       	st	X+, r0
     464:	9a 95       	dec	r25
     466:	e1 f7       	brne	.-8      	; 0x460 <writeChar+0x20>
	uint16_t number;
	char nibble = 0x0000;
	char out1 = 0x00, out2= 0x00, out3= 0x00, out4 = 0x00;
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
     468:	66 30       	cpi	r22, 0x06	; 6
     46a:	71 05       	cpc	r23, r1
     46c:	08 f0       	brcs	.+2      	; 0x470 <writeChar+0x30>
     46e:	00 c1       	rjmp	.+512    	; 0x670 <__stack+0x171>
		return;
	}
	if(pos%2==0){
     470:	60 ff       	sbrs	r22, 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <writeChar+0x38>
		mask = 0xF0;
	}
	else{
		mask = 0x0F;
     474:	af e0       	ldi	r26, 0x0F	; 15
     476:	01 c0       	rjmp	.+2      	; 0x47a <writeChar+0x3a>
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
		return;
	}
	if(pos%2==0){
		mask = 0xF0;
     478:	a0 ef       	ldi	r26, 0xF0	; 240
	}
	else{
		mask = 0x0F;
	}
	
	if(isdigit(ch)){
     47a:	28 2f       	mov	r18, r24
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	a9 01       	movw	r20, r18
     480:	40 53       	subi	r20, 0x30	; 48
     482:	51 09       	sbc	r21, r1
     484:	4a 30       	cpi	r20, 0x0A	; 10
     486:	51 05       	cpc	r21, r1
     488:	08 f4       	brcc	.+2      	; 0x48c <writeChar+0x4c>
		number = ch-'0'; //omvandlar typ
     48a:	9a 01       	movw	r18, r20
		return;
	}*/
	else{
		number = ch;
	}
	int mod = pos%2;
     48c:	cb 01       	movw	r24, r22
     48e:	81 70       	andi	r24, 0x01	; 1
     490:	90 78       	andi	r25, 0x80	; 128
     492:	99 23       	and	r25, r25
     494:	24 f4       	brge	.+8      	; 0x49e <writeChar+0x5e>
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	8e 6f       	ori	r24, 0xFE	; 254
     49a:	9f 6f       	ori	r25, 0xFF	; 255
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	ac 01       	movw	r20, r24
	if(mod==1){
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <writeChar+0x66>
     4a4:	c8 c0       	rjmp	.+400    	; 0x636 <__stack+0x137>
		pos-=1; //fixar med index
     4a6:	61 50       	subi	r22, 0x01	; 1
     4a8:	71 09       	sbc	r23, r1
     4aa:	c5 c0       	rjmp	.+394    	; 0x636 <__stack+0x137>
			out4=nibble;
		}
	}
	
	if(pos==0){
		LCDDR0 = (out1<<(mod*4)) + (LCDDR0&mask);
     4ac:	ca 01       	movw	r24, r20
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	4c ee       	ldi	r20, 0xEC	; 236
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	fa 01       	movw	r30, r20
     4bc:	90 81       	ld	r25, Z
     4be:	e1 2f       	mov	r30, r17
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	08 2e       	mov	r0, r24
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <writeChar+0x8a>
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <writeChar+0x86>
     4ce:	9a 23       	and	r25, r26
     4d0:	9e 0f       	add	r25, r30
     4d2:	fa 01       	movw	r30, r20
     4d4:	90 83       	st	Z, r25
		LCDDR5 = (out2<<(mod*4))+(LCDDR5&mask);
     4d6:	e1 ef       	ldi	r30, 0xF1	; 241
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	90 81       	ld	r25, Z
     4dc:	6b 2f       	mov	r22, r27
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	08 2e       	mov	r0, r24
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <writeChar+0xa8>
     4e4:	66 0f       	add	r22, r22
     4e6:	77 1f       	adc	r23, r23
     4e8:	0a 94       	dec	r0
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <writeChar+0xa4>
     4ec:	9a 23       	and	r25, r26
     4ee:	69 0f       	add	r22, r25
     4f0:	60 83       	st	Z, r22
		LCDDR10 = (out3<<(mod*4))+(LCDDR10&mask);
     4f2:	e6 ef       	ldi	r30, 0xF6	; 246
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	90 81       	ld	r25, Z
     4f8:	43 2f       	mov	r20, r19
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	08 2e       	mov	r0, r24
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__stack+0x5>
     500:	44 0f       	add	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	0a 94       	dec	r0
     506:	e2 f7       	brpl	.-8      	; 0x500 <__stack+0x1>
     508:	9a 23       	and	r25, r26
     50a:	49 0f       	add	r20, r25
     50c:	40 83       	st	Z, r20
		LCDDR15 = (out4<<(mod*4))+(LCDDR15&mask);
     50e:	eb ef       	ldi	r30, 0xFB	; 251
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	40 81       	ld	r20, Z
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	b9 01       	movw	r22, r18
     518:	02 c0       	rjmp	.+4      	; 0x51e <__stack+0x1f>
     51a:	66 0f       	add	r22, r22
     51c:	77 1f       	adc	r23, r23
     51e:	8a 95       	dec	r24
     520:	e2 f7       	brpl	.-8      	; 0x51a <__stack+0x1b>
     522:	cb 01       	movw	r24, r22
     524:	a4 23       	and	r26, r20
     526:	8a 0f       	add	r24, r26
     528:	80 83       	st	Z, r24
     52a:	a2 c0       	rjmp	.+324    	; 0x670 <__stack+0x171>

	}
	if(pos==2){
     52c:	62 30       	cpi	r22, 0x02	; 2
     52e:	71 05       	cpc	r23, r1
     530:	09 f0       	breq	.+2      	; 0x534 <__stack+0x35>
     532:	3f c0       	rjmp	.+126    	; 0x5b2 <__stack+0xb3>
		LCDDR1 = (out1<<(mod*4))+ (LCDDR1&mask);
     534:	ca 01       	movw	r24, r20
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	4d ee       	ldi	r20, 0xED	; 237
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	fa 01       	movw	r30, r20
     544:	90 81       	ld	r25, Z
     546:	e1 2f       	mov	r30, r17
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	08 2e       	mov	r0, r24
     54c:	02 c0       	rjmp	.+4      	; 0x552 <__stack+0x53>
     54e:	ee 0f       	add	r30, r30
     550:	ff 1f       	adc	r31, r31
     552:	0a 94       	dec	r0
     554:	e2 f7       	brpl	.-8      	; 0x54e <__stack+0x4f>
     556:	9a 23       	and	r25, r26
     558:	9e 0f       	add	r25, r30
     55a:	fa 01       	movw	r30, r20
     55c:	90 83       	st	Z, r25
		LCDDR6 = (out2<<(mod*4))+ (LCDDR6&mask);
     55e:	e2 ef       	ldi	r30, 0xF2	; 242
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	90 81       	ld	r25, Z
     564:	6b 2f       	mov	r22, r27
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	08 2e       	mov	r0, r24
     56a:	02 c0       	rjmp	.+4      	; 0x570 <__stack+0x71>
     56c:	66 0f       	add	r22, r22
     56e:	77 1f       	adc	r23, r23
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <__stack+0x6d>
     574:	9a 23       	and	r25, r26
     576:	69 0f       	add	r22, r25
     578:	60 83       	st	Z, r22
		LCDDR11 = (out3<<(mod*4))+ (LCDDR11&mask);
     57a:	e7 ef       	ldi	r30, 0xF7	; 247
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	90 81       	ld	r25, Z
     580:	43 2f       	mov	r20, r19
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	08 2e       	mov	r0, r24
     586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x8d>
     588:	44 0f       	add	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <__stack+0x89>
     590:	3a 2f       	mov	r19, r26
     592:	39 23       	and	r19, r25
     594:	43 0f       	add	r20, r19
     596:	40 83       	st	Z, r20
		LCDDR16 = (out4<<(mod*4))+ (LCDDR16&mask);
     598:	ec ef       	ldi	r30, 0xFC	; 252
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	90 81       	ld	r25, Z
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__stack+0xa7>
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	8a 95       	dec	r24
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <__stack+0xa3>
     5aa:	a9 23       	and	r26, r25
     5ac:	2a 0f       	add	r18, r26
     5ae:	20 83       	st	Z, r18
     5b0:	5f c0       	rjmp	.+190    	; 0x670 <__stack+0x171>
	}
	if(pos==4){
     5b2:	64 30       	cpi	r22, 0x04	; 4
     5b4:	71 05       	cpc	r23, r1
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__stack+0xbb>
     5b8:	5b c0       	rjmp	.+182    	; 0x670 <__stack+0x171>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
     5ba:	ca 01       	movw	r24, r20
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	4e ee       	ldi	r20, 0xEE	; 238
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	fa 01       	movw	r30, r20
     5ca:	90 81       	ld	r25, Z
     5cc:	e1 2f       	mov	r30, r17
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	08 2e       	mov	r0, r24
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__stack+0xd9>
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	0a 94       	dec	r0
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <__stack+0xd5>
     5dc:	9a 23       	and	r25, r26
     5de:	9e 0f       	add	r25, r30
     5e0:	fa 01       	movw	r30, r20
     5e2:	90 83       	st	Z, r25
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
     5e4:	e3 ef       	ldi	r30, 0xF3	; 243
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	90 81       	ld	r25, Z
     5ea:	6b 2f       	mov	r22, r27
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	08 2e       	mov	r0, r24
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__stack+0xf7>
     5f2:	66 0f       	add	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	0a 94       	dec	r0
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <__stack+0xf3>
     5fa:	9a 23       	and	r25, r26
     5fc:	69 0f       	add	r22, r25
     5fe:	60 83       	st	Z, r22
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
     600:	e8 ef       	ldi	r30, 0xF8	; 248
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	90 81       	ld	r25, Z
     606:	43 2f       	mov	r20, r19
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	08 2e       	mov	r0, r24
     60c:	02 c0       	rjmp	.+4      	; 0x612 <__stack+0x113>
     60e:	44 0f       	add	r20, r20
     610:	55 1f       	adc	r21, r21
     612:	0a 94       	dec	r0
     614:	e2 f7       	brpl	.-8      	; 0x60e <__stack+0x10f>
     616:	9a 23       	and	r25, r26
     618:	49 0f       	add	r20, r25
     61a:	40 83       	st	Z, r20
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
     61c:	ed ef       	ldi	r30, 0xFD	; 253
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	90 81       	ld	r25, Z
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <__stack+0x12b>
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	8a 95       	dec	r24
     62c:	e2 f7       	brpl	.-8      	; 0x626 <__stack+0x127>
     62e:	a9 23       	and	r26, r25
     630:	2a 0f       	add	r18, r26
     632:	20 83       	st	Z, r18
     634:	1d c0       	rjmp	.+58     	; 0x670 <__stack+0x171>
	if(mod==1){
		pos-=1; //fixar med index
	}
	
	
	charr = allSCC[number];
     636:	22 0f       	add	r18, r18
     638:	33 1f       	adc	r19, r19
     63a:	fe 01       	movw	r30, r28
     63c:	e2 0f       	add	r30, r18
     63e:	f3 1f       	adc	r31, r19
     640:	81 81       	ldd	r24, Z+1	; 0x01
     642:	92 81       	ldd	r25, Z+2	; 0x02
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
     644:	18 2f       	mov	r17, r24
     646:	1f 70       	andi	r17, 0x0F	; 15
		charr = charr >> 4;
     648:	9c 01       	movw	r18, r24
     64a:	32 95       	swap	r19
     64c:	22 95       	swap	r18
     64e:	2f 70       	andi	r18, 0x0F	; 15
     650:	23 27       	eor	r18, r19
     652:	3f 70       	andi	r19, 0x0F	; 15
     654:	23 27       	eor	r18, r19
	}
	
	
	charr = allSCC[number];
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
     656:	b2 2f       	mov	r27, r18
     658:	bf 70       	andi	r27, 0x0F	; 15
     65a:	39 2f       	mov	r19, r25
     65c:	3f 70       	andi	r19, 0x0F	; 15
     65e:	29 2f       	mov	r18, r25
     660:	22 95       	swap	r18
     662:	2f 70       	andi	r18, 0x0F	; 15
     664:	2f 70       	andi	r18, 0x0F	; 15
		if(i==3){
			out4=nibble;
		}
	}
	
	if(pos==0){
     666:	61 15       	cp	r22, r1
     668:	71 05       	cpc	r23, r1
     66a:	09 f4       	brne	.+2      	; 0x66e <__stack+0x16f>
     66c:	1f cf       	rjmp	.-450    	; 0x4ac <writeChar+0x6c>
     66e:	5e cf       	rjmp	.-324    	; 0x52c <__stack+0x2d>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
	}
}
     670:	64 96       	adiw	r28, 0x14	; 20
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	08 95       	ret

00000684 <printAt>:

void printAt(long num, int pos) {
     684:	8f 92       	push	r8
     686:	9f 92       	push	r9
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	4b 01       	movw	r8, r22
     69a:	5c 01       	movw	r10, r24
     69c:	ea 01       	movw	r28, r20
	//lock(&currMut);
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     69e:	24 e6       	ldi	r18, 0x64	; 100
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	0e 94 27 10 	call	0x204e	; 0x204e <__divmodsi4>
     6aa:	0f 2e       	mov	r0, r31
     6ac:	fa e0       	ldi	r31, 0x0A	; 10
     6ae:	cf 2e       	mov	r12, r31
     6b0:	d1 2c       	mov	r13, r1
     6b2:	e1 2c       	mov	r14, r1
     6b4:	f1 2c       	mov	r15, r1
     6b6:	f0 2d       	mov	r31, r0
     6b8:	a7 01       	movw	r20, r14
     6ba:	96 01       	movw	r18, r12
     6bc:	0e 94 27 10 	call	0x204e	; 0x204e <__divmodsi4>
     6c0:	be 01       	movw	r22, r28
     6c2:	80 e3       	ldi	r24, 0x30	; 48
     6c4:	82 0f       	add	r24, r18
     6c6:	0e 94 20 02 	call	0x440	; 0x440 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     6ca:	21 96       	adiw	r28, 0x01	; 1
     6cc:	c5 01       	movw	r24, r10
     6ce:	b4 01       	movw	r22, r8
     6d0:	a7 01       	movw	r20, r14
     6d2:	96 01       	movw	r18, r12
     6d4:	0e 94 27 10 	call	0x204e	; 0x204e <__divmodsi4>
     6d8:	86 2f       	mov	r24, r22
     6da:	be 01       	movw	r22, r28
     6dc:	80 5d       	subi	r24, 0xD0	; 208
     6de:	0e 94 20 02 	call	0x440	; 0x440 <writeChar>
	//unlock(&currMut);
	
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	08 95       	ret

000006f8 <init>:

void init(void) {
	//Clock prescaler
	CLKPR = 0x80;
     6f8:	e1 e6       	ldi	r30, 0x61	; 97
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 e8       	ldi	r24, 0x80	; 128
     6fe:	80 83       	st	Z, r24
	CLKPR = 0x00;
     700:	10 82       	st	Z, r1
	
	// enables the logical interrupt sources
	EIMSK = 0xC0;
     702:	80 ec       	ldi	r24, 0xC0	; 192
     704:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0xC0;
     706:	8c bb       	out	0x1c, r24	; 28
	PCMSK1 |= 0xD0;
     708:	ec e6       	ldi	r30, 0x6C	; 108
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	90 81       	ld	r25, Z
     70e:	90 6d       	ori	r25, 0xD0	; 208
     710:	90 83       	st	Z, r25
	PCMSK0 |= 0x0C;
     712:	eb e6       	ldi	r30, 0x6B	; 107
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	90 81       	ld	r25, Z
     718:	9c 60       	ori	r25, 0x0C	; 12
     71a:	90 83       	st	Z, r25
	
	PORTB |= 0xD0;
     71c:	95 b1       	in	r25, 0x05	; 5
     71e:	90 6d       	ori	r25, 0xD0	; 208
     720:	95 b9       	out	0x05, r25	; 5
	PORTE |= 0x0C;
     722:	9e b1       	in	r25, 0x0e	; 14
     724:	9c 60       	ori	r25, 0x0C	; 12
     726:	9e b9       	out	0x0e, r25	; 14
	
	// LCD
	LCDCRA = 0xC0;			// LCD ENABLE and LOW POWER WAVEFORM
     728:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	LCDCRB = 0xB7;			// AsyncClock, 1/3 Bias, 1/4 Duty, 25 Segments
     72c:	87 eb       	ldi	r24, 0xB7	; 183
     72e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	LCDFRR = 0x07;			// LCD Clock Divide 32 Hz
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	LCDCCR = 0x0F;			// 3.35 Volt
     738:	8f e0       	ldi	r24, 0x0F	; 15
     73a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	
	//Enable Usart Module
	PRR = (0<<2);
     73e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	//USART
	//Set Baud rate
	UBRR0H = (((FOSC / (BAUD * 16UL))) - 1) >> 8;
     742:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (((FOSC / (BAUD * 16UL))) - 1);
     746:	83 e3       	ldi	r24, 0x33	; 51
     748:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//Enable reciever and transmitter
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     74c:	88 e9       	ldi	r24, 0x98	; 152
     74e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	//Set frame format 8data, 2 stop bit.
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
     752:	8e e0       	ldi	r24, 0x0E	; 14
     754:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     758:	08 95       	ret

0000075a <updateLCD>:

}
void updateLCD(Brain* b, int d){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
	
	printAt(b->queueNorth,0);
     760:	6c 81       	ldd	r22, Y+4	; 0x04
     762:	7d 81       	ldd	r23, Y+5	; 0x05
     764:	07 2e       	mov	r0, r23
     766:	00 0c       	add	r0, r0
     768:	88 0b       	sbc	r24, r24
     76a:	99 0b       	sbc	r25, r25
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	0e 94 42 03 	call	0x684	; 0x684 <printAt>
	printAt(b->queueBridge,2);
     774:	6a 85       	ldd	r22, Y+10	; 0x0a
     776:	7b 85       	ldd	r23, Y+11	; 0x0b
     778:	07 2e       	mov	r0, r23
     77a:	00 0c       	add	r0, r0
     77c:	88 0b       	sbc	r24, r24
     77e:	99 0b       	sbc	r25, r25
     780:	42 e0       	ldi	r20, 0x02	; 2
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	0e 94 42 03 	call	0x684	; 0x684 <printAt>
	printAt(b->queueSouth,4);
     788:	6e 81       	ldd	r22, Y+6	; 0x06
     78a:	7f 81       	ldd	r23, Y+7	; 0x07
     78c:	07 2e       	mov	r0, r23
     78e:	00 0c       	add	r0, r0
     790:	88 0b       	sbc	r24, r24
     792:	99 0b       	sbc	r25, r25
     794:	44 e0       	ldi	r20, 0x04	; 4
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	0e 94 42 03 	call	0x684	; 0x684 <printAt>
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <main>:



int main(void)
{
    init();
     7a2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <init>
	
	INSTALL(&inp, recieiveMessage, IRQ_USART0_RX);
     7a6:	48 e0       	ldi	r20, 0x08	; 8
     7a8:	6f ef       	ldi	r22, 0xFF	; 255
     7aa:	71 e0       	ldi	r23, 0x01	; 1
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <install>
	return TINYTIMBER(&brain, updateLCD, 0);
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	6d ea       	ldi	r22, 0xAD	; 173
     7ba:	73 e0       	ldi	r23, 0x03	; 3
     7bc:	82 e2       	ldi	r24, 0x22	; 34
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	0e 94 0b 10 	call	0x2016	; 0x2016 <tinytimber>
}
     7c4:	08 95       	ret

000007c6 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <initialize+0x6>
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <initialize+0x8>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	83 e2       	ldi	r24, 0x23	; 35
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	23 e0       	ldi	r18, 0x03	; 3
     7d8:	33 e0       	ldi	r19, 0x03	; 3
     7da:	fc 01       	movw	r30, r24
     7dc:	70 97       	sbiw	r30, 0x10	; 16
     7de:	91 83       	std	Z+1, r25	; 0x01
     7e0:	80 83       	st	Z, r24
     7e2:	40 96       	adiw	r24, 0x10	; 16
     7e4:	82 17       	cp	r24, r18
     7e6:	93 07       	cpc	r25, r19
     7e8:	c1 f7       	brne	.-16     	; 0x7da <initialize+0x14>
     7ea:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <messages+0xe1>
     7ee:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <messages+0xe0>
     7f2:	ee e5       	ldi	r30, 0x5E	; 94
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	8b e7       	ldi	r24, 0x7B	; 123
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
     7fe:	88 e9       	ldi	r24, 0x98	; 152
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	96 8f       	std	Z+30, r25	; 0x1e
     804:	85 8f       	std	Z+29, r24	; 0x1d
     806:	a5 eb       	ldi	r26, 0xB5	; 181
     808:	b1 e0       	ldi	r27, 0x01	; 1
     80a:	b3 af       	std	Z+59, r27	; 0x3b
     80c:	a2 af       	std	Z+58, r26	; 0x3a
     80e:	1d 92       	st	X+, r1
     810:	1c 92       	st	X, r1
     812:	fa 83       	std	Y+2, r31	; 0x02
     814:	e9 83       	std	Y+1, r30	; 0x01
     816:	ef e5       	ldi	r30, 0x5F	; 95
     818:	f3 e0       	ldi	r31, 0x03	; 3
     81a:	fc 83       	std	Y+4, r31	; 0x04
     81c:	eb 83       	std	Y+3, r30	; 0x03
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	06 96       	adiw	r24, 0x06	; 6
     824:	0e 94 68 10 	call	0x20d0	; 0x20d0 <setjmp>
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	9c 81       	ldd	r25, Y+4	; 0x04
     82c:	e9 81       	ldd	r30, Y+1	; 0x01
     82e:	fa 81       	ldd	r31, Y+2	; 0x02
     830:	97 8b       	std	Z+23, r25	; 0x17
     832:	86 8b       	std	Z+22, r24	; 0x16
     834:	91 8f       	std	Z+25, r25	; 0x19
     836:	80 8f       	std	Z+24, r24	; 0x18
     838:	83 e8       	ldi	r24, 0x83	; 131
     83a:	9f e0       	ldi	r25, 0x0F	; 15
     83c:	94 8f       	std	Z+28, r25	; 0x1c
     83e:	83 8f       	std	Z+27, r24	; 0x1b
     840:	15 82       	std	Z+5, r1	; 0x05
     842:	14 82       	std	Z+4, r1	; 0x04
     844:	7d 96       	adiw	r30, 0x1d	; 29
     846:	fa 83       	std	Y+2, r31	; 0x02
     848:	e9 83       	std	Y+1, r30	; 0x01
     84a:	eb 81       	ldd	r30, Y+3	; 0x03
     84c:	fc 81       	ldd	r31, Y+4	; 0x04
     84e:	e0 5a       	subi	r30, 0xA0	; 160
     850:	ff 4f       	sbci	r31, 0xFF	; 255
     852:	fc 83       	std	Y+4, r31	; 0x04
     854:	eb 83       	std	Y+3, r30	; 0x03
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	82 5d       	subi	r24, 0xD2	; 210
     85c:	91 40       	sbci	r25, 0x01	; 1
     85e:	f9 f6       	brne	.-66     	; 0x81e <initialize+0x58>
     860:	e6 ef       	ldi	r30, 0xF6	; 246
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	11 82       	std	Z+1, r1	; 0x01
     866:	10 82       	st	Z, r1
     868:	15 82       	std	Z+5, r1	; 0x05
     86a:	14 82       	std	Z+4, r1	; 0x04
     86c:	13 82       	std	Z+3, r1	; 0x03
     86e:	12 82       	std	Z+2, r1	; 0x02
     870:	e1 e6       	ldi	r30, 0x61	; 97
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 e8       	ldi	r24, 0x80	; 128
     876:	80 83       	st	Z, r24
     878:	10 82       	st	Z, r1
     87a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     87e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <dispatch>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <dispatch+0x6>
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	9a 83       	std	Y+2, r25	; 0x02
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
     8ae:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
     8b2:	06 96       	adiw	r24, 0x06	; 6
     8b4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <setjmp>
     8b8:	89 2b       	or	r24, r25
     8ba:	59 f4       	brne	.+22     	; 0x8d2 <dispatch+0x36>
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <current+0x1>
     8c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <current>
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	06 96       	adiw	r24, 0x06	; 6
     8ce:	0e 94 88 10 	call	0x2110	; 0x2110 <longjmp>
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <schedule>:
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <msgQ>
     8e8:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <msgQ+0x1>
     8ec:	30 97       	sbiw	r30, 0x00	; 0
     8ee:	61 f1       	breq	.+88     	; 0x948 <schedule+0x6c>
     8f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <threadPool>
     8f4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threadPool+0x1>
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	31 f1       	breq	.+76     	; 0x948 <schedule+0x6c>
     8fc:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <activeStack>
     900:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <activeStack+0x1>
     904:	aa 81       	ldd	r26, Y+2	; 0x02
     906:	bb 81       	ldd	r27, Y+3	; 0x03
     908:	10 97       	sbiw	r26, 0x00	; 0
     90a:	79 f0       	breq	.+30     	; 0x92a <schedule+0x4e>
     90c:	46 81       	ldd	r20, Z+6	; 0x06
     90e:	57 81       	ldd	r21, Z+7	; 0x07
     910:	60 85       	ldd	r22, Z+8	; 0x08
     912:	71 85       	ldd	r23, Z+9	; 0x09
     914:	16 96       	adiw	r26, 0x06	; 6
     916:	0d 91       	ld	r16, X+
     918:	1d 91       	ld	r17, X+
     91a:	2d 91       	ld	r18, X+
     91c:	3c 91       	ld	r19, X
     91e:	19 97       	sbiw	r26, 0x09	; 9
     920:	40 1b       	sub	r20, r16
     922:	51 0b       	sbc	r21, r17
     924:	62 0b       	sbc	r22, r18
     926:	73 0b       	sbc	r23, r19
     928:	7a f4       	brpl	.+30     	; 0x948 <schedule+0x6c>
     92a:	fc 01       	movw	r30, r24
     92c:	20 81       	ld	r18, Z
     92e:	31 81       	ldd	r19, Z+1	; 0x01
     930:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <threadPool+0x1>
     934:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <threadPool>
     938:	d1 83       	std	Z+1, r29	; 0x01
     93a:	c0 83       	st	Z, r28
     93c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <activeStack+0x1>
     940:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <activeStack>
     944:	0e 94 4e 04 	call	0x89c	; 0x89c <dispatch>
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <__vector_1>:
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
     974:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     978:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     97c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     980:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     984:	c9 01       	movw	r24, r18
     986:	03 2e       	mov	r0, r19
     988:	00 0c       	add	r0, r0
     98a:	aa 0b       	sbc	r26, r26
     98c:	bb 0b       	sbc	r27, r27
     98e:	dc 01       	movw	r26, r24
     990:	99 27       	eor	r25, r25
     992:	88 27       	eor	r24, r24
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	84 2b       	or	r24, r20
     99a:	95 2b       	or	r25, r21
     99c:	a6 2b       	or	r26, r22
     99e:	b7 2b       	or	r27, r23
     9a0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     9a4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     9a8:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     9ac:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     9b0:	b0 9b       	sbis	0x16, 0	; 22
     9b2:	1b c0       	rjmp	.+54     	; 0x9ea <__vector_1+0x98>
     9b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9bc:	c9 01       	movw	r24, r18
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	09 2e       	mov	r0, r25
     9c2:	00 0c       	add	r0, r0
     9c4:	aa 0b       	sbc	r26, r26
     9c6:	bb 0b       	sbc	r27, r27
     9c8:	dc 01       	movw	r26, r24
     9ca:	99 27       	eor	r25, r25
     9cc:	88 27       	eor	r24, r24
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	84 2b       	or	r24, r20
     9d4:	95 2b       	or	r25, r21
     9d6:	a6 2b       	or	r26, r22
     9d8:	b7 2b       	or	r27, r23
     9da:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     9de:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     9e2:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     9e6:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     9ea:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable>
     9ee:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x1>
     9f2:	30 97       	sbiw	r30, 0x00	; 0
     9f4:	39 f0       	breq	.+14     	; 0xa04 <__vector_1+0xb2>
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable>
     9fe:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x1>
     a02:	09 95       	icall
     a04:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <__vector_2>:
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	2f 93       	push	r18
     a36:	3f 93       	push	r19
     a38:	4f 93       	push	r20
     a3a:	5f 93       	push	r21
     a3c:	6f 93       	push	r22
     a3e:	7f 93       	push	r23
     a40:	8f 93       	push	r24
     a42:	9f 93       	push	r25
     a44:	af 93       	push	r26
     a46:	bf 93       	push	r27
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
     a4c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     a50:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     a54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a5c:	c9 01       	movw	r24, r18
     a5e:	03 2e       	mov	r0, r19
     a60:	00 0c       	add	r0, r0
     a62:	aa 0b       	sbc	r26, r26
     a64:	bb 0b       	sbc	r27, r27
     a66:	dc 01       	movw	r26, r24
     a68:	99 27       	eor	r25, r25
     a6a:	88 27       	eor	r24, r24
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	84 2b       	or	r24, r20
     a72:	95 2b       	or	r25, r21
     a74:	a6 2b       	or	r26, r22
     a76:	b7 2b       	or	r27, r23
     a78:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     a7c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     a80:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     a84:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     a88:	b0 9b       	sbis	0x16, 0	; 22
     a8a:	1b c0       	rjmp	.+54     	; 0xac2 <__vector_2+0x98>
     a8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a94:	c9 01       	movw	r24, r18
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	09 2e       	mov	r0, r25
     a9a:	00 0c       	add	r0, r0
     a9c:	aa 0b       	sbc	r26, r26
     a9e:	bb 0b       	sbc	r27, r27
     aa0:	dc 01       	movw	r26, r24
     aa2:	99 27       	eor	r25, r25
     aa4:	88 27       	eor	r24, r24
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	84 2b       	or	r24, r20
     aac:	95 2b       	or	r25, r21
     aae:	a6 2b       	or	r26, r22
     ab0:	b7 2b       	or	r27, r23
     ab2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     ab6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     aba:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     abe:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     ac2:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x2>
     ac6:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x3>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	39 f0       	breq	.+14     	; 0xadc <__vector_2+0xb2>
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x2>
     ad6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x3>
     ada:	09 95       	icall
     adc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <__vector_3>:
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
     b24:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     b28:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     b2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b34:	c9 01       	movw	r24, r18
     b36:	03 2e       	mov	r0, r19
     b38:	00 0c       	add	r0, r0
     b3a:	aa 0b       	sbc	r26, r26
     b3c:	bb 0b       	sbc	r27, r27
     b3e:	dc 01       	movw	r26, r24
     b40:	99 27       	eor	r25, r25
     b42:	88 27       	eor	r24, r24
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	84 2b       	or	r24, r20
     b4a:	95 2b       	or	r25, r21
     b4c:	a6 2b       	or	r26, r22
     b4e:	b7 2b       	or	r27, r23
     b50:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     b54:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     b58:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     b5c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     b60:	b0 9b       	sbis	0x16, 0	; 22
     b62:	1b c0       	rjmp	.+54     	; 0xb9a <__vector_3+0x98>
     b64:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b68:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b6c:	c9 01       	movw	r24, r18
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	09 2e       	mov	r0, r25
     b72:	00 0c       	add	r0, r0
     b74:	aa 0b       	sbc	r26, r26
     b76:	bb 0b       	sbc	r27, r27
     b78:	dc 01       	movw	r26, r24
     b7a:	99 27       	eor	r25, r25
     b7c:	88 27       	eor	r24, r24
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	84 2b       	or	r24, r20
     b84:	95 2b       	or	r25, r21
     b86:	a6 2b       	or	r26, r22
     b88:	b7 2b       	or	r27, r23
     b8a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     b8e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     b92:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     b96:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     b9a:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x4>
     b9e:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x5>
     ba2:	30 97       	sbiw	r30, 0x00	; 0
     ba4:	39 f0       	breq	.+14     	; 0xbb4 <__vector_3+0xb2>
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x4>
     bae:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x5>
     bb2:	09 95       	icall
     bb4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	bf 91       	pop	r27
     bbe:	af 91       	pop	r26
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	7f 91       	pop	r23
     bc6:	6f 91       	pop	r22
     bc8:	5f 91       	pop	r21
     bca:	4f 91       	pop	r20
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <__vector_4>:
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	2f 93       	push	r18
     be6:	3f 93       	push	r19
     be8:	4f 93       	push	r20
     bea:	5f 93       	push	r21
     bec:	6f 93       	push	r22
     bee:	7f 93       	push	r23
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
     bf4:	af 93       	push	r26
     bf6:	bf 93       	push	r27
     bf8:	ef 93       	push	r30
     bfa:	ff 93       	push	r31
     bfc:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     c00:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     c04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c0c:	c9 01       	movw	r24, r18
     c0e:	03 2e       	mov	r0, r19
     c10:	00 0c       	add	r0, r0
     c12:	aa 0b       	sbc	r26, r26
     c14:	bb 0b       	sbc	r27, r27
     c16:	dc 01       	movw	r26, r24
     c18:	99 27       	eor	r25, r25
     c1a:	88 27       	eor	r24, r24
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	84 2b       	or	r24, r20
     c22:	95 2b       	or	r25, r21
     c24:	a6 2b       	or	r26, r22
     c26:	b7 2b       	or	r27, r23
     c28:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     c2c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     c30:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     c34:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     c38:	b0 9b       	sbis	0x16, 0	; 22
     c3a:	1b c0       	rjmp	.+54     	; 0xc72 <__vector_4+0x98>
     c3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c44:	c9 01       	movw	r24, r18
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	09 2e       	mov	r0, r25
     c4a:	00 0c       	add	r0, r0
     c4c:	aa 0b       	sbc	r26, r26
     c4e:	bb 0b       	sbc	r27, r27
     c50:	dc 01       	movw	r26, r24
     c52:	99 27       	eor	r25, r25
     c54:	88 27       	eor	r24, r24
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	84 2b       	or	r24, r20
     c5c:	95 2b       	or	r25, r21
     c5e:	a6 2b       	or	r26, r22
     c60:	b7 2b       	or	r27, r23
     c62:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     c66:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     c6a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     c6e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     c72:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x6>
     c76:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x7>
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	39 f0       	breq	.+14     	; 0xc8c <__vector_4+0xb2>
     c7e:	63 e0       	ldi	r22, 0x03	; 3
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x6>
     c86:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x7>
     c8a:	09 95       	icall
     c8c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_5>:
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	4f 93       	push	r20
     cc2:	5f 93       	push	r21
     cc4:	6f 93       	push	r22
     cc6:	7f 93       	push	r23
     cc8:	8f 93       	push	r24
     cca:	9f 93       	push	r25
     ccc:	af 93       	push	r26
     cce:	bf 93       	push	r27
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
     cd4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     cd8:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     cdc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ce0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ce4:	c9 01       	movw	r24, r18
     ce6:	03 2e       	mov	r0, r19
     ce8:	00 0c       	add	r0, r0
     cea:	aa 0b       	sbc	r26, r26
     cec:	bb 0b       	sbc	r27, r27
     cee:	dc 01       	movw	r26, r24
     cf0:	99 27       	eor	r25, r25
     cf2:	88 27       	eor	r24, r24
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	84 2b       	or	r24, r20
     cfa:	95 2b       	or	r25, r21
     cfc:	a6 2b       	or	r26, r22
     cfe:	b7 2b       	or	r27, r23
     d00:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     d04:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     d08:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     d0c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     d10:	b0 9b       	sbis	0x16, 0	; 22
     d12:	1b c0       	rjmp	.+54     	; 0xd4a <__vector_5+0x98>
     d14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d1c:	c9 01       	movw	r24, r18
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	09 2e       	mov	r0, r25
     d22:	00 0c       	add	r0, r0
     d24:	aa 0b       	sbc	r26, r26
     d26:	bb 0b       	sbc	r27, r27
     d28:	dc 01       	movw	r26, r24
     d2a:	99 27       	eor	r25, r25
     d2c:	88 27       	eor	r24, r24
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	84 2b       	or	r24, r20
     d34:	95 2b       	or	r25, r21
     d36:	a6 2b       	or	r26, r22
     d38:	b7 2b       	or	r27, r23
     d3a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     d3e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     d42:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     d46:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     d4a:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x8>
     d4e:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x9>
     d52:	30 97       	sbiw	r30, 0x00	; 0
     d54:	39 f0       	breq	.+14     	; 0xd64 <__vector_5+0xb2>
     d56:	64 e0       	ldi	r22, 0x04	; 4
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x8>
     d5e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x9>
     d62:	09 95       	icall
     d64:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	bf 91       	pop	r27
     d6e:	af 91       	pop	r26
     d70:	9f 91       	pop	r25
     d72:	8f 91       	pop	r24
     d74:	7f 91       	pop	r23
     d76:	6f 91       	pop	r22
     d78:	5f 91       	pop	r21
     d7a:	4f 91       	pop	r20
     d7c:	3f 91       	pop	r19
     d7e:	2f 91       	pop	r18
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	0f 90       	pop	r0
     d86:	1f 90       	pop	r1
     d88:	18 95       	reti

00000d8a <__vector_10>:
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	6f 93       	push	r22
     d9e:	7f 93       	push	r23
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	ef 93       	push	r30
     daa:	ff 93       	push	r31
     dac:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     db0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     db4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     db8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     dbc:	c9 01       	movw	r24, r18
     dbe:	03 2e       	mov	r0, r19
     dc0:	00 0c       	add	r0, r0
     dc2:	aa 0b       	sbc	r26, r26
     dc4:	bb 0b       	sbc	r27, r27
     dc6:	dc 01       	movw	r26, r24
     dc8:	99 27       	eor	r25, r25
     dca:	88 27       	eor	r24, r24
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	84 2b       	or	r24, r20
     dd2:	95 2b       	or	r25, r21
     dd4:	a6 2b       	or	r26, r22
     dd6:	b7 2b       	or	r27, r23
     dd8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     ddc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     de0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     de4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     de8:	b0 9b       	sbis	0x16, 0	; 22
     dea:	1b c0       	rjmp	.+54     	; 0xe22 <__vector_10+0x98>
     dec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     df0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     df4:	c9 01       	movw	r24, r18
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	09 2e       	mov	r0, r25
     dfa:	00 0c       	add	r0, r0
     dfc:	aa 0b       	sbc	r26, r26
     dfe:	bb 0b       	sbc	r27, r27
     e00:	dc 01       	movw	r26, r24
     e02:	99 27       	eor	r25, r25
     e04:	88 27       	eor	r24, r24
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	84 2b       	or	r24, r20
     e0c:	95 2b       	or	r25, r21
     e0e:	a6 2b       	or	r26, r22
     e10:	b7 2b       	or	r27, r23
     e12:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     e16:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     e1a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     e1e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     e22:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0xa>
     e26:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0xb>
     e2a:	30 97       	sbiw	r30, 0x00	; 0
     e2c:	39 f0       	breq	.+14     	; 0xe3c <__vector_10+0xb2>
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0xa>
     e36:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0xb>
     e3a:	09 95       	icall
     e3c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	7f 91       	pop	r23
     e4e:	6f 91       	pop	r22
     e50:	5f 91       	pop	r21
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <__vector_11>:
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	2f 93       	push	r18
     e6e:	3f 93       	push	r19
     e70:	4f 93       	push	r20
     e72:	5f 93       	push	r21
     e74:	6f 93       	push	r22
     e76:	7f 93       	push	r23
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
     e7c:	af 93       	push	r26
     e7e:	bf 93       	push	r27
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
     e84:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     e88:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     e8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e94:	c9 01       	movw	r24, r18
     e96:	03 2e       	mov	r0, r19
     e98:	00 0c       	add	r0, r0
     e9a:	aa 0b       	sbc	r26, r26
     e9c:	bb 0b       	sbc	r27, r27
     e9e:	dc 01       	movw	r26, r24
     ea0:	99 27       	eor	r25, r25
     ea2:	88 27       	eor	r24, r24
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	84 2b       	or	r24, r20
     eaa:	95 2b       	or	r25, r21
     eac:	a6 2b       	or	r26, r22
     eae:	b7 2b       	or	r27, r23
     eb0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     eb4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     eb8:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     ebc:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     ec0:	b0 9b       	sbis	0x16, 0	; 22
     ec2:	1b c0       	rjmp	.+54     	; 0xefa <__vector_11+0x98>
     ec4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ec8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ecc:	c9 01       	movw	r24, r18
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	09 2e       	mov	r0, r25
     ed2:	00 0c       	add	r0, r0
     ed4:	aa 0b       	sbc	r26, r26
     ed6:	bb 0b       	sbc	r27, r27
     ed8:	dc 01       	movw	r26, r24
     eda:	99 27       	eor	r25, r25
     edc:	88 27       	eor	r24, r24
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	84 2b       	or	r24, r20
     ee4:	95 2b       	or	r25, r21
     ee6:	a6 2b       	or	r26, r22
     ee8:	b7 2b       	or	r27, r23
     eea:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     eee:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     ef2:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     ef6:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     efa:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0xc>
     efe:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0xd>
     f02:	30 97       	sbiw	r30, 0x00	; 0
     f04:	39 f0       	breq	.+14     	; 0xf14 <__vector_11+0xb2>
     f06:	66 e0       	ldi	r22, 0x06	; 6
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0xc>
     f0e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0xd>
     f12:	09 95       	icall
     f14:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_12>:
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
     f60:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
     f64:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f68:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f6c:	c9 01       	movw	r24, r18
     f6e:	03 2e       	mov	r0, r19
     f70:	00 0c       	add	r0, r0
     f72:	aa 0b       	sbc	r26, r26
     f74:	bb 0b       	sbc	r27, r27
     f76:	dc 01       	movw	r26, r24
     f78:	99 27       	eor	r25, r25
     f7a:	88 27       	eor	r24, r24
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	84 2b       	or	r24, r20
     f82:	95 2b       	or	r25, r21
     f84:	a6 2b       	or	r26, r22
     f86:	b7 2b       	or	r27, r23
     f88:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     f8c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     f90:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     f94:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     f98:	b0 9b       	sbis	0x16, 0	; 22
     f9a:	1b c0       	rjmp	.+54     	; 0xfd2 <__vector_12+0x98>
     f9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     fa0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fa4:	c9 01       	movw	r24, r18
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	09 2e       	mov	r0, r25
     faa:	00 0c       	add	r0, r0
     fac:	aa 0b       	sbc	r26, r26
     fae:	bb 0b       	sbc	r27, r27
     fb0:	dc 01       	movw	r26, r24
     fb2:	99 27       	eor	r25, r25
     fb4:	88 27       	eor	r24, r24
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	84 2b       	or	r24, r20
     fbc:	95 2b       	or	r25, r21
     fbe:	a6 2b       	or	r26, r22
     fc0:	b7 2b       	or	r27, r23
     fc2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     fc6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     fca:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     fce:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     fd2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0xe>
     fd6:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0xf>
     fda:	30 97       	sbiw	r30, 0x00	; 0
     fdc:	39 f0       	breq	.+14     	; 0xfec <__vector_12+0xb2>
     fde:	67 e0       	ldi	r22, 0x07	; 7
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0xe>
     fe6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0xf>
     fea:	09 95       	icall
     fec:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_13>:
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	ef 93       	push	r30
    1032:	ff 93       	push	r31
    1034:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1038:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    103c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1040:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1044:	c9 01       	movw	r24, r18
    1046:	03 2e       	mov	r0, r19
    1048:	00 0c       	add	r0, r0
    104a:	aa 0b       	sbc	r26, r26
    104c:	bb 0b       	sbc	r27, r27
    104e:	dc 01       	movw	r26, r24
    1050:	99 27       	eor	r25, r25
    1052:	88 27       	eor	r24, r24
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	84 2b       	or	r24, r20
    105a:	95 2b       	or	r25, r21
    105c:	a6 2b       	or	r26, r22
    105e:	b7 2b       	or	r27, r23
    1060:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1064:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1068:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    106c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1070:	b0 9b       	sbis	0x16, 0	; 22
    1072:	1b c0       	rjmp	.+54     	; 0x10aa <__vector_13+0x98>
    1074:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1078:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    107c:	c9 01       	movw	r24, r18
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	09 2e       	mov	r0, r25
    1082:	00 0c       	add	r0, r0
    1084:	aa 0b       	sbc	r26, r26
    1086:	bb 0b       	sbc	r27, r27
    1088:	dc 01       	movw	r26, r24
    108a:	99 27       	eor	r25, r25
    108c:	88 27       	eor	r24, r24
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	84 2b       	or	r24, r20
    1094:	95 2b       	or	r25, r21
    1096:	a6 2b       	or	r26, r22
    1098:	b7 2b       	or	r27, r23
    109a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    109e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    10a2:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    10a6:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    10aa:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x10>
    10ae:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x11>
    10b2:	30 97       	sbiw	r30, 0x00	; 0
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <__vector_13+0xb2>
    10b6:	68 e0       	ldi	r22, 0x08	; 8
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x10>
    10be:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x11>
    10c2:	09 95       	icall
    10c4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_14>:
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1110:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    1114:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1118:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    111c:	c9 01       	movw	r24, r18
    111e:	03 2e       	mov	r0, r19
    1120:	00 0c       	add	r0, r0
    1122:	aa 0b       	sbc	r26, r26
    1124:	bb 0b       	sbc	r27, r27
    1126:	dc 01       	movw	r26, r24
    1128:	99 27       	eor	r25, r25
    112a:	88 27       	eor	r24, r24
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	84 2b       	or	r24, r20
    1132:	95 2b       	or	r25, r21
    1134:	a6 2b       	or	r26, r22
    1136:	b7 2b       	or	r27, r23
    1138:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    113c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1140:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1144:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1148:	b0 9b       	sbis	0x16, 0	; 22
    114a:	1b c0       	rjmp	.+54     	; 0x1182 <__vector_14+0x98>
    114c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1150:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1154:	c9 01       	movw	r24, r18
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	09 2e       	mov	r0, r25
    115a:	00 0c       	add	r0, r0
    115c:	aa 0b       	sbc	r26, r26
    115e:	bb 0b       	sbc	r27, r27
    1160:	dc 01       	movw	r26, r24
    1162:	99 27       	eor	r25, r25
    1164:	88 27       	eor	r24, r24
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	84 2b       	or	r24, r20
    116c:	95 2b       	or	r25, r21
    116e:	a6 2b       	or	r26, r22
    1170:	b7 2b       	or	r27, r23
    1172:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1176:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    117a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    117e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1182:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x12>
    1186:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x13>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	39 f0       	breq	.+14     	; 0x119c <__vector_14+0xb2>
    118e:	69 e0       	ldi	r22, 0x09	; 9
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x12>
    1196:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x13>
    119a:	09 95       	icall
    119c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	7f 91       	pop	r23
    11ae:	6f 91       	pop	r22
    11b0:	5f 91       	pop	r21
    11b2:	4f 91       	pop	r20
    11b4:	3f 91       	pop	r19
    11b6:	2f 91       	pop	r18
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <__vector_15>:
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    11e8:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    11ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    11f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11f4:	c9 01       	movw	r24, r18
    11f6:	03 2e       	mov	r0, r19
    11f8:	00 0c       	add	r0, r0
    11fa:	aa 0b       	sbc	r26, r26
    11fc:	bb 0b       	sbc	r27, r27
    11fe:	dc 01       	movw	r26, r24
    1200:	99 27       	eor	r25, r25
    1202:	88 27       	eor	r24, r24
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	84 2b       	or	r24, r20
    120a:	95 2b       	or	r25, r21
    120c:	a6 2b       	or	r26, r22
    120e:	b7 2b       	or	r27, r23
    1210:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1214:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1218:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    121c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1220:	b0 9b       	sbis	0x16, 0	; 22
    1222:	1b c0       	rjmp	.+54     	; 0x125a <__vector_15+0x98>
    1224:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1228:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    122c:	c9 01       	movw	r24, r18
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	09 2e       	mov	r0, r25
    1232:	00 0c       	add	r0, r0
    1234:	aa 0b       	sbc	r26, r26
    1236:	bb 0b       	sbc	r27, r27
    1238:	dc 01       	movw	r26, r24
    123a:	99 27       	eor	r25, r25
    123c:	88 27       	eor	r24, r24
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	84 2b       	or	r24, r20
    1244:	95 2b       	or	r25, r21
    1246:	a6 2b       	or	r26, r22
    1248:	b7 2b       	or	r27, r23
    124a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    124e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1252:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1256:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    125a:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x14>
    125e:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x15>
    1262:	30 97       	sbiw	r30, 0x00	; 0
    1264:	39 f0       	breq	.+14     	; 0x1274 <__vector_15+0xb2>
    1266:	6a e0       	ldi	r22, 0x0A	; 10
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x14>
    126e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x15>
    1272:	09 95       	icall
    1274:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    1278:	ff 91       	pop	r31
    127a:	ef 91       	pop	r30
    127c:	bf 91       	pop	r27
    127e:	af 91       	pop	r26
    1280:	9f 91       	pop	r25
    1282:	8f 91       	pop	r24
    1284:	7f 91       	pop	r23
    1286:	6f 91       	pop	r22
    1288:	5f 91       	pop	r21
    128a:	4f 91       	pop	r20
    128c:	3f 91       	pop	r19
    128e:	2f 91       	pop	r18
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	0f 90       	pop	r0
    1296:	1f 90       	pop	r1
    1298:	18 95       	reti

0000129a <__vector_16>:
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	2f 93       	push	r18
    12a6:	3f 93       	push	r19
    12a8:	4f 93       	push	r20
    12aa:	5f 93       	push	r21
    12ac:	6f 93       	push	r22
    12ae:	7f 93       	push	r23
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
    12b4:	af 93       	push	r26
    12b6:	bf 93       	push	r27
    12b8:	ef 93       	push	r30
    12ba:	ff 93       	push	r31
    12bc:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    12c0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    12c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    12c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    12cc:	c9 01       	movw	r24, r18
    12ce:	03 2e       	mov	r0, r19
    12d0:	00 0c       	add	r0, r0
    12d2:	aa 0b       	sbc	r26, r26
    12d4:	bb 0b       	sbc	r27, r27
    12d6:	dc 01       	movw	r26, r24
    12d8:	99 27       	eor	r25, r25
    12da:	88 27       	eor	r24, r24
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	84 2b       	or	r24, r20
    12e2:	95 2b       	or	r25, r21
    12e4:	a6 2b       	or	r26, r22
    12e6:	b7 2b       	or	r27, r23
    12e8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    12ec:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    12f0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    12f4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    12f8:	b0 9b       	sbis	0x16, 0	; 22
    12fa:	1b c0       	rjmp	.+54     	; 0x1332 <__vector_16+0x98>
    12fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1300:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1304:	c9 01       	movw	r24, r18
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	09 2e       	mov	r0, r25
    130a:	00 0c       	add	r0, r0
    130c:	aa 0b       	sbc	r26, r26
    130e:	bb 0b       	sbc	r27, r27
    1310:	dc 01       	movw	r26, r24
    1312:	99 27       	eor	r25, r25
    1314:	88 27       	eor	r24, r24
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	84 2b       	or	r24, r20
    131c:	95 2b       	or	r25, r21
    131e:	a6 2b       	or	r26, r22
    1320:	b7 2b       	or	r27, r23
    1322:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1326:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    132a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    132e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1332:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x16>
    1336:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x17>
    133a:	30 97       	sbiw	r30, 0x00	; 0
    133c:	39 f0       	breq	.+14     	; 0x134c <__vector_16+0xb2>
    133e:	6b e0       	ldi	r22, 0x0B	; 11
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x16>
    1346:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x17>
    134a:	09 95       	icall
    134c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_17>:
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1398:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    139c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    13a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13a4:	c9 01       	movw	r24, r18
    13a6:	03 2e       	mov	r0, r19
    13a8:	00 0c       	add	r0, r0
    13aa:	aa 0b       	sbc	r26, r26
    13ac:	bb 0b       	sbc	r27, r27
    13ae:	dc 01       	movw	r26, r24
    13b0:	99 27       	eor	r25, r25
    13b2:	88 27       	eor	r24, r24
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	84 2b       	or	r24, r20
    13ba:	95 2b       	or	r25, r21
    13bc:	a6 2b       	or	r26, r22
    13be:	b7 2b       	or	r27, r23
    13c0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    13c4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    13c8:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    13cc:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    13d0:	b0 9b       	sbis	0x16, 0	; 22
    13d2:	1b c0       	rjmp	.+54     	; 0x140a <__vector_17+0x98>
    13d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    13d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13dc:	c9 01       	movw	r24, r18
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	09 2e       	mov	r0, r25
    13e2:	00 0c       	add	r0, r0
    13e4:	aa 0b       	sbc	r26, r26
    13e6:	bb 0b       	sbc	r27, r27
    13e8:	dc 01       	movw	r26, r24
    13ea:	99 27       	eor	r25, r25
    13ec:	88 27       	eor	r24, r24
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	84 2b       	or	r24, r20
    13f4:	95 2b       	or	r25, r21
    13f6:	a6 2b       	or	r26, r22
    13f8:	b7 2b       	or	r27, r23
    13fa:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    13fe:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1402:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1406:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    140a:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x18>
    140e:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x19>
    1412:	30 97       	sbiw	r30, 0x00	; 0
    1414:	39 f0       	breq	.+14     	; 0x1424 <__vector_17+0xb2>
    1416:	6c e0       	ldi	r22, 0x0C	; 12
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x18>
    141e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x19>
    1422:	09 95       	icall
    1424:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	bf 91       	pop	r27
    142e:	af 91       	pop	r26
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	7f 91       	pop	r23
    1436:	6f 91       	pop	r22
    1438:	5f 91       	pop	r21
    143a:	4f 91       	pop	r20
    143c:	3f 91       	pop	r19
    143e:	2f 91       	pop	r18
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_18>:
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
    146c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1470:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    1474:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1478:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    147c:	c9 01       	movw	r24, r18
    147e:	03 2e       	mov	r0, r19
    1480:	00 0c       	add	r0, r0
    1482:	aa 0b       	sbc	r26, r26
    1484:	bb 0b       	sbc	r27, r27
    1486:	dc 01       	movw	r26, r24
    1488:	99 27       	eor	r25, r25
    148a:	88 27       	eor	r24, r24
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	84 2b       	or	r24, r20
    1492:	95 2b       	or	r25, r21
    1494:	a6 2b       	or	r26, r22
    1496:	b7 2b       	or	r27, r23
    1498:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    149c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    14a0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    14a4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    14a8:	b0 9b       	sbis	0x16, 0	; 22
    14aa:	1b c0       	rjmp	.+54     	; 0x14e2 <__vector_18+0x98>
    14ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    14b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    14b4:	c9 01       	movw	r24, r18
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	09 2e       	mov	r0, r25
    14ba:	00 0c       	add	r0, r0
    14bc:	aa 0b       	sbc	r26, r26
    14be:	bb 0b       	sbc	r27, r27
    14c0:	dc 01       	movw	r26, r24
    14c2:	99 27       	eor	r25, r25
    14c4:	88 27       	eor	r24, r24
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	84 2b       	or	r24, r20
    14cc:	95 2b       	or	r25, r21
    14ce:	a6 2b       	or	r26, r22
    14d0:	b7 2b       	or	r27, r23
    14d2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    14d6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    14da:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    14de:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    14e2:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x1a>
    14e6:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x1b>
    14ea:	30 97       	sbiw	r30, 0x00	; 0
    14ec:	39 f0       	breq	.+14     	; 0x14fc <__vector_18+0xb2>
    14ee:	6d e0       	ldi	r22, 0x0D	; 13
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x1a>
    14f6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x1b>
    14fa:	09 95       	icall
    14fc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	bf 91       	pop	r27
    1506:	af 91       	pop	r26
    1508:	9f 91       	pop	r25
    150a:	8f 91       	pop	r24
    150c:	7f 91       	pop	r23
    150e:	6f 91       	pop	r22
    1510:	5f 91       	pop	r21
    1512:	4f 91       	pop	r20
    1514:	3f 91       	pop	r19
    1516:	2f 91       	pop	r18
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <__vector_19>:
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	ef 93       	push	r30
    1542:	ff 93       	push	r31
    1544:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1548:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    154c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1550:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1554:	c9 01       	movw	r24, r18
    1556:	03 2e       	mov	r0, r19
    1558:	00 0c       	add	r0, r0
    155a:	aa 0b       	sbc	r26, r26
    155c:	bb 0b       	sbc	r27, r27
    155e:	dc 01       	movw	r26, r24
    1560:	99 27       	eor	r25, r25
    1562:	88 27       	eor	r24, r24
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	84 2b       	or	r24, r20
    156a:	95 2b       	or	r25, r21
    156c:	a6 2b       	or	r26, r22
    156e:	b7 2b       	or	r27, r23
    1570:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1574:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1578:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    157c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1580:	b0 9b       	sbis	0x16, 0	; 22
    1582:	1b c0       	rjmp	.+54     	; 0x15ba <__vector_19+0x98>
    1584:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1588:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    158c:	c9 01       	movw	r24, r18
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	09 2e       	mov	r0, r25
    1592:	00 0c       	add	r0, r0
    1594:	aa 0b       	sbc	r26, r26
    1596:	bb 0b       	sbc	r27, r27
    1598:	dc 01       	movw	r26, r24
    159a:	99 27       	eor	r25, r25
    159c:	88 27       	eor	r24, r24
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	84 2b       	or	r24, r20
    15a4:	95 2b       	or	r25, r21
    15a6:	a6 2b       	or	r26, r22
    15a8:	b7 2b       	or	r27, r23
    15aa:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    15ae:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    15b2:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    15b6:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    15ba:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x1c>
    15be:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1d>
    15c2:	30 97       	sbiw	r30, 0x00	; 0
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <__vector_19+0xb2>
    15c6:	6e e0       	ldi	r22, 0x0E	; 14
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x1c>
    15ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1d>
    15d2:	09 95       	icall
    15d4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    15d8:	ff 91       	pop	r31
    15da:	ef 91       	pop	r30
    15dc:	bf 91       	pop	r27
    15de:	af 91       	pop	r26
    15e0:	9f 91       	pop	r25
    15e2:	8f 91       	pop	r24
    15e4:	7f 91       	pop	r23
    15e6:	6f 91       	pop	r22
    15e8:	5f 91       	pop	r21
    15ea:	4f 91       	pop	r20
    15ec:	3f 91       	pop	r19
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <__vector_20>:
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
    161c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1620:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    1624:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1628:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    162c:	c9 01       	movw	r24, r18
    162e:	03 2e       	mov	r0, r19
    1630:	00 0c       	add	r0, r0
    1632:	aa 0b       	sbc	r26, r26
    1634:	bb 0b       	sbc	r27, r27
    1636:	dc 01       	movw	r26, r24
    1638:	99 27       	eor	r25, r25
    163a:	88 27       	eor	r24, r24
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	84 2b       	or	r24, r20
    1642:	95 2b       	or	r25, r21
    1644:	a6 2b       	or	r26, r22
    1646:	b7 2b       	or	r27, r23
    1648:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    164c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1650:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1654:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1658:	b0 9b       	sbis	0x16, 0	; 22
    165a:	1b c0       	rjmp	.+54     	; 0x1692 <__vector_20+0x98>
    165c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1660:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1664:	c9 01       	movw	r24, r18
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	09 2e       	mov	r0, r25
    166a:	00 0c       	add	r0, r0
    166c:	aa 0b       	sbc	r26, r26
    166e:	bb 0b       	sbc	r27, r27
    1670:	dc 01       	movw	r26, r24
    1672:	99 27       	eor	r25, r25
    1674:	88 27       	eor	r24, r24
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	84 2b       	or	r24, r20
    167c:	95 2b       	or	r25, r21
    167e:	a6 2b       	or	r26, r22
    1680:	b7 2b       	or	r27, r23
    1682:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1686:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    168a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    168e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1692:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x1e>
    1696:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x1f>
    169a:	30 97       	sbiw	r30, 0x00	; 0
    169c:	39 f0       	breq	.+14     	; 0x16ac <__vector_20+0xb2>
    169e:	6f e0       	ldi	r22, 0x0F	; 15
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x1e>
    16a6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x1f>
    16aa:	09 95       	icall
    16ac:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <__vector_21>:
    16d2:	1f 92       	push	r1
    16d4:	0f 92       	push	r0
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
    16f4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    16f8:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    16fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1700:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1704:	c9 01       	movw	r24, r18
    1706:	03 2e       	mov	r0, r19
    1708:	00 0c       	add	r0, r0
    170a:	aa 0b       	sbc	r26, r26
    170c:	bb 0b       	sbc	r27, r27
    170e:	dc 01       	movw	r26, r24
    1710:	99 27       	eor	r25, r25
    1712:	88 27       	eor	r24, r24
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	84 2b       	or	r24, r20
    171a:	95 2b       	or	r25, r21
    171c:	a6 2b       	or	r26, r22
    171e:	b7 2b       	or	r27, r23
    1720:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1724:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1728:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    172c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1730:	b0 9b       	sbis	0x16, 0	; 22
    1732:	1b c0       	rjmp	.+54     	; 0x176a <__vector_21+0x98>
    1734:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1738:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    173c:	c9 01       	movw	r24, r18
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	09 2e       	mov	r0, r25
    1742:	00 0c       	add	r0, r0
    1744:	aa 0b       	sbc	r26, r26
    1746:	bb 0b       	sbc	r27, r27
    1748:	dc 01       	movw	r26, r24
    174a:	99 27       	eor	r25, r25
    174c:	88 27       	eor	r24, r24
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	84 2b       	or	r24, r20
    1754:	95 2b       	or	r25, r21
    1756:	a6 2b       	or	r26, r22
    1758:	b7 2b       	or	r27, r23
    175a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    175e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1762:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1766:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    176a:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x20>
    176e:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x21>
    1772:	30 97       	sbiw	r30, 0x00	; 0
    1774:	39 f0       	breq	.+14     	; 0x1784 <__vector_21+0xb2>
    1776:	60 e1       	ldi	r22, 0x10	; 16
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x20>
    177e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x21>
    1782:	09 95       	icall
    1784:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	0f 90       	pop	r0
    17a6:	1f 90       	pop	r1
    17a8:	18 95       	reti

000017aa <__vector_22>:
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
    17cc:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    17d0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    17d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    17d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    17dc:	c9 01       	movw	r24, r18
    17de:	03 2e       	mov	r0, r19
    17e0:	00 0c       	add	r0, r0
    17e2:	aa 0b       	sbc	r26, r26
    17e4:	bb 0b       	sbc	r27, r27
    17e6:	dc 01       	movw	r26, r24
    17e8:	99 27       	eor	r25, r25
    17ea:	88 27       	eor	r24, r24
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	84 2b       	or	r24, r20
    17f2:	95 2b       	or	r25, r21
    17f4:	a6 2b       	or	r26, r22
    17f6:	b7 2b       	or	r27, r23
    17f8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    17fc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1800:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1804:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1808:	b0 9b       	sbis	0x16, 0	; 22
    180a:	1b c0       	rjmp	.+54     	; 0x1842 <__vector_22+0x98>
    180c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1810:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1814:	c9 01       	movw	r24, r18
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	09 2e       	mov	r0, r25
    181a:	00 0c       	add	r0, r0
    181c:	aa 0b       	sbc	r26, r26
    181e:	bb 0b       	sbc	r27, r27
    1820:	dc 01       	movw	r26, r24
    1822:	99 27       	eor	r25, r25
    1824:	88 27       	eor	r24, r24
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	84 2b       	or	r24, r20
    182c:	95 2b       	or	r25, r21
    182e:	a6 2b       	or	r26, r22
    1830:	b7 2b       	or	r27, r23
    1832:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1836:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    183a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    183e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1842:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x22>
    1846:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x23>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	39 f0       	breq	.+14     	; 0x185c <__vector_22+0xb2>
    184e:	61 e1       	ldi	r22, 0x11	; 17
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x22>
    1856:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x23>
    185a:	09 95       	icall
    185c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <enqueueByDeadline>:
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	7b 01       	movw	r14, r22
    1890:	eb 01       	movw	r28, r22
    1892:	a8 81       	ld	r26, Y
    1894:	b9 81       	ldd	r27, Y+1	; 0x01
    1896:	10 97       	sbiw	r26, 0x00	; 0
    1898:	61 f1       	breq	.+88     	; 0x18f2 <enqueueByDeadline+0x70>
    189a:	fc 01       	movw	r30, r24
    189c:	06 81       	ldd	r16, Z+6	; 0x06
    189e:	17 81       	ldd	r17, Z+7	; 0x07
    18a0:	20 85       	ldd	r18, Z+8	; 0x08
    18a2:	31 85       	ldd	r19, Z+9	; 0x09
    18a4:	16 96       	adiw	r26, 0x06	; 6
    18a6:	4d 91       	ld	r20, X+
    18a8:	5d 91       	ld	r21, X+
    18aa:	6d 91       	ld	r22, X+
    18ac:	7c 91       	ld	r23, X
    18ae:	19 97       	sbiw	r26, 0x09	; 9
    18b0:	04 17       	cp	r16, r20
    18b2:	15 07       	cpc	r17, r21
    18b4:	26 07       	cpc	r18, r22
    18b6:	37 07       	cpc	r19, r23
    18b8:	14 f4       	brge	.+4      	; 0x18be <enqueueByDeadline+0x3c>
    18ba:	1b c0       	rjmp	.+54     	; 0x18f2 <enqueueByDeadline+0x70>
    18bc:	df 01       	movw	r26, r30
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	30 97       	sbiw	r30, 0x00	; 0
    18c6:	49 f0       	breq	.+18     	; 0x18da <enqueueByDeadline+0x58>
    18c8:	46 81       	ldd	r20, Z+6	; 0x06
    18ca:	57 81       	ldd	r21, Z+7	; 0x07
    18cc:	60 85       	ldd	r22, Z+8	; 0x08
    18ce:	71 85       	ldd	r23, Z+9	; 0x09
    18d0:	04 17       	cp	r16, r20
    18d2:	15 07       	cpc	r17, r21
    18d4:	26 07       	cpc	r18, r22
    18d6:	37 07       	cpc	r19, r23
    18d8:	8c f7       	brge	.-30     	; 0x18bc <enqueueByDeadline+0x3a>
    18da:	ec 01       	movw	r28, r24
    18dc:	f9 83       	std	Y+1, r31	; 0x01
    18de:	e8 83       	st	Y, r30
    18e0:	10 97       	sbiw	r26, 0x00	; 0
    18e2:	21 f4       	brne	.+8      	; 0x18ec <enqueueByDeadline+0x6a>
    18e4:	f7 01       	movw	r30, r14
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	80 83       	st	Z, r24
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <enqueueByDeadline+0x78>
    18ec:	8d 93       	st	X+, r24
    18ee:	9c 93       	st	X, r25
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <enqueueByDeadline+0x78>
    18f2:	ec 01       	movw	r28, r24
    18f4:	b9 83       	std	Y+1, r27	; 0x01
    18f6:	a8 83       	st	Y, r26
    18f8:	f5 cf       	rjmp	.-22     	; 0x18e4 <enqueueByDeadline+0x62>
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	08 95       	ret

00001908 <enqueueByBaseline>:
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	7b 01       	movw	r14, r22
    1916:	eb 01       	movw	r28, r22
    1918:	a8 81       	ld	r26, Y
    191a:	b9 81       	ldd	r27, Y+1	; 0x01
    191c:	10 97       	sbiw	r26, 0x00	; 0
    191e:	61 f1       	breq	.+88     	; 0x1978 <enqueueByBaseline+0x70>
    1920:	fc 01       	movw	r30, r24
    1922:	02 81       	ldd	r16, Z+2	; 0x02
    1924:	13 81       	ldd	r17, Z+3	; 0x03
    1926:	24 81       	ldd	r18, Z+4	; 0x04
    1928:	35 81       	ldd	r19, Z+5	; 0x05
    192a:	12 96       	adiw	r26, 0x02	; 2
    192c:	4d 91       	ld	r20, X+
    192e:	5d 91       	ld	r21, X+
    1930:	6d 91       	ld	r22, X+
    1932:	7c 91       	ld	r23, X
    1934:	15 97       	sbiw	r26, 0x05	; 5
    1936:	04 17       	cp	r16, r20
    1938:	15 07       	cpc	r17, r21
    193a:	26 07       	cpc	r18, r22
    193c:	37 07       	cpc	r19, r23
    193e:	14 f4       	brge	.+4      	; 0x1944 <enqueueByBaseline+0x3c>
    1940:	1b c0       	rjmp	.+54     	; 0x1978 <enqueueByBaseline+0x70>
    1942:	df 01       	movw	r26, r30
    1944:	ed 91       	ld	r30, X+
    1946:	fc 91       	ld	r31, X
    1948:	11 97       	sbiw	r26, 0x01	; 1
    194a:	30 97       	sbiw	r30, 0x00	; 0
    194c:	49 f0       	breq	.+18     	; 0x1960 <enqueueByBaseline+0x58>
    194e:	42 81       	ldd	r20, Z+2	; 0x02
    1950:	53 81       	ldd	r21, Z+3	; 0x03
    1952:	64 81       	ldd	r22, Z+4	; 0x04
    1954:	75 81       	ldd	r23, Z+5	; 0x05
    1956:	04 17       	cp	r16, r20
    1958:	15 07       	cpc	r17, r21
    195a:	26 07       	cpc	r18, r22
    195c:	37 07       	cpc	r19, r23
    195e:	8c f7       	brge	.-30     	; 0x1942 <enqueueByBaseline+0x3a>
    1960:	ec 01       	movw	r28, r24
    1962:	f9 83       	std	Y+1, r31	; 0x01
    1964:	e8 83       	st	Y, r30
    1966:	10 97       	sbiw	r26, 0x00	; 0
    1968:	21 f4       	brne	.+8      	; 0x1972 <enqueueByBaseline+0x6a>
    196a:	f7 01       	movw	r30, r14
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	07 c0       	rjmp	.+14     	; 0x1980 <enqueueByBaseline+0x78>
    1972:	8d 93       	st	X+, r24
    1974:	9c 93       	st	X, r25
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <enqueueByBaseline+0x78>
    1978:	ec 01       	movw	r28, r24
    197a:	b9 83       	std	Y+1, r27	; 0x01
    197c:	a8 83       	st	Y, r26
    197e:	f5 cf       	rjmp	.-22     	; 0x196a <enqueueByBaseline+0x62>
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	08 95       	ret

0000198e <dequeue>:
    198e:	dc 01       	movw	r26, r24
    1990:	ed 91       	ld	r30, X+
    1992:	fc 91       	ld	r31, X
    1994:	11 97       	sbiw	r26, 0x01	; 1
    1996:	30 97       	sbiw	r30, 0x00	; 0
    1998:	59 f4       	brne	.+22     	; 0x19b0 <dequeue+0x22>
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    19a0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    19a4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	83 bf       	out	0x33, r24	; 51
    19ac:	88 95       	sleep
    19ae:	fd cf       	rjmp	.-6      	; 0x19aa <dequeue+0x1c>
    19b0:	20 81       	ld	r18, Z
    19b2:	31 81       	ldd	r19, Z+1	; 0x01
    19b4:	2d 93       	st	X+, r18
    19b6:	3c 93       	st	X, r19
    19b8:	cf 01       	movw	r24, r30
    19ba:	08 95       	ret

000019bc <__vector_9>:
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	2f 93       	push	r18
    19c8:	3f 93       	push	r19
    19ca:	4f 93       	push	r20
    19cc:	5f 93       	push	r21
    19ce:	6f 93       	push	r22
    19d0:	7f 93       	push	r23
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	ef 93       	push	r30
    19d8:	ff 93       	push	r31
    19da:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <overflows>
    19de:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <overflows+0x1>
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <overflows+0x1>
    19e8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <overflows>
    19ec:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <timerQ>
    19f0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <timerQ+0x1>
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	01 f1       	breq	.+64     	; 0x1a38 <__vector_9+0x7c>
    19f8:	42 81       	ldd	r20, Z+2	; 0x02
    19fa:	53 81       	ldd	r21, Z+3	; 0x03
    19fc:	64 81       	ldd	r22, Z+4	; 0x04
    19fe:	75 81       	ldd	r23, Z+5	; 0x05
    1a00:	86 17       	cp	r24, r22
    1a02:	97 07       	cpc	r25, r23
    1a04:	c9 f4       	brne	.+50     	; 0x1a38 <__vector_9+0x7c>
    1a06:	ca 01       	movw	r24, r20
    1a08:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a0c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a10:	42 1b       	sub	r20, r18
    1a12:	53 0b       	sbc	r21, r19
    1a14:	41 30       	cpi	r20, 0x01	; 1
    1a16:	51 05       	cpc	r21, r1
    1a18:	29 f4       	brne	.+10     	; 0x1a24 <__vector_9+0x68>
    1a1a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a1e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a28:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a2c:	ef e6       	ldi	r30, 0x6F	; 111
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	80 83       	st	Z, r24
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <__vector_9+0x86>
    1a38:	ef e6       	ldi	r30, 0x6F	; 111
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8d 7f       	andi	r24, 0xFD	; 253
    1a40:	80 83       	st	Z, r24
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	7f 91       	pop	r23
    1a4c:	6f 91       	pop	r22
    1a4e:	5f 91       	pop	r21
    1a50:	4f 91       	pop	r20
    1a52:	3f 91       	pop	r19
    1a54:	2f 91       	pop	r18
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <__vector_7>:
    1a60:	1f 92       	push	r1
    1a62:	0f 92       	push	r0
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	0f 92       	push	r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	cf 92       	push	r12
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
    1a8a:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <overflows>
    1a8e:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <overflows+0x1>
    1a92:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a96:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a9a:	b0 99       	sbic	0x16, 0	; 22
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <__vector_7+0x5c>
    1a9e:	0d 2c       	mov	r0, r13
    1aa0:	00 0c       	add	r0, r0
    1aa2:	ee 08       	sbc	r14, r14
    1aa4:	ff 08       	sbc	r15, r15
    1aa6:	d6 01       	movw	r26, r12
    1aa8:	99 27       	eor	r25, r25
    1aaa:	88 27       	eor	r24, r24
    1aac:	69 01       	movw	r12, r18
    1aae:	e1 2c       	mov	r14, r1
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	c8 2a       	or	r12, r24
    1ab4:	d9 2a       	or	r13, r25
    1ab6:	ea 2a       	or	r14, r26
    1ab8:	fb 2a       	or	r15, r27
    1aba:	15 c0       	rjmp	.+42     	; 0x1ae6 <__vector_7+0x86>
    1abc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1ac0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	c8 1a       	sub	r12, r24
    1ac8:	d8 0a       	sbc	r13, r24
    1aca:	0d 2c       	mov	r0, r13
    1acc:	00 0c       	add	r0, r0
    1ace:	ee 08       	sbc	r14, r14
    1ad0:	ff 08       	sbc	r15, r15
    1ad2:	d6 01       	movw	r26, r12
    1ad4:	99 27       	eor	r25, r25
    1ad6:	88 27       	eor	r24, r24
    1ad8:	69 01       	movw	r12, r18
    1ada:	e1 2c       	mov	r14, r1
    1adc:	f1 2c       	mov	r15, r1
    1ade:	c8 2a       	or	r12, r24
    1ae0:	d9 2a       	or	r13, r25
    1ae2:	ea 2a       	or	r14, r26
    1ae4:	fb 2a       	or	r15, r27
    1ae6:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <timerQ>
    1aea:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <timerQ+0x1>
    1aee:	30 97       	sbiw	r30, 0x00	; 0
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <__vector_7+0x94>
    1af2:	42 c0       	rjmp	.+132    	; 0x1b78 <__vector_7+0x118>
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	a4 81       	ldd	r26, Z+4	; 0x04
    1afa:	b5 81       	ldd	r27, Z+5	; 0x05
    1afc:	8c 19       	sub	r24, r12
    1afe:	9d 09       	sbc	r25, r13
    1b00:	ae 09       	sbc	r26, r14
    1b02:	bf 09       	sbc	r27, r15
    1b04:	18 16       	cp	r1, r24
    1b06:	19 06       	cpc	r1, r25
    1b08:	1a 06       	cpc	r1, r26
    1b0a:	1b 06       	cpc	r1, r27
    1b0c:	ec f1       	brlt	.+122    	; 0x1b88 <__vector_7+0x128>
    1b0e:	86 e3       	ldi	r24, 0x36	; 54
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 c7 0c 	call	0x198e	; 0x198e <dequeue>
    1b16:	68 e3       	ldi	r22, 0x38	; 56
    1b18:	71 e0       	ldi	r23, 0x01	; 1
    1b1a:	0e 94 41 0c 	call	0x1882	; 0x1882 <enqueueByDeadline>
    1b1e:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <timerQ>
    1b22:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <timerQ+0x1>
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	39 f1       	breq	.+78     	; 0x1b78 <__vector_7+0x118>
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	a4 81       	ldd	r26, Z+4	; 0x04
    1b30:	b5 81       	ldd	r27, Z+5	; 0x05
    1b32:	8c 19       	sub	r24, r12
    1b34:	9d 09       	sbc	r25, r13
    1b36:	ae 09       	sbc	r26, r14
    1b38:	bf 09       	sbc	r27, r15
    1b3a:	18 16       	cp	r1, r24
    1b3c:	19 06       	cpc	r1, r25
    1b3e:	1a 06       	cpc	r1, r26
    1b40:	1b 06       	cpc	r1, r27
    1b42:	2c f7       	brge	.-54     	; 0x1b0e <__vector_7+0xae>
    1b44:	21 c0       	rjmp	.+66     	; 0x1b88 <__vector_7+0x128>
    1b46:	9c 01       	movw	r18, r24
    1b48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1b4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b50:	84 1b       	sub	r24, r20
    1b52:	95 0b       	sbc	r25, r21
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	31 f4       	brne	.+12     	; 0x1b64 <__vector_7+0x104>
    1b58:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1b5c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b60:	2f 5f       	subi	r18, 0xFF	; 255
    1b62:	3f 4f       	sbci	r19, 0xFF	; 255
    1b64:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b68:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b6c:	ef e6       	ldi	r30, 0x6F	; 111
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	82 60       	ori	r24, 0x02	; 2
    1b74:	80 83       	st	Z, r24
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <__vector_7+0x122>
    1b78:	ef e6       	ldi	r30, 0x6F	; 111
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8d 7f       	andi	r24, 0xFD	; 253
    1b80:	80 83       	st	Z, r24
    1b82:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    1b86:	0c c0       	rjmp	.+24     	; 0x1ba0 <__vector_7+0x140>
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	a4 81       	ldd	r26, Z+4	; 0x04
    1b8e:	b5 81       	ldd	r27, Z+5	; 0x05
    1b90:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1b94:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    1b98:	2a 17       	cp	r18, r26
    1b9a:	3b 07       	cpc	r19, r27
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <__vector_7+0x118>
    1b9e:	d3 cf       	rjmp	.-90     	; 0x1b46 <__vector_7+0xe6>
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	7f 91       	pop	r23
    1bae:	6f 91       	pop	r22
    1bb0:	5f 91       	pop	r21
    1bb2:	4f 91       	pop	r20
    1bb4:	3f 91       	pop	r19
    1bb6:	2f 91       	pop	r18
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <async>:
    1bca:	3f 92       	push	r3
    1bcc:	4f 92       	push	r4
    1bce:	5f 92       	push	r5
    1bd0:	6f 92       	push	r6
    1bd2:	7f 92       	push	r7
    1bd4:	8f 92       	push	r8
    1bd6:	9f 92       	push	r9
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	2b 01       	movw	r4, r22
    1bee:	3c 01       	movw	r6, r24
    1bf0:	49 01       	movw	r8, r18
    1bf2:	5a 01       	movw	r10, r20
    1bf4:	8f b7       	in	r24, 0x3f	; 63
    1bf6:	80 78       	andi	r24, 0x80	; 128
    1bf8:	38 2e       	mov	r3, r24
    1bfa:	f8 94       	cli
    1bfc:	8c e0       	ldi	r24, 0x0C	; 12
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 c7 0c 	call	0x198e	; 0x198e <dequeue>
    1c04:	ec 01       	movw	r28, r24
    1c06:	1b 87       	std	Y+11, r17	; 0x0b
    1c08:	0a 87       	std	Y+10, r16	; 0x0a
    1c0a:	fd 86       	std	Y+13, r15	; 0x0d
    1c0c:	ec 86       	std	Y+12, r14	; 0x0c
    1c0e:	df 86       	std	Y+15, r13	; 0x0f
    1c10:	ce 86       	std	Y+14, r12	; 0x0e
    1c12:	33 20       	and	r3, r3
    1c14:	61 f0       	breq	.+24     	; 0x1c2e <async+0x64>
    1c16:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <current>
    1c1a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <current+0x1>
    1c1e:	02 80       	ldd	r0, Z+2	; 0x02
    1c20:	f3 81       	ldd	r31, Z+3	; 0x03
    1c22:	e0 2d       	mov	r30, r0
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	a4 81       	ldd	r26, Z+4	; 0x04
    1c2a:	b5 81       	ldd	r27, Z+5	; 0x05
    1c2c:	08 c0       	rjmp	.+16     	; 0x1c3e <async+0x74>
    1c2e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timestamp>
    1c32:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timestamp+0x1>
    1c36:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <timestamp+0x2>
    1c3a:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <timestamp+0x3>
    1c3e:	48 0e       	add	r4, r24
    1c40:	59 1e       	adc	r5, r25
    1c42:	6a 1e       	adc	r6, r26
    1c44:	7b 1e       	adc	r7, r27
    1c46:	4a 82       	std	Y+2, r4	; 0x02
    1c48:	5b 82       	std	Y+3, r5	; 0x03
    1c4a:	6c 82       	std	Y+4, r6	; 0x04
    1c4c:	7d 82       	std	Y+5, r7	; 0x05
    1c4e:	18 14       	cp	r1, r8
    1c50:	19 04       	cpc	r1, r9
    1c52:	1a 04       	cpc	r1, r10
    1c54:	1b 04       	cpc	r1, r11
    1c56:	44 f0       	brlt	.+16     	; 0x1c68 <async+0x9e>
    1c58:	0f 2e       	mov	r0, r31
    1c5a:	88 24       	eor	r8, r8
    1c5c:	8a 94       	dec	r8
    1c5e:	98 2c       	mov	r9, r8
    1c60:	a8 2c       	mov	r10, r8
    1c62:	ff e7       	ldi	r31, 0x7F	; 127
    1c64:	bf 2e       	mov	r11, r31
    1c66:	f0 2d       	mov	r31, r0
    1c68:	84 0c       	add	r8, r4
    1c6a:	95 1c       	adc	r9, r5
    1c6c:	a6 1c       	adc	r10, r6
    1c6e:	b7 1c       	adc	r11, r7
    1c70:	8e 82       	std	Y+6, r8	; 0x06
    1c72:	9f 82       	std	Y+7, r9	; 0x07
    1c74:	a8 86       	std	Y+8, r10	; 0x08
    1c76:	b9 86       	std	Y+9, r11	; 0x09
    1c78:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <overflows>
    1c7c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <overflows+0x1>
    1c80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1c84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1c88:	b0 99       	sbic	0x16, 0	; 22
    1c8a:	0e c0       	rjmp	.+28     	; 0x1ca8 <async+0xde>
    1c8c:	09 2e       	mov	r0, r25
    1c8e:	00 0c       	add	r0, r0
    1c90:	aa 0b       	sbc	r26, r26
    1c92:	bb 0b       	sbc	r27, r27
    1c94:	dc 01       	movw	r26, r24
    1c96:	99 27       	eor	r25, r25
    1c98:	88 27       	eor	r24, r24
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	84 2b       	or	r24, r20
    1ca0:	95 2b       	or	r25, r21
    1ca2:	a6 2b       	or	r26, r22
    1ca4:	b7 2b       	or	r27, r23
    1ca6:	13 c0       	rjmp	.+38     	; 0x1cce <async+0x104>
    1ca8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1cac:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	09 2e       	mov	r0, r25
    1cb4:	00 0c       	add	r0, r0
    1cb6:	aa 0b       	sbc	r26, r26
    1cb8:	bb 0b       	sbc	r27, r27
    1cba:	dc 01       	movw	r26, r24
    1cbc:	99 27       	eor	r25, r25
    1cbe:	88 27       	eor	r24, r24
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	84 2b       	or	r24, r20
    1cc8:	95 2b       	or	r25, r21
    1cca:	a6 2b       	or	r26, r22
    1ccc:	b7 2b       	or	r27, r23
    1cce:	48 1a       	sub	r4, r24
    1cd0:	59 0a       	sbc	r5, r25
    1cd2:	6a 0a       	sbc	r6, r26
    1cd4:	7b 0a       	sbc	r7, r27
    1cd6:	14 14       	cp	r1, r4
    1cd8:	15 04       	cpc	r1, r5
    1cda:	16 04       	cpc	r1, r6
    1cdc:	17 04       	cpc	r1, r7
    1cde:	ac f5       	brge	.+106    	; 0x1d4a <async+0x180>
    1ce0:	66 e3       	ldi	r22, 0x36	; 54
    1ce2:	71 e0       	ldi	r23, 0x01	; 1
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	0e 94 84 0c 	call	0x1908	; 0x1908 <enqueueByBaseline>
    1cea:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <timerQ>
    1cee:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <timerQ+0x1>
    1cf2:	30 97       	sbiw	r30, 0x00	; 0
    1cf4:	21 f1       	breq	.+72     	; 0x1d3e <async+0x174>
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	a4 81       	ldd	r26, Z+4	; 0x04
    1cfc:	b5 81       	ldd	r27, Z+5	; 0x05
    1cfe:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <overflows>
    1d02:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <overflows+0x1>
    1d06:	2a 17       	cp	r18, r26
    1d08:	3b 07       	cpc	r19, r27
    1d0a:	c9 f4       	brne	.+50     	; 0x1d3e <async+0x174>
    1d0c:	9c 01       	movw	r18, r24
    1d0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1d12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1d16:	84 1b       	sub	r24, r20
    1d18:	95 0b       	sbc	r25, r21
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	31 f4       	brne	.+12     	; 0x1d2a <async+0x160>
    1d1e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1d22:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1d26:	2f 5f       	subi	r18, 0xFF	; 255
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d2e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d32:	ef e6       	ldi	r30, 0x6F	; 111
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	82 60       	ori	r24, 0x02	; 2
    1d3a:	80 83       	st	Z, r24
    1d3c:	41 c0       	rjmp	.+130    	; 0x1dc0 <async+0x1f6>
    1d3e:	ef e6       	ldi	r30, 0x6F	; 111
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8d 7f       	andi	r24, 0xFD	; 253
    1d46:	80 83       	st	Z, r24
    1d48:	3b c0       	rjmp	.+118    	; 0x1dc0 <async+0x1f6>
    1d4a:	68 e3       	ldi	r22, 0x38	; 56
    1d4c:	71 e0       	ldi	r23, 0x01	; 1
    1d4e:	ce 01       	movw	r24, r28
    1d50:	0e 94 41 0c 	call	0x1882	; 0x1882 <enqueueByDeadline>
    1d54:	33 20       	and	r3, r3
    1d56:	b9 f1       	breq	.+110    	; 0x1dc6 <async+0x1fc>
    1d58:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <threadPool>
    1d5c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threadPool+0x1>
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	81 f1       	breq	.+96     	; 0x1dc4 <async+0x1fa>
    1d64:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <activeStack>
    1d68:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <activeStack+0x1>
    1d6c:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <msgQ>
    1d70:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <msgQ+0x1>
    1d74:	02 81       	ldd	r16, Z+2	; 0x02
    1d76:	13 81       	ldd	r17, Z+3	; 0x03
    1d78:	d9 01       	movw	r26, r18
    1d7a:	16 96       	adiw	r26, 0x06	; 6
    1d7c:	4d 91       	ld	r20, X+
    1d7e:	5d 91       	ld	r21, X+
    1d80:	6d 91       	ld	r22, X+
    1d82:	7c 91       	ld	r23, X
    1d84:	19 97       	sbiw	r26, 0x09	; 9
    1d86:	d8 01       	movw	r26, r16
    1d88:	16 96       	adiw	r26, 0x06	; 6
    1d8a:	0d 91       	ld	r16, X+
    1d8c:	1d 91       	ld	r17, X+
    1d8e:	2d 91       	ld	r18, X+
    1d90:	3c 91       	ld	r19, X
    1d92:	19 97       	sbiw	r26, 0x09	; 9
    1d94:	40 1b       	sub	r20, r16
    1d96:	51 0b       	sbc	r21, r17
    1d98:	62 0b       	sbc	r22, r18
    1d9a:	73 0b       	sbc	r23, r19
    1d9c:	9a f4       	brpl	.+38     	; 0x1dc4 <async+0x1fa>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	2d 91       	ld	r18, X+
    1da2:	3c 91       	ld	r19, X
    1da4:	11 97       	sbiw	r26, 0x01	; 1
    1da6:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <threadPool+0x1>
    1daa:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <threadPool>
    1dae:	ed 93       	st	X+, r30
    1db0:	fc 93       	st	X, r31
    1db2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <activeStack+0x1>
    1db6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <activeStack>
    1dba:	0e 94 4e 04 	call	0x89c	; 0x89c <dispatch>
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <async+0x1fa>
    1dc0:	33 20       	and	r3, r3
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <async+0x1fc>
    1dc4:	78 94       	sei
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
    1de0:	7f 90       	pop	r7
    1de2:	6f 90       	pop	r6
    1de4:	5f 90       	pop	r5
    1de6:	4f 90       	pop	r4
    1de8:	3f 90       	pop	r3
    1dea:	08 95       	ret

00001dec <sync>:
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	ec 01       	movw	r28, r24
    1dfe:	7b 01       	movw	r14, r22
    1e00:	6a 01       	movw	r12, r20
    1e02:	1f b7       	in	r17, 0x3f	; 63
    1e04:	10 78       	andi	r17, 0x80	; 128
    1e06:	f8 94       	cli
    1e08:	a8 81       	ld	r26, Y
    1e0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e0c:	10 97       	sbiw	r26, 0x00	; 0
    1e0e:	61 f1       	breq	.+88     	; 0x1e68 <sync+0x7c>
    1e10:	14 96       	adiw	r26, 0x04	; 4
    1e12:	ed 91       	ld	r30, X+
    1e14:	fc 91       	ld	r31, X
    1e16:	15 97       	sbiw	r26, 0x05	; 5
    1e18:	30 97       	sbiw	r30, 0x00	; 0
    1e1a:	41 f0       	breq	.+16     	; 0x1e2c <sync+0x40>
    1e1c:	a0 81       	ld	r26, Z
    1e1e:	b1 81       	ldd	r27, Z+1	; 0x01
    1e20:	14 96       	adiw	r26, 0x04	; 4
    1e22:	ed 91       	ld	r30, X+
    1e24:	fc 91       	ld	r31, X
    1e26:	15 97       	sbiw	r26, 0x05	; 5
    1e28:	30 97       	sbiw	r30, 0x00	; 0
    1e2a:	c1 f7       	brne	.-16     	; 0x1e1c <sync+0x30>
    1e2c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <current>
    1e30:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <current+0x1>
    1e34:	2a 17       	cp	r18, r26
    1e36:	3b 07       	cpc	r19, r27
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <sync+0x56>
    1e3a:	11 23       	and	r17, r17
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <sync+0x54>
    1e3e:	3d c0       	rjmp	.+122    	; 0x1eba <sync+0xce>
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <sync+0x64>
    1e42:	11 23       	and	r17, r17
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <sync+0x5c>
    1e46:	3c c0       	rjmp	.+120    	; 0x1ec0 <sync+0xd4>
    1e48:	78 94       	sei
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	9f ef       	ldi	r25, 0xFF	; 255
    1e4e:	52 c0       	rjmp	.+164    	; 0x1ef4 <sync+0x108>
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	9b 81       	ldd	r25, Y+3	; 0x03
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	d1 f1       	breq	.+116    	; 0x1ecc <sync+0xe0>
    1e58:	fc 01       	movw	r30, r24
    1e5a:	15 82       	std	Z+5, r1	; 0x05
    1e5c:	14 82       	std	Z+4, r1	; 0x04
    1e5e:	36 c0       	rjmp	.+108    	; 0x1ecc <sync+0xe0>
    1e60:	78 94       	sei
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	46 c0       	rjmp	.+140    	; 0x1ef4 <sync+0x108>
    1e68:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
    1e6c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
    1e70:	99 83       	std	Y+1, r25	; 0x01
    1e72:	88 83       	st	Y, r24
    1e74:	11 23       	and	r17, r17
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <sync+0x96>
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <sync+0x96>
    1e80:	78 94       	sei
    1e82:	b6 01       	movw	r22, r12
    1e84:	ce 01       	movw	r24, r28
    1e86:	f7 01       	movw	r30, r14
    1e88:	09 95       	icall
    1e8a:	f8 2e       	mov	r15, r24
    1e8c:	09 2f       	mov	r16, r25
    1e8e:	8f b7       	in	r24, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	19 82       	std	Y+1, r1	; 0x01
    1e94:	18 82       	st	Y, r1
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	38 f0       	brcs	.+14     	; 0x1eae <sync+0xc2>
    1ea0:	1b 82       	std	Y+3, r1	; 0x03
    1ea2:	1a 82       	std	Y+2, r1	; 0x02
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	15 82       	std	Z+5, r1	; 0x05
    1ea8:	14 82       	std	Z+4, r1	; 0x04
    1eaa:	0e 94 4e 04 	call	0x89c	; 0x89c <dispatch>
    1eae:	11 23       	and	r17, r17
    1eb0:	51 f0       	breq	.+20     	; 0x1ec6 <sync+0xda>
    1eb2:	78 94       	sei
    1eb4:	8f 2d       	mov	r24, r15
    1eb6:	90 2f       	mov	r25, r16
    1eb8:	1d c0       	rjmp	.+58     	; 0x1ef4 <sync+0x108>
    1eba:	8f ef       	ldi	r24, 0xFF	; 255
    1ebc:	9f ef       	ldi	r25, 0xFF	; 255
    1ebe:	1a c0       	rjmp	.+52     	; 0x1ef4 <sync+0x108>
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	9f ef       	ldi	r25, 0xFF	; 255
    1ec4:	17 c0       	rjmp	.+46     	; 0x1ef4 <sync+0x108>
    1ec6:	8f 2d       	mov	r24, r15
    1ec8:	90 2f       	mov	r25, r16
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <sync+0x108>
    1ecc:	3b 83       	std	Y+3, r19	; 0x03
    1ece:	2a 83       	std	Y+2, r18	; 0x02
    1ed0:	f9 01       	movw	r30, r18
    1ed2:	d5 83       	std	Z+5, r29	; 0x05
    1ed4:	c4 83       	std	Z+4, r28	; 0x04
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 4e 04 	call	0x89c	; 0x89c <dispatch>
    1edc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <current>
    1ee0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <current+0x1>
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	89 2b       	or	r24, r25
    1eea:	09 f4       	brne	.+2      	; 0x1eee <sync+0x102>
    1eec:	b9 cf       	rjmp	.-142    	; 0x1e60 <sync+0x74>
    1eee:	f9 83       	std	Y+1, r31	; 0x01
    1ef0:	e8 83       	st	Y, r30
    1ef2:	c2 cf       	rjmp	.-124    	; 0x1e78 <sync+0x8c>
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	08 95       	ret

00001f06 <run>:
    1f06:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <current>
    1f0a:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <current+0x1>
    1f0e:	88 e3       	ldi	r24, 0x38	; 56
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	0e 94 c7 0c 	call	0x198e	; 0x198e <dequeue>
    1f16:	ec 01       	movw	r28, r24
    1f18:	d8 01       	movw	r26, r16
    1f1a:	13 96       	adiw	r26, 0x03	; 3
    1f1c:	9c 93       	st	X, r25
    1f1e:	8e 93       	st	-X, r24
    1f20:	12 97       	sbiw	r26, 0x02	; 2
    1f22:	78 94       	sei
    1f24:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f26:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f30:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <sync>
    1f34:	8f b7       	in	r24, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msgPool>
    1f3c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msgPool+0x1>
    1f40:	99 83       	std	Y+1, r25	; 0x01
    1f42:	88 83       	st	Y, r24
    1f44:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <msgPool+0x1>
    1f48:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <msgPool>
    1f4c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <activeStack>
    1f50:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <activeStack+0x1>
    1f54:	00 81       	ld	r16, Z
    1f56:	11 81       	ldd	r17, Z+1	; 0x01
    1f58:	e8 01       	movw	r28, r16
    1f5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f5e:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <msgQ>
    1f62:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <msgQ+0x1>
    1f66:	10 97       	sbiw	r26, 0x00	; 0
    1f68:	c1 f0       	breq	.+48     	; 0x1f9a <run+0x94>
    1f6a:	21 15       	cp	r18, r1
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	59 f2       	breq	.-106    	; 0x1f06 <run>
    1f70:	16 96       	adiw	r26, 0x06	; 6
    1f72:	8d 91       	ld	r24, X+
    1f74:	9d 91       	ld	r25, X+
    1f76:	0d 90       	ld	r0, X+
    1f78:	bc 91       	ld	r27, X
    1f7a:	a0 2d       	mov	r26, r0
    1f7c:	e9 01       	movw	r28, r18
    1f7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1f80:	5f 81       	ldd	r21, Y+7	; 0x07
    1f82:	68 85       	ldd	r22, Y+8	; 0x08
    1f84:	79 85       	ldd	r23, Y+9	; 0x09
    1f86:	84 1b       	sub	r24, r20
    1f88:	95 0b       	sbc	r25, r21
    1f8a:	a6 0b       	sbc	r26, r22
    1f8c:	b7 0b       	sbc	r27, r23
    1f8e:	18 16       	cp	r1, r24
    1f90:	19 06       	cpc	r1, r25
    1f92:	1a 06       	cpc	r1, r26
    1f94:	1b 06       	cpc	r1, r27
    1f96:	0c f0       	brlt	.+2      	; 0x1f9a <run+0x94>
    1f98:	b6 cf       	rjmp	.-148    	; 0x1f06 <run>
    1f9a:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <activeStack+0x1>
    1f9e:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <activeStack>
    1fa2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <threadPool>
    1fa6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threadPool+0x1>
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <threadPool+0x1>
    1fb2:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <threadPool>
    1fb6:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <activeStack>
    1fba:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <activeStack+0x1>
    1fbe:	14 96       	adiw	r26, 0x04	; 4
    1fc0:	ed 91       	ld	r30, X+
    1fc2:	fc 91       	ld	r31, X
    1fc4:	15 97       	sbiw	r26, 0x05	; 5
    1fc6:	30 97       	sbiw	r30, 0x00	; 0
    1fc8:	41 f0       	breq	.+16     	; 0x1fda <run+0xd4>
    1fca:	a0 81       	ld	r26, Z
    1fcc:	b1 81       	ldd	r27, Z+1	; 0x01
    1fce:	14 96       	adiw	r26, 0x04	; 4
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	fc 91       	ld	r31, X
    1fd4:	15 97       	sbiw	r26, 0x05	; 5
    1fd6:	30 97       	sbiw	r30, 0x00	; 0
    1fd8:	c1 f7       	brne	.-16     	; 0x1fca <run+0xc4>
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 4e 04 	call	0x89c	; 0x89c <dispatch>
    1fe0:	92 cf       	rjmp	.-220    	; 0x1f06 <run>

00001fe2 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1fe2:	42 31       	cpi	r20, 0x12	; 18
    1fe4:	b8 f4       	brcc	.+46     	; 0x2014 <install+0x32>
        char status;
        DISABLE(status);
    1fe6:	2f b7       	in	r18, 0x3f	; 63
    1fe8:	f8 94       	cli
        otable[i] = obj;
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	44 0f       	add	r20, r20
    1fee:	55 1f       	adc	r21, r21
    1ff0:	fa 01       	movw	r30, r20
    1ff2:	e6 5c       	subi	r30, 0xC6	; 198
    1ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	80 83       	st	Z, r24
        mtable[i] = m;
    1ffa:	fa 01       	movw	r30, r20
    1ffc:	ee 52       	subi	r30, 0x2E	; 46
    1ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    2000:	71 83       	std	Z+1, r23	; 0x01
    2002:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2004:	41 e0       	ldi	r20, 0x01	; 1
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	fc 01       	movw	r30, r24
    200a:	53 83       	std	Z+3, r21	; 0x03
    200c:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    200e:	22 23       	and	r18, r18
    2010:	0c f4       	brge	.+2      	; 0x2014 <install+0x32>
    2012:	78 94       	sei
    2014:	08 95       	ret

00002016 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2016:	8c 01       	movw	r16, r24
    2018:	7b 01       	movw	r14, r22
    201a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    201c:	8f b7       	in	r24, 0x3f	; 63
    201e:	f8 94       	cli
    initialize();
    2020:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <initialize>
    ENABLE(1);
    2024:	78 94       	sei
    if (m != NULL)
    2026:	e1 14       	cp	r14, r1
    2028:	f1 04       	cpc	r15, r1
    202a:	41 f0       	breq	.+16     	; 0x203c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	cb 01       	movw	r24, r22
    2038:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <async>
    DISABLE(status);
    203c:	8f b7       	in	r24, 0x3f	; 63
    203e:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2040:	0e 94 6e 04 	call	0x8dc	; 0x8dc <schedule>
    ENABLE(1);
    2044:	78 94       	sei
    while (1) {
        SLEEP();
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	83 bf       	out	0x33, r24	; 51
    204a:	88 95       	sleep
    204c:	fd cf       	rjmp	.-6      	; 0x2048 <tinytimber+0x32>

0000204e <__divmodsi4>:
    204e:	05 2e       	mov	r0, r21
    2050:	97 fb       	bst	r25, 7
    2052:	1e f4       	brtc	.+6      	; 0x205a <__divmodsi4+0xc>
    2054:	00 94       	com	r0
    2056:	0e 94 3e 10 	call	0x207c	; 0x207c <__negsi2>
    205a:	57 fd       	sbrc	r21, 7
    205c:	07 d0       	rcall	.+14     	; 0x206c <__divmodsi4_neg2>
    205e:	0e 94 46 10 	call	0x208c	; 0x208c <__udivmodsi4>
    2062:	07 fc       	sbrc	r0, 7
    2064:	03 d0       	rcall	.+6      	; 0x206c <__divmodsi4_neg2>
    2066:	4e f4       	brtc	.+18     	; 0x207a <__divmodsi4_exit>
    2068:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__negsi2>

0000206c <__divmodsi4_neg2>:
    206c:	50 95       	com	r21
    206e:	40 95       	com	r20
    2070:	30 95       	com	r19
    2072:	21 95       	neg	r18
    2074:	3f 4f       	sbci	r19, 0xFF	; 255
    2076:	4f 4f       	sbci	r20, 0xFF	; 255
    2078:	5f 4f       	sbci	r21, 0xFF	; 255

0000207a <__divmodsi4_exit>:
    207a:	08 95       	ret

0000207c <__negsi2>:
    207c:	90 95       	com	r25
    207e:	80 95       	com	r24
    2080:	70 95       	com	r23
    2082:	61 95       	neg	r22
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	08 95       	ret

0000208c <__udivmodsi4>:
    208c:	a1 e2       	ldi	r26, 0x21	; 33
    208e:	1a 2e       	mov	r1, r26
    2090:	aa 1b       	sub	r26, r26
    2092:	bb 1b       	sub	r27, r27
    2094:	fd 01       	movw	r30, r26
    2096:	0d c0       	rjmp	.+26     	; 0x20b2 <__udivmodsi4_ep>

00002098 <__udivmodsi4_loop>:
    2098:	aa 1f       	adc	r26, r26
    209a:	bb 1f       	adc	r27, r27
    209c:	ee 1f       	adc	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	a2 17       	cp	r26, r18
    20a2:	b3 07       	cpc	r27, r19
    20a4:	e4 07       	cpc	r30, r20
    20a6:	f5 07       	cpc	r31, r21
    20a8:	20 f0       	brcs	.+8      	; 0x20b2 <__udivmodsi4_ep>
    20aa:	a2 1b       	sub	r26, r18
    20ac:	b3 0b       	sbc	r27, r19
    20ae:	e4 0b       	sbc	r30, r20
    20b0:	f5 0b       	sbc	r31, r21

000020b2 <__udivmodsi4_ep>:
    20b2:	66 1f       	adc	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	1a 94       	dec	r1
    20bc:	69 f7       	brne	.-38     	; 0x2098 <__udivmodsi4_loop>
    20be:	60 95       	com	r22
    20c0:	70 95       	com	r23
    20c2:	80 95       	com	r24
    20c4:	90 95       	com	r25
    20c6:	9b 01       	movw	r18, r22
    20c8:	ac 01       	movw	r20, r24
    20ca:	bd 01       	movw	r22, r26
    20cc:	cf 01       	movw	r24, r30
    20ce:	08 95       	ret

000020d0 <setjmp>:
    20d0:	dc 01       	movw	r26, r24
    20d2:	2d 92       	st	X+, r2
    20d4:	3d 92       	st	X+, r3
    20d6:	4d 92       	st	X+, r4
    20d8:	5d 92       	st	X+, r5
    20da:	6d 92       	st	X+, r6
    20dc:	7d 92       	st	X+, r7
    20de:	8d 92       	st	X+, r8
    20e0:	9d 92       	st	X+, r9
    20e2:	ad 92       	st	X+, r10
    20e4:	bd 92       	st	X+, r11
    20e6:	cd 92       	st	X+, r12
    20e8:	dd 92       	st	X+, r13
    20ea:	ed 92       	st	X+, r14
    20ec:	fd 92       	st	X+, r15
    20ee:	0d 93       	st	X+, r16
    20f0:	1d 93       	st	X+, r17
    20f2:	cd 93       	st	X+, r28
    20f4:	dd 93       	st	X+, r29
    20f6:	ff 91       	pop	r31
    20f8:	ef 91       	pop	r30
    20fa:	8d b7       	in	r24, 0x3d	; 61
    20fc:	8d 93       	st	X+, r24
    20fe:	8e b7       	in	r24, 0x3e	; 62
    2100:	8d 93       	st	X+, r24
    2102:	8f b7       	in	r24, 0x3f	; 63
    2104:	8d 93       	st	X+, r24
    2106:	ed 93       	st	X+, r30
    2108:	fd 93       	st	X+, r31
    210a:	88 27       	eor	r24, r24
    210c:	99 27       	eor	r25, r25
    210e:	09 94       	ijmp

00002110 <longjmp>:
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	91 05       	cpc	r25, r1
    2118:	81 1d       	adc	r24, r1
    211a:	2d 90       	ld	r2, X+
    211c:	3d 90       	ld	r3, X+
    211e:	4d 90       	ld	r4, X+
    2120:	5d 90       	ld	r5, X+
    2122:	6d 90       	ld	r6, X+
    2124:	7d 90       	ld	r7, X+
    2126:	8d 90       	ld	r8, X+
    2128:	9d 90       	ld	r9, X+
    212a:	ad 90       	ld	r10, X+
    212c:	bd 90       	ld	r11, X+
    212e:	cd 90       	ld	r12, X+
    2130:	dd 90       	ld	r13, X+
    2132:	ed 90       	ld	r14, X+
    2134:	fd 90       	ld	r15, X+
    2136:	0d 91       	ld	r16, X+
    2138:	1d 91       	ld	r17, X+
    213a:	cd 91       	ld	r28, X+
    213c:	dd 91       	ld	r29, X+
    213e:	ed 91       	ld	r30, X+
    2140:	fd 91       	ld	r31, X+
    2142:	0d 90       	ld	r0, X+
    2144:	f8 94       	cli
    2146:	fe bf       	out	0x3e, r31	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	ed bf       	out	0x3d, r30	; 61
    214c:	ed 91       	ld	r30, X+
    214e:	fd 91       	ld	r31, X+
    2150:	09 94       	ijmp

00002152 <_exit>:
    2152:	f8 94       	cli

00002154 <__stop_program>:
    2154:	ff cf       	rjmp	.-2      	; 0x2154 <__stop_program>
