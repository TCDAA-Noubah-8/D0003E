
Lab3_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000878  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  00000924  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001298  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b42  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000717  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bff  00000000  00000000  000036f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 e7       	ldi	r30, 0x78	; 120
  70:	f8 e0       	ldi	r31, 0x08	; 8
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 42 02 	call	0x484	; 0x484 <main>
  92:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
    }
}

void blink(void) {
			//tända segment
		if(LCDDR13 != 0) { // om segment är på så stänger vi av denna
  9a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__DATA_REGION_ORIGIN__+0x99>
  9e:	88 23       	and	r24, r24
  a0:	19 f0       	breq	.+6      	; 0xa8 <blink+0xe>
			LCDDR13 = 0;
  a2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__DATA_REGION_ORIGIN__+0x99>
  a6:	08 95       	ret
		} else {
			LCDDR13 = 0x01; //sätter på den om den var släckt
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__DATA_REGION_ORIGIN__+0x99>
  ae:	08 95       	ret

000000b0 <writeChar>:

mutex blinkM = MUTEX_INIT;
mutex buttonM = MUTEX_INIT;
long btnCount = 0;

void writeChar(char ch, int pos){
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	64 97       	sbiw	r28, 0x14	; 20
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
	char mask;
	uint16_t allSCC[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  c6:	94 e1       	ldi	r25, 0x14	; 20
  c8:	e4 e0       	ldi	r30, 0x04	; 4
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	9a 95       	dec	r25
  d6:	e1 f7       	brne	.-8      	; 0xd0 <writeChar+0x20>
	uint16_t number;
	char nibble = 0x0000;
	char out1 = 0x00, out2= 0x00, out3= 0x00, out4 = 0x00;
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
  d8:	66 30       	cpi	r22, 0x06	; 6
  da:	71 05       	cpc	r23, r1
  dc:	08 f0       	brcs	.+2      	; 0xe0 <writeChar+0x30>
  de:	04 c1       	rjmp	.+520    	; 0x2e8 <writeChar+0x238>
		return;
	}
	if(pos%2==0){
  e0:	60 ff       	sbrs	r22, 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <writeChar+0x38>
		mask = 0xF0;
	}
	else{
		mask = 0x0F;
  e4:	af e0       	ldi	r26, 0x0F	; 15
  e6:	01 c0       	rjmp	.+2      	; 0xea <writeChar+0x3a>
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
		return;
	}
	if(pos%2==0){
		mask = 0xF0;
  e8:	a0 ef       	ldi	r26, 0xF0	; 240
	}
	else{
		mask = 0x0F;
	}

	if(isdigit(ch)){
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	a9 01       	movw	r20, r18
  f0:	40 53       	subi	r20, 0x30	; 48
  f2:	51 09       	sbc	r21, r1
  f4:	4a 30       	cpi	r20, 0x0A	; 10
  f6:	51 05       	cpc	r21, r1
  f8:	10 f4       	brcc	.+4      	; 0xfe <writeChar+0x4e>
		number = ch-'0';
  fa:	9a 01       	movw	r18, r20
  fc:	03 c0       	rjmp	.+6      	; 0x104 <writeChar+0x54>
	}
	else if((ch<0)|(ch>9)){
  fe:	8a 30       	cpi	r24, 0x0A	; 10
 100:	08 f0       	brcs	.+2      	; 0x104 <writeChar+0x54>
 102:	f2 c0       	rjmp	.+484    	; 0x2e8 <writeChar+0x238>
		return;
	}
	else{
		number = ch;
	}
	int mod = pos%2;
 104:	cb 01       	movw	r24, r22
 106:	81 70       	andi	r24, 0x01	; 1
 108:	90 78       	andi	r25, 0x80	; 128
 10a:	99 23       	and	r25, r25
 10c:	24 f4       	brge	.+8      	; 0x116 <writeChar+0x66>
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	8e 6f       	ori	r24, 0xFE	; 254
 112:	9f 6f       	ori	r25, 0xFF	; 255
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	ac 01       	movw	r20, r24
	if(mod==1){
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	09 f0       	breq	.+2      	; 0x11e <writeChar+0x6e>
 11c:	c8 c0       	rjmp	.+400    	; 0x2ae <writeChar+0x1fe>
		pos-=1;
 11e:	61 50       	subi	r22, 0x01	; 1
 120:	71 09       	sbc	r23, r1
 122:	c5 c0       	rjmp	.+394    	; 0x2ae <writeChar+0x1fe>
			out4=nibble;
		}
	}

	if(pos==0){
		LCDDR0 = (out1<<(mod*4)) + (LCDDR0&mask);
 124:	ca 01       	movw	r24, r20
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	4c ee       	ldi	r20, 0xEC	; 236
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	fa 01       	movw	r30, r20
 134:	90 81       	ld	r25, Z
 136:	e1 2f       	mov	r30, r17
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	08 2e       	mov	r0, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <writeChar+0x92>
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <writeChar+0x8e>
 146:	9a 23       	and	r25, r26
 148:	9e 0f       	add	r25, r30
 14a:	fa 01       	movw	r30, r20
 14c:	90 83       	st	Z, r25
		LCDDR5 = (out2<<(mod*4))+(LCDDR5&mask);
 14e:	e1 ef       	ldi	r30, 0xF1	; 241
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	6b 2f       	mov	r22, r27
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	08 2e       	mov	r0, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <writeChar+0xb0>
 15c:	66 0f       	add	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <writeChar+0xac>
 164:	9a 23       	and	r25, r26
 166:	69 0f       	add	r22, r25
 168:	60 83       	st	Z, r22
		LCDDR10 = (out3<<(mod*4))+(LCDDR10&mask);
 16a:	e6 ef       	ldi	r30, 0xF6	; 246
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	43 2f       	mov	r20, r19
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	08 2e       	mov	r0, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <writeChar+0xcc>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <writeChar+0xc8>
 180:	9a 23       	and	r25, r26
 182:	49 0f       	add	r20, r25
 184:	40 83       	st	Z, r20
		LCDDR15 = (out4<<(mod*4))+(LCDDR15&mask);
 186:	eb ef       	ldi	r30, 0xFB	; 251
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	40 81       	ld	r20, Z
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <writeChar+0xe6>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <writeChar+0xe2>
 19a:	cb 01       	movw	r24, r22
 19c:	a4 23       	and	r26, r20
 19e:	8a 0f       	add	r24, r26
 1a0:	80 83       	st	Z, r24
 1a2:	a2 c0       	rjmp	.+324    	; 0x2e8 <writeChar+0x238>

	}
	if(pos==2){
 1a4:	62 30       	cpi	r22, 0x02	; 2
 1a6:	71 05       	cpc	r23, r1
 1a8:	09 f0       	breq	.+2      	; 0x1ac <writeChar+0xfc>
 1aa:	3f c0       	rjmp	.+126    	; 0x22a <writeChar+0x17a>
		LCDDR1 = (out1<<(mod*4))+ (LCDDR1&mask);
 1ac:	ca 01       	movw	r24, r20
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	4d ee       	ldi	r20, 0xED	; 237
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	fa 01       	movw	r30, r20
 1bc:	90 81       	ld	r25, Z
 1be:	e1 2f       	mov	r30, r17
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	08 2e       	mov	r0, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <writeChar+0x11a>
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <writeChar+0x116>
 1ce:	9a 23       	and	r25, r26
 1d0:	9e 0f       	add	r25, r30
 1d2:	fa 01       	movw	r30, r20
 1d4:	90 83       	st	Z, r25
		LCDDR6 = (out2<<(mod*4))+ (LCDDR6&mask);
 1d6:	e2 ef       	ldi	r30, 0xF2	; 242
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	6b 2f       	mov	r22, r27
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	08 2e       	mov	r0, r24
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <writeChar+0x138>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <writeChar+0x134>
 1ec:	9a 23       	and	r25, r26
 1ee:	69 0f       	add	r22, r25
 1f0:	60 83       	st	Z, r22
		LCDDR11 = (out3<<(mod*4))+ (LCDDR11&mask);
 1f2:	e7 ef       	ldi	r30, 0xF7	; 247
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	90 81       	ld	r25, Z
 1f8:	43 2f       	mov	r20, r19
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	08 2e       	mov	r0, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <writeChar+0x154>
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <writeChar+0x150>
 208:	3a 2f       	mov	r19, r26
 20a:	39 23       	and	r19, r25
 20c:	43 0f       	add	r20, r19
 20e:	40 83       	st	Z, r20
		LCDDR16 = (out4<<(mod*4))+ (LCDDR16&mask);
 210:	ec ef       	ldi	r30, 0xFC	; 252
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <writeChar+0x16e>
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	8a 95       	dec	r24
 220:	e2 f7       	brpl	.-8      	; 0x21a <writeChar+0x16a>
 222:	a9 23       	and	r26, r25
 224:	2a 0f       	add	r18, r26
 226:	20 83       	st	Z, r18
 228:	5f c0       	rjmp	.+190    	; 0x2e8 <writeChar+0x238>
	}
	if(pos==4){
 22a:	64 30       	cpi	r22, 0x04	; 4
 22c:	71 05       	cpc	r23, r1
 22e:	09 f0       	breq	.+2      	; 0x232 <writeChar+0x182>
 230:	5b c0       	rjmp	.+182    	; 0x2e8 <writeChar+0x238>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
 232:	ca 01       	movw	r24, r20
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	4e ee       	ldi	r20, 0xEE	; 238
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	fa 01       	movw	r30, r20
 242:	90 81       	ld	r25, Z
 244:	e1 2f       	mov	r30, r17
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	08 2e       	mov	r0, r24
 24a:	02 c0       	rjmp	.+4      	; 0x250 <writeChar+0x1a0>
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <writeChar+0x19c>
 254:	9a 23       	and	r25, r26
 256:	9e 0f       	add	r25, r30
 258:	fa 01       	movw	r30, r20
 25a:	90 83       	st	Z, r25
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
 25c:	e3 ef       	ldi	r30, 0xF3	; 243
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	90 81       	ld	r25, Z
 262:	6b 2f       	mov	r22, r27
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	08 2e       	mov	r0, r24
 268:	02 c0       	rjmp	.+4      	; 0x26e <writeChar+0x1be>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <writeChar+0x1ba>
 272:	9a 23       	and	r25, r26
 274:	69 0f       	add	r22, r25
 276:	60 83       	st	Z, r22
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
 278:	e8 ef       	ldi	r30, 0xF8	; 248
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	90 81       	ld	r25, Z
 27e:	43 2f       	mov	r20, r19
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	08 2e       	mov	r0, r24
 284:	02 c0       	rjmp	.+4      	; 0x28a <writeChar+0x1da>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <writeChar+0x1d6>
 28e:	9a 23       	and	r25, r26
 290:	49 0f       	add	r20, r25
 292:	40 83       	st	Z, r20
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
 294:	ed ef       	ldi	r30, 0xFD	; 253
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	90 81       	ld	r25, Z
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <writeChar+0x1f2>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <writeChar+0x1ee>
 2a6:	a9 23       	and	r26, r25
 2a8:	2a 0f       	add	r18, r26
 2aa:	20 83       	st	Z, r18
 2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <writeChar+0x238>
	if(mod==1){
		pos-=1;
	}


	charr = allSCC[number];
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	fe 01       	movw	r30, r28
 2b4:	e2 0f       	add	r30, r18
 2b6:	f3 1f       	adc	r31, r19
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	92 81       	ldd	r25, Z+2	; 0x02
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
 2bc:	18 2f       	mov	r17, r24
 2be:	1f 70       	andi	r17, 0x0F	; 15
		charr = charr >> 4;
 2c0:	9c 01       	movw	r18, r24
 2c2:	32 95       	swap	r19
 2c4:	22 95       	swap	r18
 2c6:	2f 70       	andi	r18, 0x0F	; 15
 2c8:	23 27       	eor	r18, r19
 2ca:	3f 70       	andi	r19, 0x0F	; 15
 2cc:	23 27       	eor	r18, r19
	}


	charr = allSCC[number];
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
 2ce:	b2 2f       	mov	r27, r18
 2d0:	bf 70       	andi	r27, 0x0F	; 15
 2d2:	39 2f       	mov	r19, r25
 2d4:	3f 70       	andi	r19, 0x0F	; 15
 2d6:	29 2f       	mov	r18, r25
 2d8:	22 95       	swap	r18
 2da:	2f 70       	andi	r18, 0x0F	; 15
 2dc:	2f 70       	andi	r18, 0x0F	; 15
		if(i==3){
			out4=nibble;
		}
	}

	if(pos==0){
 2de:	61 15       	cp	r22, r1
 2e0:	71 05       	cpc	r23, r1
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <writeChar+0x236>
 2e4:	1f cf       	rjmp	.-450    	; 0x124 <writeChar+0x74>
 2e6:	5e cf       	rjmp	.-324    	; 0x1a4 <writeChar+0xf4>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
	}
}
 2e8:	64 96       	adiw	r28, 0x14	; 20
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

000002fc <is_prime>:

bool is_prime(long i){
 2fc:	cf 92       	push	r12
 2fe:	df 92       	push	r13
 300:	ef 92       	push	r14
 302:	ff 92       	push	r15
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24
	if(i>0){
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	c8 16       	cp	r12, r24
 310:	d1 04       	cpc	r13, r1
 312:	e1 04       	cpc	r14, r1
 314:	f1 04       	cpc	r15, r1
 316:	74 f1       	brlt	.+92     	; 0x374 <is_prime+0x78>
		for(int j = 2;j<i;j++){
			if((i%j)==0){
 318:	d7 01       	movw	r26, r14
 31a:	c6 01       	movw	r24, r12
 31c:	81 70       	andi	r24, 0x01	; 1
 31e:	99 27       	eor	r25, r25
 320:	aa 27       	eor	r26, r26
 322:	b0 78       	andi	r27, 0x80	; 128
 324:	bb 23       	and	r27, r27
 326:	54 f4       	brge	.+20     	; 0x33c <is_prime+0x40>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	a1 09       	sbc	r26, r1
 32c:	b1 09       	sbc	r27, r1
 32e:	8e 6f       	ori	r24, 0xFE	; 254
 330:	9f 6f       	ori	r25, 0xFF	; 255
 332:	af 6f       	ori	r26, 0xFF	; 255
 334:	bf 6f       	ori	r27, 0xFF	; 255
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	a1 1d       	adc	r26, r1
 33a:	b1 1d       	adc	r27, r1
 33c:	89 2b       	or	r24, r25
 33e:	8a 2b       	or	r24, r26
 340:	8b 2b       	or	r24, r27
 342:	d1 f0       	breq	.+52     	; 0x378 <is_prime+0x7c>
 344:	c2 e0       	ldi	r28, 0x02	; 2
 346:	d0 e0       	ldi	r29, 0x00	; 0
 348:	08 c0       	rjmp	.+16     	; 0x35a <is_prime+0x5e>
 34a:	c7 01       	movw	r24, r14
 34c:	b6 01       	movw	r22, r12
 34e:	0e 94 b8 03 	call	0x770	; 0x770 <__divmodsi4>
 352:	67 2b       	or	r22, r23
 354:	68 2b       	or	r22, r24
 356:	69 2b       	or	r22, r25
 358:	89 f0       	breq	.+34     	; 0x37c <is_prime+0x80>
	}
}

bool is_prime(long i){
	if(i>0){
		for(int j = 2;j<i;j++){
 35a:	21 96       	adiw	r28, 0x01	; 1
 35c:	9e 01       	movw	r18, r28
 35e:	0d 2e       	mov	r0, r29
 360:	00 0c       	add	r0, r0
 362:	44 0b       	sbc	r20, r20
 364:	55 0b       	sbc	r21, r21
 366:	2c 15       	cp	r18, r12
 368:	3d 05       	cpc	r19, r13
 36a:	4e 05       	cpc	r20, r14
 36c:	5f 05       	cpc	r21, r15
 36e:	6c f3       	brlt	.-38     	; 0x34a <is_prime+0x4e>
			if((i%j)==0){
				return false; //inte prime
			}
		}
	}
	return true;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	05 c0       	rjmp	.+10     	; 0x37e <is_prime+0x82>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	03 c0       	rjmp	.+6      	; 0x37e <is_prime+0x82>

bool is_prime(long i){
	if(i>0){
		for(int j = 2;j<i;j++){
			if((i%j)==0){
				return false; //inte prime
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	01 c0       	rjmp	.+2      	; 0x37e <is_prime+0x82>
 37c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return true;
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	08 95       	ret

0000038c <printAt>:
int pp;

void printAt(long num, int pos) {
 38c:	8f 92       	push	r8
 38e:	9f 92       	push	r9
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	4b 01       	movw	r8, r22
 3a2:	5c 01       	movw	r10, r24
 3a4:	ea 01       	movw	r28, r20
    pp = pos;
 3a6:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <pp+0x1>
 3aa:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 3ae:	24 e6       	ldi	r18, 0x64	; 100
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	0e 94 b8 03 	call	0x770	; 0x770 <__divmodsi4>
 3ba:	0f 2e       	mov	r0, r31
 3bc:	fa e0       	ldi	r31, 0x0A	; 10
 3be:	cf 2e       	mov	r12, r31
 3c0:	d1 2c       	mov	r13, r1
 3c2:	e1 2c       	mov	r14, r1
 3c4:	f1 2c       	mov	r15, r1
 3c6:	f0 2d       	mov	r31, r0
 3c8:	a7 01       	movw	r20, r14
 3ca:	96 01       	movw	r18, r12
 3cc:	0e 94 b8 03 	call	0x770	; 0x770 <__divmodsi4>
 3d0:	be 01       	movw	r22, r28
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	82 0f       	add	r24, r18
 3d6:	0e 94 58 00 	call	0xb0	; 0xb0 <writeChar>
    pp++;
 3da:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <pp>
 3de:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <pp+0x1>
 3e2:	21 96       	adiw	r28, 0x01	; 1
 3e4:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 3e8:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
    writeChar( num % 10 + '0', pp);
 3ec:	c5 01       	movw	r24, r10
 3ee:	b4 01       	movw	r22, r8
 3f0:	a7 01       	movw	r20, r14
 3f2:	96 01       	movw	r18, r12
 3f4:	0e 94 b8 03 	call	0x770	; 0x770 <__divmodsi4>
 3f8:	86 2f       	mov	r24, r22
 3fa:	be 01       	movw	r22, r28
 3fc:	80 5d       	subi	r24, 0xD0	; 208
 3fe:	0e 94 58 00 	call	0xb0	; 0xb0 <writeChar>
	
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	df 90       	pop	r13
 40c:	cf 90       	pop	r12
 40e:	bf 90       	pop	r11
 410:	af 90       	pop	r10
 412:	9f 90       	pop	r9
 414:	8f 90       	pop	r8
 416:	08 95       	ret

00000418 <button>:
			LCDDR13 = 0x01; //sätter på den om den var släckt
		}
	
}

void button(int pos) {
 418:	ac 01       	movw	r20, r24
		printAt(btnCount, pos);
 41a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 41e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 422:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 426:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 42a:	0e 94 c6 01 	call	0x38c	; 0x38c <printAt>
 42e:	08 95       	ret

00000430 <computePrimes>:
    pp++;
    writeChar( num % 10 + '0', pp);
	
}

void computePrimes(int pos) {
 430:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 432:	c1 2c       	mov	r12, r1
 434:	d1 2c       	mov	r13, r1
 436:	76 01       	movw	r14, r12
 438:	c3 94       	inc	r12
        if (is_prime(n)) {
 43a:	c7 01       	movw	r24, r14
 43c:	b6 01       	movw	r22, r12
 43e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <is_prime>
 442:	88 23       	and	r24, r24
 444:	29 f0       	breq	.+10     	; 0x450 <computePrimes+0x20>
            printAt(n, pos);
 446:	ae 01       	movw	r20, r28
 448:	c7 01       	movw	r24, r14
 44a:	b6 01       	movw	r22, r12
 44c:	0e 94 c6 01 	call	0x38c	; 0x38c <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	c8 1a       	sub	r12, r24
 454:	d8 0a       	sbc	r13, r24
 456:	e8 0a       	sbc	r14, r24
 458:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
			//yield();
        }
    }
 45a:	ef cf       	rjmp	.-34     	; 0x43a <computePrimes+0xa>

0000045c <init>:
void button(int pos) {
		printAt(btnCount, pos);
}

void init(void) {
	TCCR1A = (1 << COM1A1) | (1 << COM1A0); 
 45c:	80 ec       	ldi	r24, 0xC0	; 192
 45e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); 
 462:	8d e0       	ldi	r24, 0x0D	; 13
 464:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1A = 8000000/2048;
 468:	82 e4       	ldi	r24, 0x42	; 66
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 470:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0x0;
 474:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 478:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 = (1 << OCIE1A); 
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 482:	08 95       	ret

00000484 <main>:
}

int main() {
	init();
 484:	0e 94 2e 02 	call	0x45c	; 0x45c <init>
	
    spawn(blink, 0);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	8d e4       	ldi	r24, 0x4D	; 77
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 74 02 	call	0x4e8	; 0x4e8 <spawn>
    spawn(button, 4);
 494:	64 e0       	ldi	r22, 0x04	; 4
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	92 e0       	ldi	r25, 0x02	; 2
 49c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <spawn>
	computePrimes(0);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 18 02 	call	0x430	; 0x430 <computePrimes>

000004a8 <dispatch>:
		m->locked = 1;
		} else {
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <dispatch+0x6>
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	9a 83       	std	Y+2, r25	; 0x02
 4b4:	89 83       	std	Y+1, r24	; 0x01
 4b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4be:	06 96       	adiw	r24, 0x06	; 6
 4c0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <setjmp>
 4c4:	89 2b       	or	r24, r25
 4c6:	59 f4       	brne	.+22     	; 0x4de <dispatch+0x36>
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	06 96       	adiw	r24, 0x06	; 6
 4da:	0e 94 19 04 	call	0x832	; 0x832 <longjmp>
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <spawn>:
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <spawn+0x6>
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	ac 01       	movw	r20, r24
 4f4:	f8 94       	cli
 4f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <initialized>
 4fa:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <initialized+0x1>
 4fe:	89 2b       	or	r24, r25
 500:	89 f5       	brne	.+98     	; 0x564 <__stack+0x65>
 502:	8c ef       	ldi	r24, 0xFC	; 252
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <threads+0x5>
 50a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <threads+0x4>
 50e:	89 e6       	ldi	r24, 0x69	; 105
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <threads+0x72>
 516:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <threads+0x71>
 51a:	86 ed       	ldi	r24, 0xD6	; 214
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <threads+0xdf>
 522:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <threads+0xde>
 526:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 52a:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <initialized+0x1>
 536:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <initialized>
 53a:	e1 e6       	ldi	r30, 0x61	; 97
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	90 e8       	ldi	r25, 0x80	; 128
 540:	90 83       	st	Z, r25
 542:	10 82       	st	Z, r1
 544:	9d bb       	out	0x1d, r25	; 29
 546:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 54a:	95 b9       	out	0x05, r25	; 5
 54c:	80 ec       	ldi	r24, 0xC0	; 192
 54e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 552:	87 eb       	ldi	r24, 0xB7	; 183
 554:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 558:	8f e0       	ldi	r24, 0x0F	; 15
 55a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
 55e:	87 e0       	ldi	r24, 0x07	; 7
 560:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
 564:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 568:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 56c:	9a 83       	std	Y+2, r25	; 0x02
 56e:	89 83       	std	Y+1, r24	; 0x01
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	a1 f0       	breq	.+40     	; 0x59c <__stack+0x9d>
 574:	fc 01       	movw	r30, r24
 576:	84 81       	ldd	r24, Z+4	; 0x04
 578:	95 81       	ldd	r25, Z+5	; 0x05
 57a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 57e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>
 582:	51 83       	std	Z+1, r21	; 0x01
 584:	40 83       	st	Z, r20
 586:	73 83       	std	Z+3, r23	; 0x03
 588:	62 83       	std	Z+2, r22	; 0x02
 58a:	15 82       	std	Z+5, r1	; 0x05
 58c:	14 82       	std	Z+4, r1	; 0x04
 58e:	cf 01       	movw	r24, r30
 590:	06 96       	adiw	r24, 0x06	; 6
 592:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <setjmp>
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	c1 f5       	brne	.+112    	; 0x60a <__stack+0x10b>
 59a:	01 c0       	rjmp	.+2      	; 0x59e <__stack+0x9f>
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stack+0x9d>
 59e:	78 94       	sei
 5a0:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 5a4:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 5a8:	ed 91       	ld	r30, X+
 5aa:	fc 91       	ld	r31, X
 5ac:	11 97       	sbiw	r26, 0x01	; 1
 5ae:	12 96       	adiw	r26, 0x02	; 2
 5b0:	8d 91       	ld	r24, X+
 5b2:	9c 91       	ld	r25, X
 5b4:	13 97       	sbiw	r26, 0x03	; 3
 5b6:	09 95       	icall
 5b8:	f8 94       	cli
 5ba:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 5be:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 5c2:	15 82       	std	Z+5, r1	; 0x05
 5c4:	14 82       	std	Z+4, r1	; 0x04
 5c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 5ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	29 f4       	brne	.+10     	; 0x5dc <__stack+0xdd>
 5d2:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 5d6:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
 5da:	06 c0       	rjmp	.+12     	; 0x5e8 <__stack+0xe9>
 5dc:	95 83       	std	Z+5, r25	; 0x05
 5de:	84 83       	std	Z+4, r24	; 0x04
 5e0:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 5e4:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
 5e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 5ec:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
 5f0:	00 97       	sbiw	r24, 0x00	; 0
 5f2:	51 f0       	breq	.+20     	; 0x608 <__stack+0x109>
 5f4:	fc 01       	movw	r30, r24
 5f6:	24 81       	ldd	r18, Z+4	; 0x04
 5f8:	35 81       	ldd	r19, Z+5	; 0x05
 5fa:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 5fe:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
 602:	0e 94 54 02 	call	0x4a8	; 0x4a8 <dispatch>
 606:	01 c0       	rjmp	.+2      	; 0x60a <__stack+0x10b>
 608:	ff cf       	rjmp	.-2      	; 0x608 <__stack+0x109>
 60a:	e9 81       	ldd	r30, Y+1	; 0x01
 60c:	fa 81       	ldd	r31, Y+2	; 0x02
 60e:	36 96       	adiw	r30, 0x06	; 6
 610:	89 81       	ldd	r24, Y+1	; 0x01
 612:	9a 81       	ldd	r25, Y+2	; 0x02
 614:	87 59       	subi	r24, 0x97	; 151
 616:	9f 4f       	sbci	r25, 0xFF	; 255
 618:	91 8b       	std	Z+17, r25	; 0x11
 61a:	80 8b       	std	Z+16, r24	; 0x10
 61c:	93 8b       	std	Z+19, r25	; 0x13
 61e:	82 8b       	std	Z+18, r24	; 0x12
 620:	e9 81       	ldd	r30, Y+1	; 0x01
 622:	fa 81       	ldd	r31, Y+2	; 0x02
 624:	15 82       	std	Z+5, r1	; 0x05
 626:	14 82       	std	Z+4, r1	; 0x04
 628:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 62c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
 630:	00 97       	sbiw	r24, 0x00	; 0
 632:	29 f4       	brne	.+10     	; 0x63e <__stack+0x13f>
 634:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 638:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
 63c:	08 c0       	rjmp	.+16     	; 0x64e <__stack+0x14f>
 63e:	e9 81       	ldd	r30, Y+1	; 0x01
 640:	fa 81       	ldd	r31, Y+2	; 0x02
 642:	95 83       	std	Z+5, r25	; 0x05
 644:	84 83       	std	Z+4, r24	; 0x04
 646:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 64a:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
 64e:	78 94       	sei
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <yield>:
 65a:	f8 94       	cli
 65c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 660:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
 664:	00 97       	sbiw	r24, 0x00	; 0
 666:	c9 f0       	breq	.+50     	; 0x69a <yield+0x40>
 668:	fc 01       	movw	r30, r24
 66a:	24 81       	ldd	r18, Z+4	; 0x04
 66c:	35 81       	ldd	r19, Z+5	; 0x05
 66e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 672:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 676:	15 82       	std	Z+5, r1	; 0x05
 678:	14 82       	std	Z+4, r1	; 0x04
 67a:	21 15       	cp	r18, r1
 67c:	31 05       	cpc	r19, r1
 67e:	29 f4       	brne	.+10     	; 0x68a <yield+0x30>
 680:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 684:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
 688:	06 c0       	rjmp	.+12     	; 0x696 <yield+0x3c>
 68a:	35 83       	std	Z+5, r19	; 0x05
 68c:	24 83       	std	Z+4, r18	; 0x04
 68e:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 692:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
 696:	0e 94 54 02 	call	0x4a8	; 0x4a8 <dispatch>
 69a:	78 94       	sei
 69c:	08 95       	ret

0000069e <__vector_3>:
}

ISR(PCINT1_vect) {
 69e:	1f 92       	push	r1
 6a0:	0f 92       	push	r0
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	0f 92       	push	r0
 6a6:	11 24       	eor	r1, r1
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
	//code for interrupt handler
	if(PINB >> 7 == 0){
 6c0:	1f 99       	sbic	0x03, 7	; 3
 6c2:	1b c0       	rjmp	.+54     	; 0x6fa <__vector_3+0x5c>
		btnCount++;
 6c4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 6c8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 6cc:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 6d0:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	a1 1d       	adc	r26, r1
 6d8:	b1 1d       	adc	r27, r1
 6da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 6de:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 6e2:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 6e6:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
		spawn(button, 4);
 6ea:	64 e0       	ldi	r22, 0x04	; 4
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	8c e0       	ldi	r24, 0x0C	; 12
 6f0:	92 e0       	ldi	r25, 0x02	; 2
 6f2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <spawn>
		yield();
 6f6:	0e 94 2d 03 	call	0x65a	; 0x65a <yield>
	}
}
 6fa:	ff 91       	pop	r31
 6fc:	ef 91       	pop	r30
 6fe:	bf 91       	pop	r27
 700:	af 91       	pop	r26
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	7f 91       	pop	r23
 708:	6f 91       	pop	r22
 70a:	5f 91       	pop	r21
 70c:	4f 91       	pop	r20
 70e:	3f 91       	pop	r19
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <__vector_7>:
ISR(TIMER1_COMPA_vect) {
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	2f 93       	push	r18
 728:	3f 93       	push	r19
 72a:	4f 93       	push	r20
 72c:	5f 93       	push	r21
 72e:	6f 93       	push	r22
 730:	7f 93       	push	r23
 732:	8f 93       	push	r24
 734:	9f 93       	push	r25
 736:	af 93       	push	r26
 738:	bf 93       	push	r27
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
	spawn(blink, 0);
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	8d e4       	ldi	r24, 0x4D	; 77
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 74 02 	call	0x4e8	; 0x4e8 <spawn>
	yield();
 74a:	0e 94 2d 03 	call	0x65a	; 0x65a <yield>
}
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__divmodsi4>:
 770:	05 2e       	mov	r0, r21
 772:	97 fb       	bst	r25, 7
 774:	1e f4       	brtc	.+6      	; 0x77c <__divmodsi4+0xc>
 776:	00 94       	com	r0
 778:	0e 94 cf 03 	call	0x79e	; 0x79e <__negsi2>
 77c:	57 fd       	sbrc	r21, 7
 77e:	07 d0       	rcall	.+14     	; 0x78e <__divmodsi4_neg2>
 780:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__udivmodsi4>
 784:	07 fc       	sbrc	r0, 7
 786:	03 d0       	rcall	.+6      	; 0x78e <__divmodsi4_neg2>
 788:	4e f4       	brtc	.+18     	; 0x79c <__divmodsi4_exit>
 78a:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__negsi2>

0000078e <__divmodsi4_neg2>:
 78e:	50 95       	com	r21
 790:	40 95       	com	r20
 792:	30 95       	com	r19
 794:	21 95       	neg	r18
 796:	3f 4f       	sbci	r19, 0xFF	; 255
 798:	4f 4f       	sbci	r20, 0xFF	; 255
 79a:	5f 4f       	sbci	r21, 0xFF	; 255

0000079c <__divmodsi4_exit>:
 79c:	08 95       	ret

0000079e <__negsi2>:
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__udivmodsi4>:
 7ae:	a1 e2       	ldi	r26, 0x21	; 33
 7b0:	1a 2e       	mov	r1, r26
 7b2:	aa 1b       	sub	r26, r26
 7b4:	bb 1b       	sub	r27, r27
 7b6:	fd 01       	movw	r30, r26
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <__udivmodsi4_ep>

000007ba <__udivmodsi4_loop>:
 7ba:	aa 1f       	adc	r26, r26
 7bc:	bb 1f       	adc	r27, r27
 7be:	ee 1f       	adc	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	a2 17       	cp	r26, r18
 7c4:	b3 07       	cpc	r27, r19
 7c6:	e4 07       	cpc	r30, r20
 7c8:	f5 07       	cpc	r31, r21
 7ca:	20 f0       	brcs	.+8      	; 0x7d4 <__udivmodsi4_ep>
 7cc:	a2 1b       	sub	r26, r18
 7ce:	b3 0b       	sbc	r27, r19
 7d0:	e4 0b       	sbc	r30, r20
 7d2:	f5 0b       	sbc	r31, r21

000007d4 <__udivmodsi4_ep>:
 7d4:	66 1f       	adc	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	88 1f       	adc	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	1a 94       	dec	r1
 7de:	69 f7       	brne	.-38     	; 0x7ba <__udivmodsi4_loop>
 7e0:	60 95       	com	r22
 7e2:	70 95       	com	r23
 7e4:	80 95       	com	r24
 7e6:	90 95       	com	r25
 7e8:	9b 01       	movw	r18, r22
 7ea:	ac 01       	movw	r20, r24
 7ec:	bd 01       	movw	r22, r26
 7ee:	cf 01       	movw	r24, r30
 7f0:	08 95       	ret

000007f2 <setjmp>:
 7f2:	dc 01       	movw	r26, r24
 7f4:	2d 92       	st	X+, r2
 7f6:	3d 92       	st	X+, r3
 7f8:	4d 92       	st	X+, r4
 7fa:	5d 92       	st	X+, r5
 7fc:	6d 92       	st	X+, r6
 7fe:	7d 92       	st	X+, r7
 800:	8d 92       	st	X+, r8
 802:	9d 92       	st	X+, r9
 804:	ad 92       	st	X+, r10
 806:	bd 92       	st	X+, r11
 808:	cd 92       	st	X+, r12
 80a:	dd 92       	st	X+, r13
 80c:	ed 92       	st	X+, r14
 80e:	fd 92       	st	X+, r15
 810:	0d 93       	st	X+, r16
 812:	1d 93       	st	X+, r17
 814:	cd 93       	st	X+, r28
 816:	dd 93       	st	X+, r29
 818:	ff 91       	pop	r31
 81a:	ef 91       	pop	r30
 81c:	8d b7       	in	r24, 0x3d	; 61
 81e:	8d 93       	st	X+, r24
 820:	8e b7       	in	r24, 0x3e	; 62
 822:	8d 93       	st	X+, r24
 824:	8f b7       	in	r24, 0x3f	; 63
 826:	8d 93       	st	X+, r24
 828:	ed 93       	st	X+, r30
 82a:	fd 93       	st	X+, r31
 82c:	88 27       	eor	r24, r24
 82e:	99 27       	eor	r25, r25
 830:	09 94       	ijmp

00000832 <longjmp>:
 832:	dc 01       	movw	r26, r24
 834:	cb 01       	movw	r24, r22
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	91 05       	cpc	r25, r1
 83a:	81 1d       	adc	r24, r1
 83c:	2d 90       	ld	r2, X+
 83e:	3d 90       	ld	r3, X+
 840:	4d 90       	ld	r4, X+
 842:	5d 90       	ld	r5, X+
 844:	6d 90       	ld	r6, X+
 846:	7d 90       	ld	r7, X+
 848:	8d 90       	ld	r8, X+
 84a:	9d 90       	ld	r9, X+
 84c:	ad 90       	ld	r10, X+
 84e:	bd 90       	ld	r11, X+
 850:	cd 90       	ld	r12, X+
 852:	dd 90       	ld	r13, X+
 854:	ed 90       	ld	r14, X+
 856:	fd 90       	ld	r15, X+
 858:	0d 91       	ld	r16, X+
 85a:	1d 91       	ld	r17, X+
 85c:	cd 91       	ld	r28, X+
 85e:	dd 91       	ld	r29, X+
 860:	ed 91       	ld	r30, X+
 862:	fd 91       	ld	r31, X+
 864:	0d 90       	ld	r0, X+
 866:	f8 94       	cli
 868:	fe bf       	out	0x3e, r31	; 62
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	ed bf       	out	0x3d, r30	; 61
 86e:	ed 91       	ld	r30, X+
 870:	fd 91       	ld	r31, X+
 872:	09 94       	ijmp

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
