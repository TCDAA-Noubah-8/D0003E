
Lab3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000094e  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000233  00800118  00800118  000009fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012db  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b28  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000737  00000000  00000000  00002917  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d3  00000000  00000000  00003284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c01  00000000  00000000  00003857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e4       	ldi	r30, 0x4E	; 78
  70:	f9 e0       	ldi	r31, 0x09	; 9
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ab 34       	cpi	r26, 0x4B	; 75
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  92:	0c 94 a5 04 	jmp	0x94a	; 0x94a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
void blink(void) {

	while(1){
		lock(&blinkM);
			//tända segment
		if(LCDDR13 != 0) { // om segment är på så stänger vi av denna
  9a:	c9 ef       	ldi	r28, 0xF9	; 249
  9c:	d0 e0       	ldi	r29, 0x00	; 0
			LCDDR13 = 0;
		} else {
			LCDDR13 = 0x01; //sätter på den om den var släckt
  9e:	11 e0       	ldi	r17, 0x01	; 1
}

void blink(void) {

	while(1){
		lock(&blinkM);
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	0e 94 57 03 	call	0x6ae	; 0x6ae <lock>
			//tända segment
		if(LCDDR13 != 0) { // om segment är på så stänger vi av denna
  a8:	88 81       	ld	r24, Y
  aa:	88 23       	and	r24, r24
  ac:	11 f0       	breq	.+4      	; 0xb2 <blink+0x18>
			LCDDR13 = 0;
  ae:	18 82       	st	Y, r1
  b0:	f7 cf       	rjmp	.-18     	; 0xa0 <blink+0x6>
		} else {
			LCDDR13 = 0x01; //sätter på den om den var släckt
  b2:	18 83       	st	Y, r17
  b4:	f5 cf       	rjmp	.-22     	; 0xa0 <blink+0x6>

000000b6 <writeChar>:

mutex blinkM = MUTEX_INIT;
mutex buttonM = MUTEX_INIT;
long btnCount = 0;

void writeChar(char ch, int pos){
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	64 97       	sbiw	r28, 0x14	; 20
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	char mask;
	uint16_t allSCC[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  cc:	94 e1       	ldi	r25, 0x14	; 20
  ce:	e4 e0       	ldi	r30, 0x04	; 4
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	9a 95       	dec	r25
  dc:	e1 f7       	brne	.-8      	; 0xd6 <writeChar+0x20>
	uint16_t number;
	char nibble = 0x0000;
	char out1 = 0x00, out2= 0x00, out3= 0x00, out4 = 0x00;
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
  de:	66 30       	cpi	r22, 0x06	; 6
  e0:	71 05       	cpc	r23, r1
  e2:	08 f0       	brcs	.+2      	; 0xe6 <writeChar+0x30>
  e4:	04 c1       	rjmp	.+520    	; 0x2ee <writeChar+0x238>
		return;
	}
	if(pos%2==0){
  e6:	60 ff       	sbrs	r22, 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <writeChar+0x38>
		mask = 0xF0;
	}
	else{
		mask = 0x0F;
  ea:	af e0       	ldi	r26, 0x0F	; 15
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <writeChar+0x3a>
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
		return;
	}
	if(pos%2==0){
		mask = 0xF0;
  ee:	a0 ef       	ldi	r26, 0xF0	; 240
	}
	else{
		mask = 0x0F;
	}

	if(isdigit(ch)){
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	a9 01       	movw	r20, r18
  f6:	40 53       	subi	r20, 0x30	; 48
  f8:	51 09       	sbc	r21, r1
  fa:	4a 30       	cpi	r20, 0x0A	; 10
  fc:	51 05       	cpc	r21, r1
  fe:	10 f4       	brcc	.+4      	; 0x104 <writeChar+0x4e>
		number = ch-'0';
 100:	9a 01       	movw	r18, r20
 102:	03 c0       	rjmp	.+6      	; 0x10a <writeChar+0x54>
	}
	else if((ch<0)|(ch>9)){
 104:	8a 30       	cpi	r24, 0x0A	; 10
 106:	08 f0       	brcs	.+2      	; 0x10a <writeChar+0x54>
 108:	f2 c0       	rjmp	.+484    	; 0x2ee <writeChar+0x238>
		return;
	}
	else{
		number = ch;
	}
	int mod = pos%2;
 10a:	cb 01       	movw	r24, r22
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	90 78       	andi	r25, 0x80	; 128
 110:	99 23       	and	r25, r25
 112:	24 f4       	brge	.+8      	; 0x11c <writeChar+0x66>
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	8e 6f       	ori	r24, 0xFE	; 254
 118:	9f 6f       	ori	r25, 0xFF	; 255
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	ac 01       	movw	r20, r24
	if(mod==1){
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	09 f0       	breq	.+2      	; 0x124 <writeChar+0x6e>
 122:	c8 c0       	rjmp	.+400    	; 0x2b4 <writeChar+0x1fe>
		pos-=1;
 124:	61 50       	subi	r22, 0x01	; 1
 126:	71 09       	sbc	r23, r1
 128:	c5 c0       	rjmp	.+394    	; 0x2b4 <writeChar+0x1fe>
			out4=nibble;
		}
	}

	if(pos==0){
		LCDDR0 = (out1<<(mod*4)) + (LCDDR0&mask);
 12a:	ca 01       	movw	r24, r20
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	4c ee       	ldi	r20, 0xEC	; 236
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	fa 01       	movw	r30, r20
 13a:	90 81       	ld	r25, Z
 13c:	e1 2f       	mov	r30, r17
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	08 2e       	mov	r0, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <writeChar+0x92>
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <writeChar+0x8e>
 14c:	9a 23       	and	r25, r26
 14e:	9e 0f       	add	r25, r30
 150:	fa 01       	movw	r30, r20
 152:	90 83       	st	Z, r25
		LCDDR5 = (out2<<(mod*4))+(LCDDR5&mask);
 154:	e1 ef       	ldi	r30, 0xF1	; 241
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	6b 2f       	mov	r22, r27
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	08 2e       	mov	r0, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <writeChar+0xb0>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <writeChar+0xac>
 16a:	9a 23       	and	r25, r26
 16c:	69 0f       	add	r22, r25
 16e:	60 83       	st	Z, r22
		LCDDR10 = (out3<<(mod*4))+(LCDDR10&mask);
 170:	e6 ef       	ldi	r30, 0xF6	; 246
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	90 81       	ld	r25, Z
 176:	43 2f       	mov	r20, r19
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	08 2e       	mov	r0, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <writeChar+0xcc>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <writeChar+0xc8>
 186:	9a 23       	and	r25, r26
 188:	49 0f       	add	r20, r25
 18a:	40 83       	st	Z, r20
		LCDDR15 = (out4<<(mod*4))+(LCDDR15&mask);
 18c:	eb ef       	ldi	r30, 0xFB	; 251
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	40 81       	ld	r20, Z
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	b9 01       	movw	r22, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <writeChar+0xe6>
 198:	66 0f       	add	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <writeChar+0xe2>
 1a0:	cb 01       	movw	r24, r22
 1a2:	a4 23       	and	r26, r20
 1a4:	8a 0f       	add	r24, r26
 1a6:	80 83       	st	Z, r24
 1a8:	a2 c0       	rjmp	.+324    	; 0x2ee <writeChar+0x238>

	}
	if(pos==2){
 1aa:	62 30       	cpi	r22, 0x02	; 2
 1ac:	71 05       	cpc	r23, r1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <writeChar+0xfc>
 1b0:	3f c0       	rjmp	.+126    	; 0x230 <writeChar+0x17a>
		LCDDR1 = (out1<<(mod*4))+ (LCDDR1&mask);
 1b2:	ca 01       	movw	r24, r20
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	4d ee       	ldi	r20, 0xED	; 237
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	fa 01       	movw	r30, r20
 1c2:	90 81       	ld	r25, Z
 1c4:	e1 2f       	mov	r30, r17
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	08 2e       	mov	r0, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <writeChar+0x11a>
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <writeChar+0x116>
 1d4:	9a 23       	and	r25, r26
 1d6:	9e 0f       	add	r25, r30
 1d8:	fa 01       	movw	r30, r20
 1da:	90 83       	st	Z, r25
		LCDDR6 = (out2<<(mod*4))+ (LCDDR6&mask);
 1dc:	e2 ef       	ldi	r30, 0xF2	; 242
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	90 81       	ld	r25, Z
 1e2:	6b 2f       	mov	r22, r27
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	08 2e       	mov	r0, r24
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <writeChar+0x138>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <writeChar+0x134>
 1f2:	9a 23       	and	r25, r26
 1f4:	69 0f       	add	r22, r25
 1f6:	60 83       	st	Z, r22
		LCDDR11 = (out3<<(mod*4))+ (LCDDR11&mask);
 1f8:	e7 ef       	ldi	r30, 0xF7	; 247
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	90 81       	ld	r25, Z
 1fe:	43 2f       	mov	r20, r19
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	08 2e       	mov	r0, r24
 204:	02 c0       	rjmp	.+4      	; 0x20a <writeChar+0x154>
 206:	44 0f       	add	r20, r20
 208:	55 1f       	adc	r21, r21
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <writeChar+0x150>
 20e:	3a 2f       	mov	r19, r26
 210:	39 23       	and	r19, r25
 212:	43 0f       	add	r20, r19
 214:	40 83       	st	Z, r20
		LCDDR16 = (out4<<(mod*4))+ (LCDDR16&mask);
 216:	ec ef       	ldi	r30, 0xFC	; 252
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	90 81       	ld	r25, Z
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <writeChar+0x16e>
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <writeChar+0x16a>
 228:	a9 23       	and	r26, r25
 22a:	2a 0f       	add	r18, r26
 22c:	20 83       	st	Z, r18
 22e:	5f c0       	rjmp	.+190    	; 0x2ee <writeChar+0x238>
	}
	if(pos==4){
 230:	64 30       	cpi	r22, 0x04	; 4
 232:	71 05       	cpc	r23, r1
 234:	09 f0       	breq	.+2      	; 0x238 <writeChar+0x182>
 236:	5b c0       	rjmp	.+182    	; 0x2ee <writeChar+0x238>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
 238:	ca 01       	movw	r24, r20
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	4e ee       	ldi	r20, 0xEE	; 238
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	fa 01       	movw	r30, r20
 248:	90 81       	ld	r25, Z
 24a:	e1 2f       	mov	r30, r17
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	08 2e       	mov	r0, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <writeChar+0x1a0>
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <writeChar+0x19c>
 25a:	9a 23       	and	r25, r26
 25c:	9e 0f       	add	r25, r30
 25e:	fa 01       	movw	r30, r20
 260:	90 83       	st	Z, r25
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
 262:	e3 ef       	ldi	r30, 0xF3	; 243
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	6b 2f       	mov	r22, r27
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	08 2e       	mov	r0, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <writeChar+0x1be>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <writeChar+0x1ba>
 278:	9a 23       	and	r25, r26
 27a:	69 0f       	add	r22, r25
 27c:	60 83       	st	Z, r22
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
 27e:	e8 ef       	ldi	r30, 0xF8	; 248
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	43 2f       	mov	r20, r19
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	08 2e       	mov	r0, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <writeChar+0x1da>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <writeChar+0x1d6>
 294:	9a 23       	and	r25, r26
 296:	49 0f       	add	r20, r25
 298:	40 83       	st	Z, r20
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
 29a:	ed ef       	ldi	r30, 0xFD	; 253
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	90 81       	ld	r25, Z
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <writeChar+0x1f2>
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <writeChar+0x1ee>
 2ac:	a9 23       	and	r26, r25
 2ae:	2a 0f       	add	r18, r26
 2b0:	20 83       	st	Z, r18
 2b2:	1d c0       	rjmp	.+58     	; 0x2ee <writeChar+0x238>
	if(mod==1){
		pos-=1;
	}


	charr = allSCC[number];
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	fe 01       	movw	r30, r28
 2ba:	e2 0f       	add	r30, r18
 2bc:	f3 1f       	adc	r31, r19
 2be:	81 81       	ldd	r24, Z+1	; 0x01
 2c0:	92 81       	ldd	r25, Z+2	; 0x02
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
 2c2:	18 2f       	mov	r17, r24
 2c4:	1f 70       	andi	r17, 0x0F	; 15
		charr = charr >> 4;
 2c6:	9c 01       	movw	r18, r24
 2c8:	32 95       	swap	r19
 2ca:	22 95       	swap	r18
 2cc:	2f 70       	andi	r18, 0x0F	; 15
 2ce:	23 27       	eor	r18, r19
 2d0:	3f 70       	andi	r19, 0x0F	; 15
 2d2:	23 27       	eor	r18, r19
	}


	charr = allSCC[number];
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
 2d4:	b2 2f       	mov	r27, r18
 2d6:	bf 70       	andi	r27, 0x0F	; 15
 2d8:	39 2f       	mov	r19, r25
 2da:	3f 70       	andi	r19, 0x0F	; 15
 2dc:	29 2f       	mov	r18, r25
 2de:	22 95       	swap	r18
 2e0:	2f 70       	andi	r18, 0x0F	; 15
 2e2:	2f 70       	andi	r18, 0x0F	; 15
		if(i==3){
			out4=nibble;
		}
	}

	if(pos==0){
 2e4:	61 15       	cp	r22, r1
 2e6:	71 05       	cpc	r23, r1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <writeChar+0x236>
 2ea:	1f cf       	rjmp	.-450    	; 0x12a <writeChar+0x74>
 2ec:	5e cf       	rjmp	.-324    	; 0x1aa <writeChar+0xf4>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
	}
}
 2ee:	64 96       	adiw	r28, 0x14	; 20
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	08 95       	ret

00000302 <is_prime>:

bool is_prime(long i){
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	6b 01       	movw	r12, r22
 310:	7c 01       	movw	r14, r24
	if(i>0){
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	c8 16       	cp	r12, r24
 316:	d1 04       	cpc	r13, r1
 318:	e1 04       	cpc	r14, r1
 31a:	f1 04       	cpc	r15, r1
 31c:	74 f1       	brlt	.+92     	; 0x37a <is_prime+0x78>
		for(int j = 2;j<i;j++){
			if((i%j)==0){
 31e:	d7 01       	movw	r26, r14
 320:	c6 01       	movw	r24, r12
 322:	81 70       	andi	r24, 0x01	; 1
 324:	99 27       	eor	r25, r25
 326:	aa 27       	eor	r26, r26
 328:	b0 78       	andi	r27, 0x80	; 128
 32a:	bb 23       	and	r27, r27
 32c:	54 f4       	brge	.+20     	; 0x342 <is_prime+0x40>
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	a1 09       	sbc	r26, r1
 332:	b1 09       	sbc	r27, r1
 334:	8e 6f       	ori	r24, 0xFE	; 254
 336:	9f 6f       	ori	r25, 0xFF	; 255
 338:	af 6f       	ori	r26, 0xFF	; 255
 33a:	bf 6f       	ori	r27, 0xFF	; 255
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	a1 1d       	adc	r26, r1
 340:	b1 1d       	adc	r27, r1
 342:	89 2b       	or	r24, r25
 344:	8a 2b       	or	r24, r26
 346:	8b 2b       	or	r24, r27
 348:	d1 f0       	breq	.+52     	; 0x37e <is_prime+0x7c>
 34a:	c2 e0       	ldi	r28, 0x02	; 2
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	08 c0       	rjmp	.+16     	; 0x360 <is_prime+0x5e>
 350:	c7 01       	movw	r24, r14
 352:	b6 01       	movw	r22, r12
 354:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
 358:	67 2b       	or	r22, r23
 35a:	68 2b       	or	r22, r24
 35c:	69 2b       	or	r22, r25
 35e:	89 f0       	breq	.+34     	; 0x382 <is_prime+0x80>
	}
}

bool is_prime(long i){
	if(i>0){
		for(int j = 2;j<i;j++){
 360:	21 96       	adiw	r28, 0x01	; 1
 362:	9e 01       	movw	r18, r28
 364:	0d 2e       	mov	r0, r29
 366:	00 0c       	add	r0, r0
 368:	44 0b       	sbc	r20, r20
 36a:	55 0b       	sbc	r21, r21
 36c:	2c 15       	cp	r18, r12
 36e:	3d 05       	cpc	r19, r13
 370:	4e 05       	cpc	r20, r14
 372:	5f 05       	cpc	r21, r15
 374:	6c f3       	brlt	.-38     	; 0x350 <is_prime+0x4e>
			if((i%j)==0){
				return false; //inte prime
			}
		}
	}
	return true;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	05 c0       	rjmp	.+10     	; 0x384 <is_prime+0x82>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	03 c0       	rjmp	.+6      	; 0x384 <is_prime+0x82>

bool is_prime(long i){
	if(i>0){
		for(int j = 2;j<i;j++){
			if((i%j)==0){
				return false; //inte prime
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	01 c0       	rjmp	.+2      	; 0x384 <is_prime+0x82>
 382:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return true;
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	08 95       	ret

00000392 <printAt>:
int pp;

void printAt(long num, int pos) {
 392:	8f 92       	push	r8
 394:	9f 92       	push	r9
 396:	af 92       	push	r10
 398:	bf 92       	push	r11
 39a:	cf 92       	push	r12
 39c:	df 92       	push	r13
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	4b 01       	movw	r8, r22
 3a8:	5c 01       	movw	r10, r24
 3aa:	ea 01       	movw	r28, r20
    pp = pos;
 3ac:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <pp+0x1>
 3b0:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 3b4:	24 e6       	ldi	r18, 0x64	; 100
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
 3c0:	0f 2e       	mov	r0, r31
 3c2:	fa e0       	ldi	r31, 0x0A	; 10
 3c4:	cf 2e       	mov	r12, r31
 3c6:	d1 2c       	mov	r13, r1
 3c8:	e1 2c       	mov	r14, r1
 3ca:	f1 2c       	mov	r15, r1
 3cc:	f0 2d       	mov	r31, r0
 3ce:	a7 01       	movw	r20, r14
 3d0:	96 01       	movw	r18, r12
 3d2:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
 3d6:	be 01       	movw	r22, r28
 3d8:	80 e3       	ldi	r24, 0x30	; 48
 3da:	82 0f       	add	r24, r18
 3dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <writeChar>
    pp++;
 3e0:	c0 91 28 01 	lds	r28, 0x0128	; 0x800128 <pp>
 3e4:	d0 91 29 01 	lds	r29, 0x0129	; 0x800129 <pp+0x1>
 3e8:	21 96       	adiw	r28, 0x01	; 1
 3ea:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <pp+0x1>
 3ee:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <pp>
    writeChar( num % 10 + '0', pp);
 3f2:	c5 01       	movw	r24, r10
 3f4:	b4 01       	movw	r22, r8
 3f6:	a7 01       	movw	r20, r14
 3f8:	96 01       	movw	r18, r12
 3fa:	0e 94 23 04 	call	0x846	; 0x846 <__divmodsi4>
 3fe:	86 2f       	mov	r24, r22
 400:	be 01       	movw	r22, r28
 402:	80 5d       	subi	r24, 0xD0	; 208
 404:	0e 94 5b 00 	call	0xb6	; 0xb6 <writeChar>
	
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	9f 90       	pop	r9
 41a:	8f 90       	pop	r8
 41c:	08 95       	ret

0000041e <button>:
			LCDDR13 = 0x01; //sätter på den om den var släckt
		}
	}
}

void button(int pos) {
 41e:	ec 01       	movw	r28, r24
	while(1){
		lock(&buttonM);
 420:	8c e1       	ldi	r24, 0x1C	; 28
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 57 03 	call	0x6ae	; 0x6ae <lock>
		printAt(btnCount, pos);
 428:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 42c:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 430:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 434:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 438:	ae 01       	movw	r20, r28
 43a:	0e 94 c9 01 	call	0x392	; 0x392 <printAt>
 43e:	f0 cf       	rjmp	.-32     	; 0x420 <button+0x2>

00000440 <computePrimes>:
    pp++;
    writeChar( num % 10 + '0', pp);
	
}

void computePrimes(int pos) {
 440:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 442:	c1 2c       	mov	r12, r1
 444:	d1 2c       	mov	r13, r1
 446:	76 01       	movw	r14, r12
 448:	c3 94       	inc	r12
        if (is_prime(n)) {
 44a:	c7 01       	movw	r24, r14
 44c:	b6 01       	movw	r22, r12
 44e:	0e 94 81 01 	call	0x302	; 0x302 <is_prime>
 452:	88 23       	and	r24, r24
 454:	29 f0       	breq	.+10     	; 0x460 <computePrimes+0x20>
            printAt(n, pos);
 456:	ae 01       	movw	r20, r28
 458:	c7 01       	movw	r24, r14
 45a:	b6 01       	movw	r22, r12
 45c:	0e 94 c9 01 	call	0x392	; 0x392 <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	c8 1a       	sub	r12, r24
 464:	d8 0a       	sbc	r13, r24
 466:	e8 0a       	sbc	r14, r24
 468:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
			//yield();
        }
    }
 46a:	ef cf       	rjmp	.-34     	; 0x44a <computePrimes+0xa>

0000046c <init>:
		printAt(btnCount, pos);
	}
}

void init(void) {
	TCCR1A = (1 << COM1A1) | (1 << COM1A0); 
 46c:	80 ec       	ldi	r24, 0xC0	; 192
 46e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); 
 472:	8d e0       	ldi	r24, 0x0D	; 13
 474:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1A = 8000000/2048;
 478:	82 e4       	ldi	r24, 0x42	; 66
 47a:	9f e0       	ldi	r25, 0x0F	; 15
 47c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 480:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0x0;
 484:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 488:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 = (1 << OCIE1A); 
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 492:	08 95       	ret

00000494 <main>:
}

int main() {
	init();
 494:	0e 94 36 02 	call	0x46c	; 0x46c <init>
	
    spawn(blink, 0);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	8d e4       	ldi	r24, 0x4D	; 77
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spawn>
    spawn(button, 4);
 4a4:	64 e0       	ldi	r22, 0x04	; 4
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	8f e0       	ldi	r24, 0x0F	; 15
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <spawn>
	computePrimes(0);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 20 02 	call	0x440	; 0x440 <computePrimes>

000004b8 <dispatch>:
		while (1) ;  // not much else to do...
	}
	return p;
}

static void dispatch(thread next) {
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	00 d0       	rcall	.+0      	; 0x4be <dispatch+0x6>
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	9a 83       	std	Y+2, r25	; 0x02
 4c4:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 4c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4ce:	06 96       	adiw	r24, 0x06	; 6
 4d0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <setjmp>
 4d4:	89 2b       	or	r24, r25
 4d6:	59 f4       	brne	.+22     	; 0x4ee <dispatch+0x36>
        current = next;
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	9a 81       	ldd	r25, Y+2	; 0x02
 4dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	06 96       	adiw	r24, 0x06	; 6
 4ea:	0e 94 84 04 	call	0x908	; 0x908 <longjmp>
    }
}
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <spawn>:

void spawn(void (* function)(int), int arg) {
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <spawn+0x6>
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	ac 01       	movw	r20, r24
    thread newp;

    DISABLE();
 504:	f8 94       	cli
    if (!initialized) initialize();
 506:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <initialized>
 50a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <initialized+0x1>
 50e:	89 2b       	or	r24, r25
 510:	89 f5       	brne	.+98     	; 0x574 <__stack+0x75>
int blinkVsr = 0;

static void initialize(void) {
	    int i;
	    for (i=0; i<NTHREADS-1; i++)
	    threads[i].next = &threads[i+1];
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <threads+0x5>
 51a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <threads+0x4>
 51e:	81 e7       	ldi	r24, 0x71	; 113
 520:	92 e0       	ldi	r25, 0x02	; 2
 522:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <threads+0x72>
 526:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <threads+0x71>
 52a:	8e ed       	ldi	r24, 0xDE	; 222
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <threads+0xdf>
 532:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <threads+0xde>
	    threads[NTHREADS-1].next = NULL;
 536:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <threads+0x14c>
 53a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <threads+0x14b>


	    initialized = 1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <initialized+0x1>
 546:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <initialized>
	
	CLKPR=0x80;
 54a:	e1 e6       	ldi	r30, 0x61	; 97
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	90 e8       	ldi	r25, 0x80	; 128
 550:	90 83       	st	Z, r25
	CLKPR=0x00;
 552:	10 82       	st	Z, r1
	
	EIMSK = (1 << PCIE1);
 554:	9d bb       	out	0x1d, r25	; 29
	PCMSK1 = (1 << PCINT15);	
 556:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
	PORTB = (1<<PORTB7);
 55a:	95 b9       	out	0x05, r25	; 5
	
	
	LCDCRA= (1<<LCDEN) | (1<<LCDAB);
 55c:	80 ec       	ldi	r24, 0xC0	; 192
 55e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB= (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0) | (1<<LCDCS);
 562:	87 eb       	ldi	r24, 0xB7	; 183
 564:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDCCR= (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 568:	8f e0       	ldi	r24, 0x0F	; 15
 56a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 56e:	87 e0       	ldi	r24, 0x07	; 7
 570:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	    *queue = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 574:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 578:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 57c:	9a 83       	std	Y+2, r25	; 0x02
 57e:	89 83       	std	Y+1, r24	; 0x01
	if (*queue) {
 580:	00 97       	sbiw	r24, 0x00	; 0
 582:	a1 f0       	breq	.+40     	; 0x5ac <__stack+0xad>
		*queue = (*queue)->next;
 584:	fc 01       	movw	r30, r24
 586:	84 81       	ldd	r24, Z+4	; 0x04
 588:	95 81       	ldd	r25, Z+5	; 0x05
 58a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 58e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 592:	51 83       	std	Z+1, r21	; 0x01
 594:	40 83       	st	Z, r20
    newp->arg = arg;
 596:	73 83       	std	Z+3, r23	; 0x03
 598:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 59a:	15 82       	std	Z+5, r1	; 0x05
 59c:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 59e:	cf 01       	movw	r24, r30
 5a0:	06 96       	adiw	r24, 0x06	; 6
 5a2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <setjmp>
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	c1 f5       	brne	.+112    	; 0x61a <__stack+0x11b>
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <__stack+0xaf>
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stack+0xad>
        ENABLE();
 5ae:	78 94       	sei
        current->function(current->arg);
 5b0:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 5b4:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 5b8:	ed 91       	ld	r30, X+
 5ba:	fc 91       	ld	r31, X
 5bc:	11 97       	sbiw	r26, 0x01	; 1
 5be:	12 96       	adiw	r26, 0x02	; 2
 5c0:	8d 91       	ld	r24, X+
 5c2:	9c 91       	ld	r25, X
 5c4:	13 97       	sbiw	r26, 0x03	; 3
 5c6:	09 95       	icall
        DISABLE();
 5c8:	f8 94       	cli
        enqueue(current, &freeQ);
 5ca:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 5ce:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5d2:	15 82       	std	Z+5, r1	; 0x05
 5d4:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 5d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 5da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 5de:	00 97       	sbiw	r24, 0x00	; 0
 5e0:	29 f4       	brne	.+10     	; 0x5ec <__stack+0xed>
	    *queue = p;
 5e2:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 5e6:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
 5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <__stack+0xf9>
	    } else {
	    thread q = *queue;
	    p->next = q;
 5ec:	95 83       	std	Z+5, r25	; 0x05
 5ee:	84 83       	std	Z+4, r24	; 0x04
	    *queue = p;
 5f0:	f0 93 03 01 	sts	0x0103, r31	; 0x800103 <freeQ+0x1>
 5f4:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <freeQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5f8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 5fc:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
	if (*queue) {
 600:	00 97       	sbiw	r24, 0x00	; 0
 602:	51 f0       	breq	.+20     	; 0x618 <__stack+0x119>
		*queue = (*queue)->next;
 604:	fc 01       	movw	r30, r24
 606:	24 81       	ldd	r18, Z+4	; 0x04
 608:	35 81       	ldd	r19, Z+5	; 0x05
 60a:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <readyQ+0x1>
 60e:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 612:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <dispatch>
 616:	01 c0       	rjmp	.+2      	; 0x61a <__stack+0x11b>
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stack+0x119>
    }
    SETSTACK(&newp->context, &newp->stack);
 61a:	e9 81       	ldd	r30, Y+1	; 0x01
 61c:	fa 81       	ldd	r31, Y+2	; 0x02
 61e:	36 96       	adiw	r30, 0x06	; 6
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	9a 81       	ldd	r25, Y+2	; 0x02
 624:	87 59       	subi	r24, 0x97	; 151
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	91 8b       	std	Z+17, r25	; 0x11
 62a:	80 8b       	std	Z+16, r24	; 0x10
 62c:	93 8b       	std	Z+19, r25	; 0x13
 62e:	82 8b       	std	Z+18, r24	; 0x12
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 630:	e9 81       	ldd	r30, Y+1	; 0x01
 632:	fa 81       	ldd	r31, Y+2	; 0x02
 634:	15 82       	std	Z+5, r1	; 0x05
 636:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 638:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 63c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	29 f4       	brne	.+10     	; 0x64e <__stack+0x14f>
	    *queue = p;
 644:	f0 93 27 01 	sts	0x0127, r31	; 0x800127 <readyQ+0x1>
 648:	e0 93 26 01 	sts	0x0126, r30	; 0x800126 <readyQ>
 64c:	08 c0       	rjmp	.+16     	; 0x65e <__stack+0x15f>
	    } else {
	    thread q = *queue;
	    p->next = q;
 64e:	e9 81       	ldd	r30, Y+1	; 0x01
 650:	fa 81       	ldd	r31, Y+2	; 0x02
 652:	95 83       	std	Z+5, r25	; 0x05
 654:	84 83       	std	Z+4, r24	; 0x04
	    *queue = p;
 656:	f0 93 27 01 	sts	0x0127, r31	; 0x800127 <readyQ+0x1>
 65a:	e0 93 26 01 	sts	0x0126, r30	; 0x800126 <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 65e:	78 94       	sei
}
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <yield>:

void yield(void) {
		DISABLE();
 66a:	f8 94       	cli
		if (readyQ != NULL){
 66c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 670:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	c9 f0       	breq	.+50     	; 0x6aa <yield+0x40>
}

static thread dequeue(thread *queue) {
    thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 678:	fc 01       	movw	r30, r24
 67a:	24 81       	ldd	r18, Z+4	; 0x04
 67c:	35 81       	ldd	r19, Z+5	; 0x05

void yield(void) {
		DISABLE();
		if (readyQ != NULL){
			thread p = dequeue(&readyQ);
			enqueue(current, &readyQ);
 67e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 682:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 686:	15 82       	std	Z+5, r1	; 0x05
 688:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 68a:	21 15       	cp	r18, r1
 68c:	31 05       	cpc	r19, r1
 68e:	29 f4       	brne	.+10     	; 0x69a <yield+0x30>
	    *queue = p;
 690:	f0 93 27 01 	sts	0x0127, r31	; 0x800127 <readyQ+0x1>
 694:	e0 93 26 01 	sts	0x0126, r30	; 0x800126 <readyQ>
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <yield+0x3c>
	    } else {
	    thread q = *queue;
	    p->next = q;
 69a:	35 83       	std	Z+5, r19	; 0x05
 69c:	24 83       	std	Z+4, r18	; 0x04
	    *queue = p;
 69e:	f0 93 27 01 	sts	0x0127, r31	; 0x800127 <readyQ+0x1>
 6a2:	e0 93 26 01 	sts	0x0126, r30	; 0x800126 <readyQ>
void yield(void) {
		DISABLE();
		if (readyQ != NULL){
			thread p = dequeue(&readyQ);
			enqueue(current, &readyQ);
			dispatch(p);
 6a6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <dispatch>
		}
		ENABLE();
 6aa:	78 94       	sei
 6ac:	08 95       	ret

000006ae <lock>:
}

void lock(mutex *m) {
 6ae:	fc 01       	movw	r30, r24
	DISABLE();
 6b0:	f8 94       	cli
	if (m->locked == 0) {
 6b2:	80 81       	ld	r24, Z
 6b4:	91 81       	ldd	r25, Z+1	; 0x01
 6b6:	89 2b       	or	r24, r25
 6b8:	29 f4       	brne	.+10     	; 0x6c4 <lock+0x16>
		m->locked = 1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	91 83       	std	Z+1, r25	; 0x01
 6c0:	80 83       	st	Z, r24
 6c2:	26 c0       	rjmp	.+76     	; 0x710 <lock+0x62>
		} else {
		enqueue(current, &(m->waitQ));
 6c4:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 6c8:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 6cc:	15 96       	adiw	r26, 0x05	; 5
 6ce:	1c 92       	st	X, r1
 6d0:	1e 92       	st	-X, r1
 6d2:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 6d4:	82 81       	ldd	r24, Z+2	; 0x02
 6d6:	93 81       	ldd	r25, Z+3	; 0x03
 6d8:	00 97       	sbiw	r24, 0x00	; 0
 6da:	19 f4       	brne	.+6      	; 0x6e2 <lock+0x34>
	    *queue = p;
 6dc:	b3 83       	std	Z+3, r27	; 0x03
 6de:	a2 83       	std	Z+2, r26	; 0x02
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <lock+0x40>
	    } else {
	    thread q = *queue;
	    p->next = q;
 6e2:	15 96       	adiw	r26, 0x05	; 5
 6e4:	9c 93       	st	X, r25
 6e6:	8e 93       	st	-X, r24
 6e8:	14 97       	sbiw	r26, 0x04	; 4
	    *queue = p;
 6ea:	b3 83       	std	Z+3, r27	; 0x03
 6ec:	a2 83       	std	Z+2, r26	; 0x02
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6ee:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 6f2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
	if (*queue) {
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	51 f0       	breq	.+20     	; 0x70e <lock+0x60>
		*queue = (*queue)->next;
 6fa:	fc 01       	movw	r30, r24
 6fc:	24 81       	ldd	r18, Z+4	; 0x04
 6fe:	35 81       	ldd	r19, Z+5	; 0x05
 700:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <readyQ+0x1>
 704:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <readyQ>
	DISABLE();
	if (m->locked == 0) {
		m->locked = 1;
		} else {
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 708:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <dispatch>
 70c:	01 c0       	rjmp	.+2      	; 0x710 <lock+0x62>
 70e:	ff cf       	rjmp	.-2      	; 0x70e <lock+0x60>
	}
	ENABLE();
 710:	78 94       	sei
 712:	08 95       	ret

00000714 <unlock>:
	unlock(&blinkM);
	yield();
}


void unlock(mutex *m) {
 714:	fc 01       	movw	r30, r24
	DISABLE();
 716:	f8 94       	cli
	if (m->waitQ != NULL) {
 718:	82 81       	ldd	r24, Z+2	; 0x02
 71a:	93 81       	ldd	r25, Z+3	; 0x03
 71c:	89 2b       	or	r24, r25
 71e:	51 f1       	breq	.+84     	; 0x774 <unlock+0x60>
		enqueue(current, &readyQ);
 720:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 724:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 728:	15 96       	adiw	r26, 0x05	; 5
 72a:	1c 92       	st	X, r1
 72c:	1e 92       	st	-X, r1
 72e:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 730:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 734:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
 738:	00 97       	sbiw	r24, 0x00	; 0
 73a:	29 f4       	brne	.+10     	; 0x746 <unlock+0x32>
	    *queue = p;
 73c:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <readyQ+0x1>
 740:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <readyQ>
 744:	08 c0       	rjmp	.+16     	; 0x756 <unlock+0x42>
	    } else {
	    thread q = *queue;
	    p->next = q;
 746:	15 96       	adiw	r26, 0x05	; 5
 748:	9c 93       	st	X, r25
 74a:	8e 93       	st	-X, r24
 74c:	14 97       	sbiw	r26, 0x04	; 4
	    *queue = p;
 74e:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <readyQ+0x1>
 752:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <readyQ>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 756:	82 81       	ldd	r24, Z+2	; 0x02
 758:	93 81       	ldd	r25, Z+3	; 0x03
	if (*queue) {
 75a:	00 97       	sbiw	r24, 0x00	; 0
 75c:	51 f0       	breq	.+20     	; 0x772 <unlock+0x5e>
		*queue = (*queue)->next;
 75e:	dc 01       	movw	r26, r24
 760:	14 96       	adiw	r26, 0x04	; 4
 762:	2d 91       	ld	r18, X+
 764:	3c 91       	ld	r19, X
 766:	15 97       	sbiw	r26, 0x05	; 5
 768:	33 83       	std	Z+3, r19	; 0x03
 76a:	22 83       	std	Z+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if (m->waitQ != NULL) {
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 76c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <dispatch>
 770:	03 c0       	rjmp	.+6      	; 0x778 <unlock+0x64>
 772:	ff cf       	rjmp	.-2      	; 0x772 <unlock+0x5e>
	} else {
		m->locked = 0;
 774:	11 82       	std	Z+1, r1	; 0x01
 776:	10 82       	st	Z, r1
	}
	ENABLE();
 778:	78 94       	sei
 77a:	08 95       	ret

0000077c <__vector_3>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

ISR(PCINT1_vect) {
 77c:	1f 92       	push	r1
 77e:	0f 92       	push	r0
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	0f 92       	push	r0
 784:	11 24       	eor	r1, r1
 786:	2f 93       	push	r18
 788:	3f 93       	push	r19
 78a:	4f 93       	push	r20
 78c:	5f 93       	push	r21
 78e:	6f 93       	push	r22
 790:	7f 93       	push	r23
 792:	8f 93       	push	r24
 794:	9f 93       	push	r25
 796:	af 93       	push	r26
 798:	bf 93       	push	r27
 79a:	ef 93       	push	r30
 79c:	ff 93       	push	r31
	//code for interrupt handler
	if(PINB >> 7 == 0){
 79e:	1f 99       	sbic	0x03, 7	; 3
 7a0:	19 c0       	rjmp	.+50     	; 0x7d4 <__vector_3+0x58>
		btnCount++;
 7a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 7a6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 7aa:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 7ae:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	a1 1d       	adc	r26, r1
 7b6:	b1 1d       	adc	r27, r1
 7b8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 7bc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 7c0:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 7c4:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
		unlock(&buttonM);
 7c8:	8c e1       	ldi	r24, 0x1C	; 28
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	0e 94 8a 03 	call	0x714	; 0x714 <unlock>
		yield();
 7d0:	0e 94 35 03 	call	0x66a	; 0x66a <yield>
	}
}
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	7f 91       	pop	r23
 7e2:	6f 91       	pop	r22
 7e4:	5f 91       	pop	r21
 7e6:	4f 91       	pop	r20
 7e8:	3f 91       	pop	r19
 7ea:	2f 91       	pop	r18
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_7>:
ISR(TIMER1_COMPA_vect) {
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
	unlock(&blinkM);
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 8a 03 	call	0x714	; 0x714 <unlock>
	yield();
 820:	0e 94 35 03 	call	0x66a	; 0x66a <yield>
}
 824:	ff 91       	pop	r31
 826:	ef 91       	pop	r30
 828:	bf 91       	pop	r27
 82a:	af 91       	pop	r26
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	7f 91       	pop	r23
 832:	6f 91       	pop	r22
 834:	5f 91       	pop	r21
 836:	4f 91       	pop	r20
 838:	3f 91       	pop	r19
 83a:	2f 91       	pop	r18
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <__divmodsi4>:
 846:	05 2e       	mov	r0, r21
 848:	97 fb       	bst	r25, 7
 84a:	1e f4       	brtc	.+6      	; 0x852 <__divmodsi4+0xc>
 84c:	00 94       	com	r0
 84e:	0e 94 3a 04 	call	0x874	; 0x874 <__negsi2>
 852:	57 fd       	sbrc	r21, 7
 854:	07 d0       	rcall	.+14     	; 0x864 <__divmodsi4_neg2>
 856:	0e 94 42 04 	call	0x884	; 0x884 <__udivmodsi4>
 85a:	07 fc       	sbrc	r0, 7
 85c:	03 d0       	rcall	.+6      	; 0x864 <__divmodsi4_neg2>
 85e:	4e f4       	brtc	.+18     	; 0x872 <__divmodsi4_exit>
 860:	0c 94 3a 04 	jmp	0x874	; 0x874 <__negsi2>

00000864 <__divmodsi4_neg2>:
 864:	50 95       	com	r21
 866:	40 95       	com	r20
 868:	30 95       	com	r19
 86a:	21 95       	neg	r18
 86c:	3f 4f       	sbci	r19, 0xFF	; 255
 86e:	4f 4f       	sbci	r20, 0xFF	; 255
 870:	5f 4f       	sbci	r21, 0xFF	; 255

00000872 <__divmodsi4_exit>:
 872:	08 95       	ret

00000874 <__negsi2>:
 874:	90 95       	com	r25
 876:	80 95       	com	r24
 878:	70 95       	com	r23
 87a:	61 95       	neg	r22
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	08 95       	ret

00000884 <__udivmodsi4>:
 884:	a1 e2       	ldi	r26, 0x21	; 33
 886:	1a 2e       	mov	r1, r26
 888:	aa 1b       	sub	r26, r26
 88a:	bb 1b       	sub	r27, r27
 88c:	fd 01       	movw	r30, r26
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <__udivmodsi4_ep>

00000890 <__udivmodsi4_loop>:
 890:	aa 1f       	adc	r26, r26
 892:	bb 1f       	adc	r27, r27
 894:	ee 1f       	adc	r30, r30
 896:	ff 1f       	adc	r31, r31
 898:	a2 17       	cp	r26, r18
 89a:	b3 07       	cpc	r27, r19
 89c:	e4 07       	cpc	r30, r20
 89e:	f5 07       	cpc	r31, r21
 8a0:	20 f0       	brcs	.+8      	; 0x8aa <__udivmodsi4_ep>
 8a2:	a2 1b       	sub	r26, r18
 8a4:	b3 0b       	sbc	r27, r19
 8a6:	e4 0b       	sbc	r30, r20
 8a8:	f5 0b       	sbc	r31, r21

000008aa <__udivmodsi4_ep>:
 8aa:	66 1f       	adc	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	1a 94       	dec	r1
 8b4:	69 f7       	brne	.-38     	; 0x890 <__udivmodsi4_loop>
 8b6:	60 95       	com	r22
 8b8:	70 95       	com	r23
 8ba:	80 95       	com	r24
 8bc:	90 95       	com	r25
 8be:	9b 01       	movw	r18, r22
 8c0:	ac 01       	movw	r20, r24
 8c2:	bd 01       	movw	r22, r26
 8c4:	cf 01       	movw	r24, r30
 8c6:	08 95       	ret

000008c8 <setjmp>:
 8c8:	dc 01       	movw	r26, r24
 8ca:	2d 92       	st	X+, r2
 8cc:	3d 92       	st	X+, r3
 8ce:	4d 92       	st	X+, r4
 8d0:	5d 92       	st	X+, r5
 8d2:	6d 92       	st	X+, r6
 8d4:	7d 92       	st	X+, r7
 8d6:	8d 92       	st	X+, r8
 8d8:	9d 92       	st	X+, r9
 8da:	ad 92       	st	X+, r10
 8dc:	bd 92       	st	X+, r11
 8de:	cd 92       	st	X+, r12
 8e0:	dd 92       	st	X+, r13
 8e2:	ed 92       	st	X+, r14
 8e4:	fd 92       	st	X+, r15
 8e6:	0d 93       	st	X+, r16
 8e8:	1d 93       	st	X+, r17
 8ea:	cd 93       	st	X+, r28
 8ec:	dd 93       	st	X+, r29
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	8d b7       	in	r24, 0x3d	; 61
 8f4:	8d 93       	st	X+, r24
 8f6:	8e b7       	in	r24, 0x3e	; 62
 8f8:	8d 93       	st	X+, r24
 8fa:	8f b7       	in	r24, 0x3f	; 63
 8fc:	8d 93       	st	X+, r24
 8fe:	ed 93       	st	X+, r30
 900:	fd 93       	st	X+, r31
 902:	88 27       	eor	r24, r24
 904:	99 27       	eor	r25, r25
 906:	09 94       	ijmp

00000908 <longjmp>:
 908:	dc 01       	movw	r26, r24
 90a:	cb 01       	movw	r24, r22
 90c:	81 30       	cpi	r24, 0x01	; 1
 90e:	91 05       	cpc	r25, r1
 910:	81 1d       	adc	r24, r1
 912:	2d 90       	ld	r2, X+
 914:	3d 90       	ld	r3, X+
 916:	4d 90       	ld	r4, X+
 918:	5d 90       	ld	r5, X+
 91a:	6d 90       	ld	r6, X+
 91c:	7d 90       	ld	r7, X+
 91e:	8d 90       	ld	r8, X+
 920:	9d 90       	ld	r9, X+
 922:	ad 90       	ld	r10, X+
 924:	bd 90       	ld	r11, X+
 926:	cd 90       	ld	r12, X+
 928:	dd 90       	ld	r13, X+
 92a:	ed 90       	ld	r14, X+
 92c:	fd 90       	ld	r15, X+
 92e:	0d 91       	ld	r16, X+
 930:	1d 91       	ld	r17, X+
 932:	cd 91       	ld	r28, X+
 934:	dd 91       	ld	r29, X+
 936:	ed 91       	ld	r30, X+
 938:	fd 91       	ld	r31, X+
 93a:	0d 90       	ld	r0, X+
 93c:	f8 94       	cli
 93e:	fe bf       	out	0x3e, r31	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	ed bf       	out	0x3d, r30	; 61
 944:	ed 91       	ld	r30, X+
 946:	fd 91       	ld	r31, X+
 948:	09 94       	ijmp

0000094a <_exit>:
 94a:	f8 94       	cli

0000094c <__stop_program>:
 94c:	ff cf       	rjmp	.-2      	; 0x94c <__stop_program>
