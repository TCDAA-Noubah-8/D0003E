
Lab3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000098c  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000231  00800118  00800118  00000a38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001374  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bab  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000865  00000000  00000000  00002a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  000032f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005dd  00000000  00000000  00003574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c43  00000000  00000000  00003b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e8       	ldi	r30, 0x8C	; 140
  70:	f9 e0       	ldi	r31, 0x09	; 9
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a9 34       	cpi	r26, 0x49	; 73
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 8c 02 	call	0x518	; 0x518 <main>
  92:	0c 94 c4 04 	jmp	0x988	; 0x988 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
				} else{
				LCDDR13 = 0x01; //sätter på den om den var släckt
			}
		}
		if(TCNT1<boundary){
			wrapstatus=0;
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	64 97       	sbiw	r28, 0x14	; 20
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	94 e1       	ldi	r25, 0x14	; 20
  b2:	e4 e0       	ldi	r30, 0x04	; 4
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	9a 95       	dec	r25
  c0:	e1 f7       	brne	.-8      	; 0xba <writeChar+0x20>
  c2:	66 30       	cpi	r22, 0x06	; 6
  c4:	71 05       	cpc	r23, r1
  c6:	08 f0       	brcs	.+2      	; 0xca <writeChar+0x30>
  c8:	04 c1       	rjmp	.+520    	; 0x2d2 <writeChar+0x238>
  ca:	60 ff       	sbrs	r22, 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <writeChar+0x38>
  ce:	af e0       	ldi	r26, 0x0F	; 15
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <writeChar+0x3a>
  d2:	a0 ef       	ldi	r26, 0xF0	; 240
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	a9 01       	movw	r20, r18
  da:	40 53       	subi	r20, 0x30	; 48
  dc:	51 09       	sbc	r21, r1
  de:	4a 30       	cpi	r20, 0x0A	; 10
  e0:	51 05       	cpc	r21, r1
  e2:	10 f4       	brcc	.+4      	; 0xe8 <writeChar+0x4e>
  e4:	9a 01       	movw	r18, r20
  e6:	03 c0       	rjmp	.+6      	; 0xee <writeChar+0x54>
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	08 f0       	brcs	.+2      	; 0xee <writeChar+0x54>
  ec:	f2 c0       	rjmp	.+484    	; 0x2d2 <writeChar+0x238>
  ee:	cb 01       	movw	r24, r22
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	90 78       	andi	r25, 0x80	; 128
  f4:	99 23       	and	r25, r25
  f6:	24 f4       	brge	.+8      	; 0x100 <writeChar+0x66>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	8e 6f       	ori	r24, 0xFE	; 254
  fc:	9f 6f       	ori	r25, 0xFF	; 255
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	ac 01       	movw	r20, r24
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	09 f0       	breq	.+2      	; 0x108 <writeChar+0x6e>
 106:	c8 c0       	rjmp	.+400    	; 0x298 <writeChar+0x1fe>
 108:	61 50       	subi	r22, 0x01	; 1
 10a:	71 09       	sbc	r23, r1
 10c:	c5 c0       	rjmp	.+394    	; 0x298 <writeChar+0x1fe>
 10e:	ca 01       	movw	r24, r20
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	4c ee       	ldi	r20, 0xEC	; 236
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	fa 01       	movw	r30, r20
 11e:	90 81       	ld	r25, Z
 120:	e1 2f       	mov	r30, r17
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	08 2e       	mov	r0, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <writeChar+0x92>
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <writeChar+0x8e>
 130:	9a 23       	and	r25, r26
 132:	9e 0f       	add	r25, r30
 134:	fa 01       	movw	r30, r20
 136:	90 83       	st	Z, r25
 138:	e1 ef       	ldi	r30, 0xF1	; 241
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	6b 2f       	mov	r22, r27
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	08 2e       	mov	r0, r24
 144:	02 c0       	rjmp	.+4      	; 0x14a <writeChar+0xb0>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <writeChar+0xac>
 14e:	9a 23       	and	r25, r26
 150:	69 0f       	add	r22, r25
 152:	60 83       	st	Z, r22
 154:	e6 ef       	ldi	r30, 0xF6	; 246
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	43 2f       	mov	r20, r19
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	08 2e       	mov	r0, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <writeChar+0xcc>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <writeChar+0xc8>
 16a:	9a 23       	and	r25, r26
 16c:	49 0f       	add	r20, r25
 16e:	40 83       	st	Z, r20
 170:	eb ef       	ldi	r30, 0xFB	; 251
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	40 81       	ld	r20, Z
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	b9 01       	movw	r22, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <writeChar+0xe6>
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <writeChar+0xe2>
 184:	cb 01       	movw	r24, r22
 186:	a4 23       	and	r26, r20
 188:	8a 0f       	add	r24, r26
 18a:	80 83       	st	Z, r24
 18c:	a2 c0       	rjmp	.+324    	; 0x2d2 <writeChar+0x238>
 18e:	62 30       	cpi	r22, 0x02	; 2
 190:	71 05       	cpc	r23, r1
 192:	09 f0       	breq	.+2      	; 0x196 <writeChar+0xfc>
 194:	3f c0       	rjmp	.+126    	; 0x214 <writeChar+0x17a>
 196:	ca 01       	movw	r24, r20
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	4d ee       	ldi	r20, 0xED	; 237
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	fa 01       	movw	r30, r20
 1a6:	90 81       	ld	r25, Z
 1a8:	e1 2f       	mov	r30, r17
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	08 2e       	mov	r0, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <writeChar+0x11a>
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <writeChar+0x116>
 1b8:	9a 23       	and	r25, r26
 1ba:	9e 0f       	add	r25, r30
 1bc:	fa 01       	movw	r30, r20
 1be:	90 83       	st	Z, r25
 1c0:	e2 ef       	ldi	r30, 0xF2	; 242
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	6b 2f       	mov	r22, r27
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	08 2e       	mov	r0, r24
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <writeChar+0x138>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <writeChar+0x134>
 1d6:	9a 23       	and	r25, r26
 1d8:	69 0f       	add	r22, r25
 1da:	60 83       	st	Z, r22
 1dc:	e7 ef       	ldi	r30, 0xF7	; 247
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	90 81       	ld	r25, Z
 1e2:	43 2f       	mov	r20, r19
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	08 2e       	mov	r0, r24
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <writeChar+0x154>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <writeChar+0x150>
 1f2:	3a 2f       	mov	r19, r26
 1f4:	39 23       	and	r19, r25
 1f6:	43 0f       	add	r20, r19
 1f8:	40 83       	st	Z, r20
 1fa:	ec ef       	ldi	r30, 0xFC	; 252
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <writeChar+0x16e>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <writeChar+0x16a>
 20c:	a9 23       	and	r26, r25
 20e:	2a 0f       	add	r18, r26
 210:	20 83       	st	Z, r18
 212:	5f c0       	rjmp	.+190    	; 0x2d2 <writeChar+0x238>
 214:	64 30       	cpi	r22, 0x04	; 4
 216:	71 05       	cpc	r23, r1
 218:	09 f0       	breq	.+2      	; 0x21c <writeChar+0x182>
 21a:	5b c0       	rjmp	.+182    	; 0x2d2 <writeChar+0x238>
 21c:	ca 01       	movw	r24, r20
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	4e ee       	ldi	r20, 0xEE	; 238
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	fa 01       	movw	r30, r20
 22c:	90 81       	ld	r25, Z
 22e:	e1 2f       	mov	r30, r17
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	08 2e       	mov	r0, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <writeChar+0x1a0>
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <writeChar+0x19c>
 23e:	9a 23       	and	r25, r26
 240:	9e 0f       	add	r25, r30
 242:	fa 01       	movw	r30, r20
 244:	90 83       	st	Z, r25
 246:	e3 ef       	ldi	r30, 0xF3	; 243
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	6b 2f       	mov	r22, r27
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	08 2e       	mov	r0, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <writeChar+0x1be>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <writeChar+0x1ba>
 25c:	9a 23       	and	r25, r26
 25e:	69 0f       	add	r22, r25
 260:	60 83       	st	Z, r22
 262:	e8 ef       	ldi	r30, 0xF8	; 248
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	43 2f       	mov	r20, r19
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	08 2e       	mov	r0, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <writeChar+0x1da>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <writeChar+0x1d6>
 278:	9a 23       	and	r25, r26
 27a:	49 0f       	add	r20, r25
 27c:	40 83       	st	Z, r20
 27e:	ed ef       	ldi	r30, 0xFD	; 253
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <writeChar+0x1f2>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <writeChar+0x1ee>
 290:	a9 23       	and	r26, r25
 292:	2a 0f       	add	r18, r26
 294:	20 83       	st	Z, r18
 296:	1d c0       	rjmp	.+58     	; 0x2d2 <writeChar+0x238>
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	fe 01       	movw	r30, r28
 29e:	e2 0f       	add	r30, r18
 2a0:	f3 1f       	adc	r31, r19
 2a2:	81 81       	ldd	r24, Z+1	; 0x01
 2a4:	92 81       	ldd	r25, Z+2	; 0x02
 2a6:	18 2f       	mov	r17, r24
 2a8:	1f 70       	andi	r17, 0x0F	; 15
 2aa:	9c 01       	movw	r18, r24
 2ac:	32 95       	swap	r19
 2ae:	22 95       	swap	r18
 2b0:	2f 70       	andi	r18, 0x0F	; 15
 2b2:	23 27       	eor	r18, r19
 2b4:	3f 70       	andi	r19, 0x0F	; 15
 2b6:	23 27       	eor	r18, r19
 2b8:	b2 2f       	mov	r27, r18
 2ba:	bf 70       	andi	r27, 0x0F	; 15
 2bc:	39 2f       	mov	r19, r25
 2be:	3f 70       	andi	r19, 0x0F	; 15
 2c0:	29 2f       	mov	r18, r25
 2c2:	22 95       	swap	r18
 2c4:	2f 70       	andi	r18, 0x0F	; 15
 2c6:	2f 70       	andi	r18, 0x0F	; 15
 2c8:	61 15       	cp	r22, r1
 2ca:	71 05       	cpc	r23, r1
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <writeChar+0x236>
 2ce:	1f cf       	rjmp	.-450    	; 0x10e <writeChar+0x74>
 2d0:	5e cf       	rjmp	.-324    	; 0x18e <writeChar+0xf4>
 2d2:	64 96       	adiw	r28, 0x14	; 20
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <is_prime>:
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	6b 01       	movw	r12, r22
 2f4:	7c 01       	movw	r14, r24
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	c8 16       	cp	r12, r24
 2fa:	d1 04       	cpc	r13, r1
 2fc:	e1 04       	cpc	r14, r1
 2fe:	f1 04       	cpc	r15, r1
 300:	74 f1       	brlt	.+92     	; 0x35e <is_prime+0x78>
 302:	d7 01       	movw	r26, r14
 304:	c6 01       	movw	r24, r12
 306:	81 70       	andi	r24, 0x01	; 1
 308:	99 27       	eor	r25, r25
 30a:	aa 27       	eor	r26, r26
 30c:	b0 78       	andi	r27, 0x80	; 128
 30e:	bb 23       	and	r27, r27
 310:	54 f4       	brge	.+20     	; 0x326 <is_prime+0x40>
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	a1 09       	sbc	r26, r1
 316:	b1 09       	sbc	r27, r1
 318:	8e 6f       	ori	r24, 0xFE	; 254
 31a:	9f 6f       	ori	r25, 0xFF	; 255
 31c:	af 6f       	ori	r26, 0xFF	; 255
 31e:	bf 6f       	ori	r27, 0xFF	; 255
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	a1 1d       	adc	r26, r1
 324:	b1 1d       	adc	r27, r1
 326:	89 2b       	or	r24, r25
 328:	8a 2b       	or	r24, r26
 32a:	8b 2b       	or	r24, r27
 32c:	d1 f0       	breq	.+52     	; 0x362 <is_prime+0x7c>
 32e:	c2 e0       	ldi	r28, 0x02	; 2
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	08 c0       	rjmp	.+16     	; 0x344 <is_prime+0x5e>
 334:	c7 01       	movw	r24, r14
 336:	b6 01       	movw	r22, r12
 338:	0e 94 42 04 	call	0x884	; 0x884 <__divmodsi4>
 33c:	67 2b       	or	r22, r23
 33e:	68 2b       	or	r22, r24
 340:	69 2b       	or	r22, r25
 342:	89 f0       	breq	.+34     	; 0x366 <is_prime+0x80>
 344:	21 96       	adiw	r28, 0x01	; 1
 346:	9e 01       	movw	r18, r28
 348:	0d 2e       	mov	r0, r29
 34a:	00 0c       	add	r0, r0
 34c:	44 0b       	sbc	r20, r20
 34e:	55 0b       	sbc	r21, r21
 350:	2c 15       	cp	r18, r12
 352:	3d 05       	cpc	r19, r13
 354:	4e 05       	cpc	r20, r14
 356:	5f 05       	cpc	r21, r15
 358:	6c f3       	brlt	.-38     	; 0x334 <is_prime+0x4e>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	05 c0       	rjmp	.+10     	; 0x368 <is_prime+0x82>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	03 c0       	rjmp	.+6      	; 0x368 <is_prime+0x82>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	01 c0       	rjmp	.+2      	; 0x368 <is_prime+0x82>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <printAt>:
 376:	8f 92       	push	r8
 378:	9f 92       	push	r9
 37a:	af 92       	push	r10
 37c:	bf 92       	push	r11
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	4b 01       	movw	r8, r22
 38c:	5c 01       	movw	r10, r24
 38e:	ea 01       	movw	r28, r20
 390:	88 e1       	ldi	r24, 0x18	; 24
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <lock>
 398:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <pp+0x1>
 39c:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <pp>
 3a0:	c5 01       	movw	r24, r10
 3a2:	b4 01       	movw	r22, r8
 3a4:	24 e6       	ldi	r18, 0x64	; 100
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	0e 94 42 04 	call	0x884	; 0x884 <__divmodsi4>
 3b0:	0f 2e       	mov	r0, r31
 3b2:	fa e0       	ldi	r31, 0x0A	; 10
 3b4:	cf 2e       	mov	r12, r31
 3b6:	d1 2c       	mov	r13, r1
 3b8:	e1 2c       	mov	r14, r1
 3ba:	f1 2c       	mov	r15, r1
 3bc:	f0 2d       	mov	r31, r0
 3be:	a7 01       	movw	r20, r14
 3c0:	96 01       	movw	r18, r12
 3c2:	0e 94 42 04 	call	0x884	; 0x884 <__divmodsi4>
 3c6:	be 01       	movw	r22, r28
 3c8:	80 e3       	ldi	r24, 0x30	; 48
 3ca:	82 0f       	add	r24, r18
 3cc:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 3d0:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <pp>
 3d4:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <pp+0x1>
 3d8:	21 96       	adiw	r28, 0x01	; 1
 3da:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <pp+0x1>
 3de:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <pp>
 3e2:	c5 01       	movw	r24, r10
 3e4:	b4 01       	movw	r22, r8
 3e6:	a7 01       	movw	r20, r14
 3e8:	96 01       	movw	r18, r12
 3ea:	0e 94 42 04 	call	0x884	; 0x884 <__divmodsi4>
 3ee:	86 2f       	mov	r24, r22
 3f0:	be 01       	movw	r22, r28
 3f2:	80 5d       	subi	r24, 0xD0	; 208
 3f4:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 3f8:	88 e1       	ldi	r24, 0x18	; 24
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 13 04 	call	0x826	; 0x826 <unlock>
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	bf 90       	pop	r11
 40e:	af 90       	pop	r10
 410:	9f 90       	pop	r9
 412:	8f 90       	pop	r8
 414:	08 95       	ret

00000416 <computePrimes>:
 416:	ec 01       	movw	r28, r24
 418:	c1 2c       	mov	r12, r1
 41a:	d1 2c       	mov	r13, r1
 41c:	76 01       	movw	r14, r12
 41e:	c3 94       	inc	r12
 420:	c7 01       	movw	r24, r14
 422:	b6 01       	movw	r22, r12
 424:	0e 94 73 01 	call	0x2e6	; 0x2e6 <is_prime>
 428:	88 23       	and	r24, r24
 42a:	29 f0       	breq	.+10     	; 0x436 <computePrimes+0x20>
 42c:	ae 01       	movw	r20, r28
 42e:	c7 01       	movw	r24, r14
 430:	b6 01       	movw	r22, r12
 432:	0e 94 bb 01 	call	0x376	; 0x376 <printAt>
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	c8 1a       	sub	r12, r24
 43a:	d8 0a       	sbc	r13, r24
 43c:	e8 0a       	sbc	r14, r24
 43e:	f8 0a       	sbc	r15, r24
 440:	ef cf       	rjmp	.-34     	; 0x420 <computePrimes+0xa>

00000442 <blink2>:
void blink2(void) {//1sec
	while(1){
		if(getBlinkVar()>=10){
			resetBlinkVar();			
			//tända segment
			if(LCDDR13 != 0){ // om segment är på så stänger vi av denna
 442:	c9 ef       	ldi	r28, 0xF9	; 249
 444:	d0 e0       	ldi	r29, 0x00	; 0
				LCDDR13 = 0;
				} else{
				LCDDR13 = 0x01; //sätter på den om den var släckt
 446:	11 e0       	ldi	r17, 0x01	; 1
		}
	}
}
void blink2(void) {//1sec
	while(1){
		if(getBlinkVar()>=10){
 448:	0e 94 38 04 	call	0x870	; 0x870 <getBlinkVar>
 44c:	0a 97       	sbiw	r24, 0x0a	; 10
 44e:	e4 f3       	brlt	.-8      	; 0x448 <blink2+0x6>
			resetBlinkVar();			
 450:	0e 94 3d 04 	call	0x87a	; 0x87a <resetBlinkVar>
			//tända segment
			if(LCDDR13 != 0){ // om segment är på så stänger vi av denna
 454:	88 81       	ld	r24, Y
 456:	88 23       	and	r24, r24
 458:	11 f0       	breq	.+4      	; 0x45e <blink2+0x1c>
				LCDDR13 = 0;
 45a:	18 82       	st	Y, r1
 45c:	f5 cf       	rjmp	.-22     	; 0x448 <blink2+0x6>
				} else{
				LCDDR13 = 0x01; //sätter på den om den var släckt
 45e:	18 83       	st	Y, r17
 460:	f3 cf       	rjmp	.-26     	; 0x448 <blink2+0x6>

00000462 <CounterBtn>:
			}
		}
	}
}

void CounterBtn(int pos){
 462:	ac 01       	movw	r20, r24
	btnCount++;
 464:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <btnCount>
 468:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <btnCount+0x1>
 46c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <btnCount+0x2>
 470:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <btnCount+0x3>
 474:	bc 01       	movw	r22, r24
 476:	cd 01       	movw	r24, r26
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <btnCount>
 484:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <btnCount+0x1>
 488:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <btnCount+0x2>
 48c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <btnCount+0x3>
	printAt(btnCount,pos);
 490:	0e 94 bb 01 	call	0x376	; 0x376 <printAt>
 494:	08 95       	ret

00000496 <button>:
}

void button(int pos) {
 496:	6c 01       	movw	r12, r24
	PORTB = (1<<PORTB7); // set bit 7 to 1
 498:	80 e8       	ldi	r24, 0x80	; 128
 49a:	85 b9       	out	0x05, r24	; 5
	LCDDR3 = 0x1; //start segementen
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
	int previousButton = 0; //används för att kolla vilken segment som skall lysa
	int hold = 0; //använder denna för att kolla om man håller in joysticken
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
}

void button(int pos) {
	PORTB = (1<<PORTB7); // set bit 7 to 1
	LCDDR3 = 0x1; //start segementen
	int previousButton = 0; //används för att kolla vilken segment som skall lysa
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	30 e0       	ldi	r19, 0x00	; 0
			LCDDR3 = 0x1;
			LCDDR18 = 0x0;
			previousButton = 0;
			hold = 1;
			} else if (PINB >> 7 == 1) {//inte trycker
			hold = 0;
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	c0 e0       	ldi	r28, 0x00	; 0
			LCDDR3 = 0x0;
			previousButton = 1;
			hold = 1;
			} else if (hold == 0 && PINB >> 7 == 0 && previousButton == 1) {
			CounterBtn(pos);
			LCDDR3 = 0x1;
 4ae:	0f 2e       	mov	r0, r31
 4b0:	ff ee       	ldi	r31, 0xEF	; 239
 4b2:	ef 2e       	mov	r14, r31
 4b4:	f1 2c       	mov	r15, r1
 4b6:	f0 2d       	mov	r31, r0
 4b8:	99 24       	eor	r9, r9
 4ba:	93 94       	inc	r9
			LCDDR18 = 0x0;
 4bc:	0e ef       	ldi	r16, 0xFE	; 254
 4be:	10 e0       	ldi	r17, 0x00	; 0
			previousButton = 0;
			hold = 1;
 4c0:	aa 24       	eor	r10, r10
 4c2:	a3 94       	inc	r10
 4c4:	b1 2c       	mov	r11, r1
	LCDDR3 = 0x1; //start segementen
	int previousButton = 0; //används för att kolla vilken segment som skall lysa
	int hold = 0; //använder denna för att kolla om man håller in joysticken

	while (1) {
		if (hold == 0 && PINB >> 7 == 0 && previousButton == 0) {
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	11 f5       	brne	.+68     	; 0x50e <__stack+0xf>
 4ca:	1f 99       	sbic	0x03, 7	; 3
 4cc:	0f c0       	rjmp	.+30     	; 0x4ec <button+0x56>
 4ce:	21 15       	cp	r18, r1
 4d0:	31 05       	cpc	r19, r1
 4d2:	61 f4       	brne	.+24     	; 0x4ec <button+0x56>
			CounterBtn(pos);
 4d4:	c6 01       	movw	r24, r12
 4d6:	0e 94 31 02 	call	0x462	; 0x462 <CounterBtn>
			LCDDR18 = 0x1;
 4da:	f8 01       	movw	r30, r16
 4dc:	90 82       	st	Z, r9
			LCDDR3 = 0x0;
 4de:	f7 01       	movw	r30, r14
 4e0:	10 82       	st	Z, r1
			previousButton = 1;
			hold = 1;
 4e2:	8a 2d       	mov	r24, r10
 4e4:	9b 2d       	mov	r25, r11
	while (1) {
		if (hold == 0 && PINB >> 7 == 0 && previousButton == 0) {
			CounterBtn(pos);
			LCDDR18 = 0x1;
			LCDDR3 = 0x0;
			previousButton = 1;
 4e6:	2a 2d       	mov	r18, r10
 4e8:	3b 2d       	mov	r19, r11
			hold = 1;
 4ea:	ed cf       	rjmp	.-38     	; 0x4c6 <button+0x30>
			} else if (hold == 0 && PINB >> 7 == 0 && previousButton == 1) {
 4ec:	1f 99       	sbic	0x03, 7	; 3
 4ee:	0f c0       	rjmp	.+30     	; 0x50e <__stack+0xf>
 4f0:	21 30       	cpi	r18, 0x01	; 1
 4f2:	31 05       	cpc	r19, r1
 4f4:	61 f4       	brne	.+24     	; 0x50e <__stack+0xf>
			CounterBtn(pos);
 4f6:	c6 01       	movw	r24, r12
 4f8:	0e 94 31 02 	call	0x462	; 0x462 <CounterBtn>
			LCDDR3 = 0x1;
 4fc:	f7 01       	movw	r30, r14
 4fe:	90 82       	st	Z, r9
			LCDDR18 = 0x0;
 500:	f8 01       	movw	r30, r16
 502:	10 82       	st	Z, r1
			previousButton = 0;
			hold = 1;
 504:	8a 2d       	mov	r24, r10
 506:	9b 2d       	mov	r25, r11
			hold = 1;
			} else if (hold == 0 && PINB >> 7 == 0 && previousButton == 1) {
			CounterBtn(pos);
			LCDDR3 = 0x1;
			LCDDR18 = 0x0;
			previousButton = 0;
 508:	2d 2f       	mov	r18, r29
 50a:	3c 2f       	mov	r19, r28
			hold = 1;
 50c:	dc cf       	rjmp	.-72     	; 0x4c6 <button+0x30>
			} else if (PINB >> 7 == 1) {//inte trycker
 50e:	1f 9b       	sbis	0x03, 7	; 3
 510:	da cf       	rjmp	.-76     	; 0x4c6 <button+0x30>
			hold = 0;
 512:	8d 2f       	mov	r24, r29
 514:	9c 2f       	mov	r25, r28
 516:	d7 cf       	rjmp	.-82     	; 0x4c6 <button+0x30>

00000518 <main>:
		}
	}
}

int main() {
    spawn(computePrimes, 0);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	8b e0       	ldi	r24, 0x0B	; 11
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <spawn>
    //computePrimes(3);
	spawn(button, 4);
 524:	64 e0       	ldi	r22, 0x04	; 4
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	8b e4       	ldi	r24, 0x4B	; 75
 52a:	92 e0       	ldi	r25, 0x02	; 2
 52c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <spawn>
	//spawn(blink,0);
	blink2();
 530:	0e 94 21 02 	call	0x442	; 0x442 <blink2>

00000534 <enqueue>:
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 534:	dc 01       	movw	r26, r24
 536:	15 96       	adiw	r26, 0x05	; 5
 538:	1c 92       	st	X, r1
 53a:	1e 92       	st	-X, r1
 53c:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 53e:	db 01       	movw	r26, r22
 540:	ed 91       	ld	r30, X+
 542:	fc 91       	ld	r31, X
 544:	11 97       	sbiw	r26, 0x01	; 1
 546:	30 97       	sbiw	r30, 0x00	; 0
 548:	21 f4       	brne	.+8      	; 0x552 <enqueue+0x1e>
        *queue = p;
 54a:	8d 93       	st	X+, r24
 54c:	9c 93       	st	X, r25
 54e:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 550:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 552:	24 81       	ldd	r18, Z+4	; 0x04
 554:	35 81       	ldd	r19, Z+5	; 0x05
 556:	21 15       	cp	r18, r1
 558:	31 05       	cpc	r19, r1
 55a:	d1 f7       	brne	.-12     	; 0x550 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 55c:	95 83       	std	Z+5, r25	; 0x05
 55e:	84 83       	std	Z+4, r24	; 0x04
 560:	08 95       	ret

00000562 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	00 d0       	rcall	.+0      	; 0x568 <dispatch+0x6>
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	9a 83       	std	Y+2, r25	; 0x02
 56e:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 570:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 574:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 578:	06 96       	adiw	r24, 0x06	; 6
 57a:	0e 94 83 04 	call	0x906	; 0x906 <setjmp>
 57e:	89 2b       	or	r24, r25
 580:	59 f4       	brne	.+22     	; 0x598 <dispatch+0x36>
        current = next;
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	9a 81       	ldd	r25, Y+2	; 0x02
 586:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 58a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	06 96       	adiw	r24, 0x06	; 6
 594:	0e 94 a3 04 	call	0x946	; 0x946 <longjmp>
    }
}
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <spawn>:

void spawn(void (* function)(int), int arg) {
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <spawn+0x6>
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	ac 01       	movw	r20, r24
    thread newp;

    DISABLE();
 5ae:	f8 94       	cli
    if (!initialized) initialize();
 5b0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <initialized>
 5b4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <initialized+0x1>
 5b8:	89 2b       	or	r24, r25
 5ba:	09 f0       	breq	.+2      	; 0x5be <spawn+0x1c>
 5bc:	43 c0       	rjmp	.+134    	; 0x644 <spawn+0xa2>
int blinkVsr = 0;

static void initialize(void) {
	    int i;
	    for (i=0; i<NTHREADS-1; i++)
	    threads[i].next = &threads[i+1];
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	92 e0       	ldi	r25, 0x02	; 2
 5c2:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <threads+0x5>
 5c6:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <threads+0x4>
 5ca:	8f e6       	ldi	r24, 0x6F	; 111
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <threads+0x72>
 5d2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <threads+0x71>
 5d6:	8c ed       	ldi	r24, 0xDC	; 220
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <threads+0xdf>
 5de:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <threads+0xde>
	    threads[NTHREADS-1].next = NULL;
 5e2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <threads+0x14c>
 5e6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <threads+0x14b>


	    initialized = 1;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <initialized+0x1>
 5f2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <initialized>
	
	CLKPR=0x80;
 5f6:	e1 e6       	ldi	r30, 0x61	; 97
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	90 e8       	ldi	r25, 0x80	; 128
 5fc:	90 83       	st	Z, r25
	CLKPR=0x00;
 5fe:	10 82       	st	Z, r1
	
	EIMSK = (1 << PCIE1);
 600:	9d bb       	out	0x1d, r25	; 29
	PCMSK1 = (1 << PCINT15);	
 602:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
	PORTB = (1<<PORTB7);
 606:	95 b9       	out	0x05, r25	; 5
	
	
	
	
	
	TCCR1A = (1<<COM1A1) | (1<<COM1A0); //OC1A high
 608:	80 ec       	ldi	r24, 0xC0	; 192
 60a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM12)|(1<<CS10)|(1<<CS12); //TCT och prescale
 60e:	9d e0       	ldi	r25, 0x0D	; 13
 610:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	//TCCR1B = ;//Prescale
	OCR1A = 8000000/20480; // set a suitable value to OCR1A
 614:	26 e8       	ldi	r18, 0x86	; 134
 616:	31 e0       	ldi	r19, 0x01	; 1
 618:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 61c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0;
 620:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 624:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 = (1<<OCIE1A);
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	
	LCDCRA= (1<<LCDEN) | (1<<LCDAB);
 62e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB= (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0) | (1<<LCDCS);
 632:	87 eb       	ldi	r24, 0xB7	; 183
 634:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDCCR= (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 638:	8f e0       	ldi	r24, 0x0F	; 15
 63a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 63e:	87 e0       	ldi	r24, 0x07	; 7
 640:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 644:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 648:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	a1 f0       	breq	.+40     	; 0x67c <spawn+0xda>
        *queue = (*queue)->next;
 654:	fc 01       	movw	r30, r24
 656:	84 81       	ldd	r24, Z+4	; 0x04
 658:	95 81       	ldd	r25, Z+5	; 0x05
 65a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 65e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 662:	51 83       	std	Z+1, r21	; 0x01
 664:	40 83       	st	Z, r20
    newp->arg = arg;
 666:	73 83       	std	Z+3, r23	; 0x03
 668:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 66a:	15 82       	std	Z+5, r1	; 0x05
 66c:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 66e:	cf 01       	movw	r24, r30
 670:	06 96       	adiw	r24, 0x06	; 6
 672:	0e 94 83 04 	call	0x906	; 0x906 <setjmp>
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	49 f5       	brne	.+82     	; 0x6cc <spawn+0x12a>
 67a:	01 c0       	rjmp	.+2      	; 0x67e <spawn+0xdc>
 67c:	ff cf       	rjmp	.-2      	; 0x67c <spawn+0xda>
        ENABLE();
 67e:	78 94       	sei
        current->function(current->arg);
 680:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 684:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 688:	ed 91       	ld	r30, X+
 68a:	fc 91       	ld	r31, X
 68c:	11 97       	sbiw	r26, 0x01	; 1
 68e:	12 96       	adiw	r26, 0x02	; 2
 690:	8d 91       	ld	r24, X+
 692:	9c 91       	ld	r25, X
 694:	13 97       	sbiw	r26, 0x03	; 3
 696:	09 95       	icall
        DISABLE();
 698:	f8 94       	cli
        enqueue(current, &freeQ);
 69a:	62 e0       	ldi	r22, 0x02	; 2
 69c:	71 e0       	ldi	r23, 0x01	; 1
 69e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6a6:	0e 94 9a 02 	call	0x534	; 0x534 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6aa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <readyQ>
 6ae:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <readyQ+0x1>
    if (*queue) {
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	51 f0       	breq	.+20     	; 0x6ca <spawn+0x128>
        *queue = (*queue)->next;
 6b6:	fc 01       	movw	r30, r24
 6b8:	24 81       	ldd	r18, Z+4	; 0x04
 6ba:	35 81       	ldd	r19, Z+5	; 0x05
 6bc:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <readyQ+0x1>
 6c0:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 6c4:	0e 94 b1 02 	call	0x562	; 0x562 <dispatch>
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <spawn+0x12a>
 6ca:	ff cf       	rjmp	.-2      	; 0x6ca <spawn+0x128>
    }
    SETSTACK(&newp->context, &newp->stack);
 6cc:	e9 81       	ldd	r30, Y+1	; 0x01
 6ce:	fa 81       	ldd	r31, Y+2	; 0x02
 6d0:	36 96       	adiw	r30, 0x06	; 6
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	9a 81       	ldd	r25, Y+2	; 0x02
 6d6:	87 59       	subi	r24, 0x97	; 151
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	91 8b       	std	Z+17, r25	; 0x11
 6dc:	80 8b       	std	Z+16, r24	; 0x10
 6de:	93 8b       	std	Z+19, r25	; 0x13
 6e0:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 6e2:	64 e2       	ldi	r22, 0x24	; 36
 6e4:	71 e0       	ldi	r23, 0x01	; 1
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	9a 81       	ldd	r25, Y+2	; 0x02
 6ea:	0e 94 9a 02 	call	0x534	; 0x534 <enqueue>
    ENABLE();
 6ee:	78 94       	sei
}
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <yield>:
	blinkVsr ++;
	yield();
}

void yield(void) {
	DISABLE();
 6fa:	f8 94       	cli
	enqueue(current, &readyQ);
 6fc:	64 e2       	ldi	r22, 0x24	; 36
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 704:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 708:	0e 94 9a 02 	call	0x534	; 0x534 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 70c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <readyQ>
 710:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <readyQ+0x1>
    if (*queue) {
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	59 f0       	breq	.+22     	; 0x72e <yield+0x34>
        *queue = (*queue)->next;
 718:	fc 01       	movw	r30, r24
 71a:	24 81       	ldd	r18, Z+4	; 0x04
 71c:	35 81       	ldd	r19, Z+5	; 0x05
 71e:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <readyQ+0x1>
 722:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 726:	0e 94 b1 02 	call	0x562	; 0x562 <dispatch>
	ENABLE();
 72a:	78 94       	sei
}
 72c:	08 95       	ret
 72e:	ff cf       	rjmp	.-2      	; 0x72e <yield+0x34>

00000730 <__vector_3>:

    enqueue(newp, &readyQ);
    ENABLE();
}
long btnCount = 0;
ISR(PCINT1_vect) {
 730:	1f 92       	push	r1
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	0f 92       	push	r0
 738:	11 24       	eor	r1, r1
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	4f 93       	push	r20
 740:	5f 93       	push	r21
 742:	6f 93       	push	r22
 744:	7f 93       	push	r23
 746:	8f 93       	push	r24
 748:	9f 93       	push	r25
 74a:	af 93       	push	r26
 74c:	bf 93       	push	r27
 74e:	ef 93       	push	r30
 750:	ff 93       	push	r31
	DISABLE();
 752:	f8 94       	cli
	//code for interrupt handler
	if(PINB >> 7 == 0){
 754:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 756:	0e 94 7d 03 	call	0x6fa	; 0x6fa <yield>
	}
	ENABLE();
 75a:	78 94       	sei
}
 75c:	ff 91       	pop	r31
 75e:	ef 91       	pop	r30
 760:	bf 91       	pop	r27
 762:	af 91       	pop	r26
 764:	9f 91       	pop	r25
 766:	8f 91       	pop	r24
 768:	7f 91       	pop	r23
 76a:	6f 91       	pop	r22
 76c:	5f 91       	pop	r21
 76e:	4f 91       	pop	r20
 770:	3f 91       	pop	r19
 772:	2f 91       	pop	r18
 774:	0f 90       	pop	r0
 776:	0f be       	out	0x3f, r0	; 63
 778:	0f 90       	pop	r0
 77a:	1f 90       	pop	r1
 77c:	18 95       	reti

0000077e <__vector_7>:

ISR(TIMER1_COMPA_vect) {
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	2f 93       	push	r18
 78a:	3f 93       	push	r19
 78c:	4f 93       	push	r20
 78e:	5f 93       	push	r21
 790:	6f 93       	push	r22
 792:	7f 93       	push	r23
 794:	8f 93       	push	r24
 796:	9f 93       	push	r25
 798:	af 93       	push	r26
 79a:	bf 93       	push	r27
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31
	blinkVsr ++;
 7a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <blinkVsr>
 7a4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <blinkVsr+0x1>
 7a8:	01 96       	adiw	r24, 0x01	; 1
 7aa:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <blinkVsr+0x1>
 7ae:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <blinkVsr>
	yield();
 7b2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <yield>
}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <lock>:
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
	DISABLE();
 7d8:	f8 94       	cli
	if(m->locked==0){
 7da:	fc 01       	movw	r30, r24
 7dc:	20 81       	ld	r18, Z
 7de:	31 81       	ldd	r19, Z+1	; 0x01
 7e0:	23 2b       	or	r18, r19
 7e2:	29 f4       	brne	.+10     	; 0x7ee <lock+0x16>
		m->locked=1;
 7e4:	21 e0       	ldi	r18, 0x01	; 1
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	31 83       	std	Z+1, r19	; 0x01
 7ea:	20 83       	st	Z, r18
 7ec:	1a c0       	rjmp	.+52     	; 0x822 <lock+0x4a>
	}else{
		enqueue(current, &m->waitQ);
 7ee:	bc 01       	movw	r22, r24
 7f0:	6e 5f       	subi	r22, 0xFE	; 254
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 7fc:	0e 94 9a 02 	call	0x534	; 0x534 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 800:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <readyQ>
 804:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <readyQ+0x1>
    if (*queue) {
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	51 f0       	breq	.+20     	; 0x820 <lock+0x48>
        *queue = (*queue)->next;
 80c:	fc 01       	movw	r30, r24
 80e:	24 81       	ldd	r18, Z+4	; 0x04
 810:	35 81       	ldd	r19, Z+5	; 0x05
 812:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <readyQ+0x1>
 816:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <readyQ>
	DISABLE();
	if(m->locked==0){
		m->locked=1;
	}else{
		enqueue(current, &m->waitQ);
		dispatch(dequeue(&readyQ));
 81a:	0e 94 b1 02 	call	0x562	; 0x562 <dispatch>
 81e:	01 c0       	rjmp	.+2      	; 0x822 <lock+0x4a>
 820:	ff cf       	rjmp	.-2      	; 0x820 <lock+0x48>
	}
	ENABLE();
 822:	78 94       	sei
 824:	08 95       	ret

00000826 <unlock>:
}

void unlock(mutex *m) {
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
	DISABLE();
 82a:	f8 94       	cli
	if(m->waitQ!=NULL){
 82c:	fc 01       	movw	r30, r24
 82e:	22 81       	ldd	r18, Z+2	; 0x02
 830:	33 81       	ldd	r19, Z+3	; 0x03
 832:	23 2b       	or	r18, r19
 834:	b1 f0       	breq	.+44     	; 0x862 <unlock+0x3c>
 836:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 838:	64 e2       	ldi	r22, 0x24	; 36
 83a:	71 e0       	ldi	r23, 0x01	; 1
 83c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 840:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 844:	0e 94 9a 02 	call	0x534	; 0x534 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 848:	8a 81       	ldd	r24, Y+2	; 0x02
 84a:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	41 f0       	breq	.+16     	; 0x860 <unlock+0x3a>
        *queue = (*queue)->next;
 850:	fc 01       	movw	r30, r24
 852:	24 81       	ldd	r18, Z+4	; 0x04
 854:	35 81       	ldd	r19, Z+5	; 0x05
 856:	3b 83       	std	Y+3, r19	; 0x03
 858:	2a 83       	std	Y+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ!=NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&m->waitQ));
 85a:	0e 94 b1 02 	call	0x562	; 0x562 <dispatch>
 85e:	04 c0       	rjmp	.+8      	; 0x868 <unlock+0x42>
 860:	ff cf       	rjmp	.-2      	; 0x860 <unlock+0x3a>
	} else{
		m->locked=0;
 862:	fc 01       	movw	r30, r24
 864:	11 82       	std	Z+1, r1	; 0x01
 866:	10 82       	st	Z, r1
	}
	ENABLE();
 868:	78 94       	sei
}
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <getBlinkVar>:

int getBlinkVar(void) {
	return blinkVsr;
}
 870:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <blinkVsr>
 874:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <blinkVsr+0x1>
 878:	08 95       	ret

0000087a <resetBlinkVar>:

void resetBlinkVar(void){
	blinkVsr = 0;
 87a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <blinkVsr+0x1>
 87e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <blinkVsr>
 882:	08 95       	ret

00000884 <__divmodsi4>:
 884:	05 2e       	mov	r0, r21
 886:	97 fb       	bst	r25, 7
 888:	1e f4       	brtc	.+6      	; 0x890 <__divmodsi4+0xc>
 88a:	00 94       	com	r0
 88c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__negsi2>
 890:	57 fd       	sbrc	r21, 7
 892:	07 d0       	rcall	.+14     	; 0x8a2 <__divmodsi4_neg2>
 894:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__udivmodsi4>
 898:	07 fc       	sbrc	r0, 7
 89a:	03 d0       	rcall	.+6      	; 0x8a2 <__divmodsi4_neg2>
 89c:	4e f4       	brtc	.+18     	; 0x8b0 <__divmodsi4_exit>
 89e:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__negsi2>

000008a2 <__divmodsi4_neg2>:
 8a2:	50 95       	com	r21
 8a4:	40 95       	com	r20
 8a6:	30 95       	com	r19
 8a8:	21 95       	neg	r18
 8aa:	3f 4f       	sbci	r19, 0xFF	; 255
 8ac:	4f 4f       	sbci	r20, 0xFF	; 255
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255

000008b0 <__divmodsi4_exit>:
 8b0:	08 95       	ret

000008b2 <__negsi2>:
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	08 95       	ret

000008c2 <__udivmodsi4>:
 8c2:	a1 e2       	ldi	r26, 0x21	; 33
 8c4:	1a 2e       	mov	r1, r26
 8c6:	aa 1b       	sub	r26, r26
 8c8:	bb 1b       	sub	r27, r27
 8ca:	fd 01       	movw	r30, r26
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <__udivmodsi4_ep>

000008ce <__udivmodsi4_loop>:
 8ce:	aa 1f       	adc	r26, r26
 8d0:	bb 1f       	adc	r27, r27
 8d2:	ee 1f       	adc	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	a2 17       	cp	r26, r18
 8d8:	b3 07       	cpc	r27, r19
 8da:	e4 07       	cpc	r30, r20
 8dc:	f5 07       	cpc	r31, r21
 8de:	20 f0       	brcs	.+8      	; 0x8e8 <__udivmodsi4_ep>
 8e0:	a2 1b       	sub	r26, r18
 8e2:	b3 0b       	sbc	r27, r19
 8e4:	e4 0b       	sbc	r30, r20
 8e6:	f5 0b       	sbc	r31, r21

000008e8 <__udivmodsi4_ep>:
 8e8:	66 1f       	adc	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	1a 94       	dec	r1
 8f2:	69 f7       	brne	.-38     	; 0x8ce <__udivmodsi4_loop>
 8f4:	60 95       	com	r22
 8f6:	70 95       	com	r23
 8f8:	80 95       	com	r24
 8fa:	90 95       	com	r25
 8fc:	9b 01       	movw	r18, r22
 8fe:	ac 01       	movw	r20, r24
 900:	bd 01       	movw	r22, r26
 902:	cf 01       	movw	r24, r30
 904:	08 95       	ret

00000906 <setjmp>:
 906:	dc 01       	movw	r26, r24
 908:	2d 92       	st	X+, r2
 90a:	3d 92       	st	X+, r3
 90c:	4d 92       	st	X+, r4
 90e:	5d 92       	st	X+, r5
 910:	6d 92       	st	X+, r6
 912:	7d 92       	st	X+, r7
 914:	8d 92       	st	X+, r8
 916:	9d 92       	st	X+, r9
 918:	ad 92       	st	X+, r10
 91a:	bd 92       	st	X+, r11
 91c:	cd 92       	st	X+, r12
 91e:	dd 92       	st	X+, r13
 920:	ed 92       	st	X+, r14
 922:	fd 92       	st	X+, r15
 924:	0d 93       	st	X+, r16
 926:	1d 93       	st	X+, r17
 928:	cd 93       	st	X+, r28
 92a:	dd 93       	st	X+, r29
 92c:	ff 91       	pop	r31
 92e:	ef 91       	pop	r30
 930:	8d b7       	in	r24, 0x3d	; 61
 932:	8d 93       	st	X+, r24
 934:	8e b7       	in	r24, 0x3e	; 62
 936:	8d 93       	st	X+, r24
 938:	8f b7       	in	r24, 0x3f	; 63
 93a:	8d 93       	st	X+, r24
 93c:	ed 93       	st	X+, r30
 93e:	fd 93       	st	X+, r31
 940:	88 27       	eor	r24, r24
 942:	99 27       	eor	r25, r25
 944:	09 94       	ijmp

00000946 <longjmp>:
 946:	dc 01       	movw	r26, r24
 948:	cb 01       	movw	r24, r22
 94a:	81 30       	cpi	r24, 0x01	; 1
 94c:	91 05       	cpc	r25, r1
 94e:	81 1d       	adc	r24, r1
 950:	2d 90       	ld	r2, X+
 952:	3d 90       	ld	r3, X+
 954:	4d 90       	ld	r4, X+
 956:	5d 90       	ld	r5, X+
 958:	6d 90       	ld	r6, X+
 95a:	7d 90       	ld	r7, X+
 95c:	8d 90       	ld	r8, X+
 95e:	9d 90       	ld	r9, X+
 960:	ad 90       	ld	r10, X+
 962:	bd 90       	ld	r11, X+
 964:	cd 90       	ld	r12, X+
 966:	dd 90       	ld	r13, X+
 968:	ed 90       	ld	r14, X+
 96a:	fd 90       	ld	r15, X+
 96c:	0d 91       	ld	r16, X+
 96e:	1d 91       	ld	r17, X+
 970:	cd 91       	ld	r28, X+
 972:	dd 91       	ld	r29, X+
 974:	ed 91       	ld	r30, X+
 976:	fd 91       	ld	r31, X+
 978:	0d 90       	ld	r0, X+
 97a:	f8 94       	cli
 97c:	fe bf       	out	0x3e, r31	; 62
 97e:	0f be       	out	0x3f, r0	; 63
 980:	ed bf       	out	0x3d, r30	; 61
 982:	ed 91       	ld	r30, X+
 984:	fd 91       	ld	r31, X+
 986:	09 94       	ijmp

00000988 <_exit>:
 988:	f8 94       	cli

0000098a <__stop_program>:
 98a:	ff cf       	rjmp	.-2      	; 0x98a <__stop_program>
