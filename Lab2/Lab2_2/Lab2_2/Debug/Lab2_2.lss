
Lab2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  00000926  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a0  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b27  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000687  00000000  00000000  000026f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056a  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad1  00000000  00000000  000034f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003fc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e7       	ldi	r30, 0x7A	; 122
  70:	f8 e0       	ldi	r31, 0x08	; 8
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 1a 02 	call	0x434	; 0x434 <main>
  92:	0c 94 3b 04 	jmp	0x876	; 0x876 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
#include <avr/io.h>
#include <stdio.h>
#include <stdlib.h>
#include <avr/portpins.h>

void writeChar(char ch, int pos){
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	64 97       	sbiw	r28, 0x14	; 20
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	char mask;
	uint16_t allSCC[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  b0:	94 e1       	ldi	r25, 0x14	; 20
  b2:	e4 e0       	ldi	r30, 0x04	; 4
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	9a 95       	dec	r25
  c0:	e1 f7       	brne	.-8      	; 0xba <writeChar+0x20>
	uint16_t number;
	char nibble = 0x0000;
	char out1 = 0x00, out2= 0x00, out3= 0x00, out4 = 0x00;
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
  c2:	66 30       	cpi	r22, 0x06	; 6
  c4:	71 05       	cpc	r23, r1
  c6:	08 f0       	brcs	.+2      	; 0xca <writeChar+0x30>
  c8:	04 c1       	rjmp	.+520    	; 0x2d2 <writeChar+0x238>
		return;
	}
	if(pos%2==0){
  ca:	60 ff       	sbrs	r22, 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <writeChar+0x38>
		mask = 0xF0;
	}
	else{
		mask = 0x0F;
  ce:	af e0       	ldi	r26, 0x0F	; 15
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <writeChar+0x3a>
	uint16_t charr = 0x0000;
	if ((pos > 5)|(pos < 0)){
		return;
	}
	if(pos%2==0){
		mask = 0xF0;
  d2:	a0 ef       	ldi	r26, 0xF0	; 240
	}
	else{
		mask = 0x0F;
	}

	if(isdigit(ch)){
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	a9 01       	movw	r20, r18
  da:	40 53       	subi	r20, 0x30	; 48
  dc:	51 09       	sbc	r21, r1
  de:	4a 30       	cpi	r20, 0x0A	; 10
  e0:	51 05       	cpc	r21, r1
  e2:	10 f4       	brcc	.+4      	; 0xe8 <writeChar+0x4e>
		number = ch-'0';
  e4:	9a 01       	movw	r18, r20
  e6:	03 c0       	rjmp	.+6      	; 0xee <writeChar+0x54>
	}
	else if((ch<0)|(ch>9)){
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	08 f0       	brcs	.+2      	; 0xee <writeChar+0x54>
  ec:	f2 c0       	rjmp	.+484    	; 0x2d2 <writeChar+0x238>
		return;
	}
	else{
		number = ch;
	}
	int mod = pos%2;
  ee:	cb 01       	movw	r24, r22
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	90 78       	andi	r25, 0x80	; 128
  f4:	99 23       	and	r25, r25
  f6:	24 f4       	brge	.+8      	; 0x100 <writeChar+0x66>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	8e 6f       	ori	r24, 0xFE	; 254
  fc:	9f 6f       	ori	r25, 0xFF	; 255
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	ac 01       	movw	r20, r24
	if(mod==1){
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	09 f0       	breq	.+2      	; 0x108 <writeChar+0x6e>
 106:	c8 c0       	rjmp	.+400    	; 0x298 <writeChar+0x1fe>
		pos-=1;
 108:	61 50       	subi	r22, 0x01	; 1
 10a:	71 09       	sbc	r23, r1
 10c:	c5 c0       	rjmp	.+394    	; 0x298 <writeChar+0x1fe>
			out4=nibble;
		}
	}

	if(pos==0){
		LCDDR0 = (out1<<(mod*4)) + (LCDDR0&mask);
 10e:	ca 01       	movw	r24, r20
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	4c ee       	ldi	r20, 0xEC	; 236
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	fa 01       	movw	r30, r20
 11e:	90 81       	ld	r25, Z
 120:	e1 2f       	mov	r30, r17
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	08 2e       	mov	r0, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <writeChar+0x92>
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <writeChar+0x8e>
 130:	9a 23       	and	r25, r26
 132:	9e 0f       	add	r25, r30
 134:	fa 01       	movw	r30, r20
 136:	90 83       	st	Z, r25
		LCDDR5 = (out2<<(mod*4))+(LCDDR5&mask);
 138:	e1 ef       	ldi	r30, 0xF1	; 241
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	90 81       	ld	r25, Z
 13e:	6b 2f       	mov	r22, r27
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	08 2e       	mov	r0, r24
 144:	02 c0       	rjmp	.+4      	; 0x14a <writeChar+0xb0>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <writeChar+0xac>
 14e:	9a 23       	and	r25, r26
 150:	69 0f       	add	r22, r25
 152:	60 83       	st	Z, r22
		LCDDR10 = (out3<<(mod*4))+(LCDDR10&mask);
 154:	e6 ef       	ldi	r30, 0xF6	; 246
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	43 2f       	mov	r20, r19
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	08 2e       	mov	r0, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <writeChar+0xcc>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <writeChar+0xc8>
 16a:	9a 23       	and	r25, r26
 16c:	49 0f       	add	r20, r25
 16e:	40 83       	st	Z, r20
		LCDDR15 = (out4<<(mod*4))+(LCDDR15&mask);
 170:	eb ef       	ldi	r30, 0xFB	; 251
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	40 81       	ld	r20, Z
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	b9 01       	movw	r22, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <writeChar+0xe6>
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <writeChar+0xe2>
 184:	cb 01       	movw	r24, r22
 186:	a4 23       	and	r26, r20
 188:	8a 0f       	add	r24, r26
 18a:	80 83       	st	Z, r24
 18c:	a2 c0       	rjmp	.+324    	; 0x2d2 <writeChar+0x238>

	}
	if(pos==2){
 18e:	62 30       	cpi	r22, 0x02	; 2
 190:	71 05       	cpc	r23, r1
 192:	09 f0       	breq	.+2      	; 0x196 <writeChar+0xfc>
 194:	3f c0       	rjmp	.+126    	; 0x214 <writeChar+0x17a>
		LCDDR1 = (out1<<(mod*4))+ (LCDDR1&mask);
 196:	ca 01       	movw	r24, r20
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	4d ee       	ldi	r20, 0xED	; 237
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	fa 01       	movw	r30, r20
 1a6:	90 81       	ld	r25, Z
 1a8:	e1 2f       	mov	r30, r17
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	08 2e       	mov	r0, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <writeChar+0x11a>
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <writeChar+0x116>
 1b8:	9a 23       	and	r25, r26
 1ba:	9e 0f       	add	r25, r30
 1bc:	fa 01       	movw	r30, r20
 1be:	90 83       	st	Z, r25
		LCDDR6 = (out2<<(mod*4))+ (LCDDR6&mask);
 1c0:	e2 ef       	ldi	r30, 0xF2	; 242
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	6b 2f       	mov	r22, r27
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	08 2e       	mov	r0, r24
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <writeChar+0x138>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <writeChar+0x134>
 1d6:	9a 23       	and	r25, r26
 1d8:	69 0f       	add	r22, r25
 1da:	60 83       	st	Z, r22
		LCDDR11 = (out3<<(mod*4))+ (LCDDR11&mask);
 1dc:	e7 ef       	ldi	r30, 0xF7	; 247
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	90 81       	ld	r25, Z
 1e2:	43 2f       	mov	r20, r19
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	08 2e       	mov	r0, r24
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <writeChar+0x154>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <writeChar+0x150>
 1f2:	3a 2f       	mov	r19, r26
 1f4:	39 23       	and	r19, r25
 1f6:	43 0f       	add	r20, r19
 1f8:	40 83       	st	Z, r20
		LCDDR16 = (out4<<(mod*4))+ (LCDDR16&mask);
 1fa:	ec ef       	ldi	r30, 0xFC	; 252
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <writeChar+0x16e>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <writeChar+0x16a>
 20c:	a9 23       	and	r26, r25
 20e:	2a 0f       	add	r18, r26
 210:	20 83       	st	Z, r18
 212:	5f c0       	rjmp	.+190    	; 0x2d2 <writeChar+0x238>
	}
	if(pos==4){
 214:	64 30       	cpi	r22, 0x04	; 4
 216:	71 05       	cpc	r23, r1
 218:	09 f0       	breq	.+2      	; 0x21c <writeChar+0x182>
 21a:	5b c0       	rjmp	.+182    	; 0x2d2 <writeChar+0x238>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
 21c:	ca 01       	movw	r24, r20
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	4e ee       	ldi	r20, 0xEE	; 238
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	fa 01       	movw	r30, r20
 22c:	90 81       	ld	r25, Z
 22e:	e1 2f       	mov	r30, r17
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	08 2e       	mov	r0, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <writeChar+0x1a0>
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <writeChar+0x19c>
 23e:	9a 23       	and	r25, r26
 240:	9e 0f       	add	r25, r30
 242:	fa 01       	movw	r30, r20
 244:	90 83       	st	Z, r25
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
 246:	e3 ef       	ldi	r30, 0xF3	; 243
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	6b 2f       	mov	r22, r27
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	08 2e       	mov	r0, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <writeChar+0x1be>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <writeChar+0x1ba>
 25c:	9a 23       	and	r25, r26
 25e:	69 0f       	add	r22, r25
 260:	60 83       	st	Z, r22
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
 262:	e8 ef       	ldi	r30, 0xF8	; 248
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	43 2f       	mov	r20, r19
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	08 2e       	mov	r0, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <writeChar+0x1da>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <writeChar+0x1d6>
 278:	9a 23       	and	r25, r26
 27a:	49 0f       	add	r20, r25
 27c:	40 83       	st	Z, r20
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
 27e:	ed ef       	ldi	r30, 0xFD	; 253
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <writeChar+0x1f2>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <writeChar+0x1ee>
 290:	a9 23       	and	r26, r25
 292:	2a 0f       	add	r18, r26
 294:	20 83       	st	Z, r18
 296:	1d c0       	rjmp	.+58     	; 0x2d2 <writeChar+0x238>
	if(mod==1){
		pos-=1;
	}


	charr = allSCC[number];
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	fe 01       	movw	r30, r28
 29e:	e2 0f       	add	r30, r18
 2a0:	f3 1f       	adc	r31, r19
 2a2:	81 81       	ldd	r24, Z+1	; 0x01
 2a4:	92 81       	ldd	r25, Z+2	; 0x02
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
 2a6:	18 2f       	mov	r17, r24
 2a8:	1f 70       	andi	r17, 0x0F	; 15
		charr = charr >> 4;
 2aa:	9c 01       	movw	r18, r24
 2ac:	32 95       	swap	r19
 2ae:	22 95       	swap	r18
 2b0:	2f 70       	andi	r18, 0x0F	; 15
 2b2:	23 27       	eor	r18, r19
 2b4:	3f 70       	andi	r19, 0x0F	; 15
 2b6:	23 27       	eor	r18, r19
	}


	charr = allSCC[number];
	for(int i = 0; i < 4 ; i ++){
		nibble = charr & 0x000f;
 2b8:	b2 2f       	mov	r27, r18
 2ba:	bf 70       	andi	r27, 0x0F	; 15
 2bc:	39 2f       	mov	r19, r25
 2be:	3f 70       	andi	r19, 0x0F	; 15
 2c0:	29 2f       	mov	r18, r25
 2c2:	22 95       	swap	r18
 2c4:	2f 70       	andi	r18, 0x0F	; 15
 2c6:	2f 70       	andi	r18, 0x0F	; 15
		if(i==3){
			out4=nibble;
		}
	}

	if(pos==0){
 2c8:	61 15       	cp	r22, r1
 2ca:	71 05       	cpc	r23, r1
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <writeChar+0x236>
 2ce:	1f cf       	rjmp	.-450    	; 0x10e <writeChar+0x74>
 2d0:	5e cf       	rjmp	.-324    	; 0x18e <writeChar+0xf4>
		LCDDR2 = (out1<<(mod*4))+ (LCDDR2&mask);
		LCDDR7 = (out2<<(mod*4))+ (LCDDR7&mask);
		LCDDR12 = (out3<<(mod*4))+ (LCDDR12&mask);
		LCDDR17 = (out4<<(mod*4))+ (LCDDR17&mask);
	}
}
 2d2:	64 96       	adiw	r28, 0x14	; 20
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <is_prime>:

bool is_prime(long i){
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	6b 01       	movw	r12, r22
 2f4:	7c 01       	movw	r14, r24
	if(i>0){
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	c8 16       	cp	r12, r24
 2fa:	d1 04       	cpc	r13, r1
 2fc:	e1 04       	cpc	r14, r1
 2fe:	f1 04       	cpc	r15, r1
 300:	74 f1       	brlt	.+92     	; 0x35e <is_prime+0x78>
		for(int j = 2;j<i;j++){
			if((i%j)==0){
 302:	d7 01       	movw	r26, r14
 304:	c6 01       	movw	r24, r12
 306:	81 70       	andi	r24, 0x01	; 1
 308:	99 27       	eor	r25, r25
 30a:	aa 27       	eor	r26, r26
 30c:	b0 78       	andi	r27, 0x80	; 128
 30e:	bb 23       	and	r27, r27
 310:	54 f4       	brge	.+20     	; 0x326 <is_prime+0x40>
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	a1 09       	sbc	r26, r1
 316:	b1 09       	sbc	r27, r1
 318:	8e 6f       	ori	r24, 0xFE	; 254
 31a:	9f 6f       	ori	r25, 0xFF	; 255
 31c:	af 6f       	ori	r26, 0xFF	; 255
 31e:	bf 6f       	ori	r27, 0xFF	; 255
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	a1 1d       	adc	r26, r1
 324:	b1 1d       	adc	r27, r1
 326:	89 2b       	or	r24, r25
 328:	8a 2b       	or	r24, r26
 32a:	8b 2b       	or	r24, r27
 32c:	d1 f0       	breq	.+52     	; 0x362 <is_prime+0x7c>
 32e:	c2 e0       	ldi	r28, 0x02	; 2
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	08 c0       	rjmp	.+16     	; 0x344 <is_prime+0x5e>
 334:	c7 01       	movw	r24, r14
 336:	b6 01       	movw	r22, r12
 338:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodsi4>
 33c:	67 2b       	or	r22, r23
 33e:	68 2b       	or	r22, r24
 340:	69 2b       	or	r22, r25
 342:	89 f0       	breq	.+34     	; 0x366 <is_prime+0x80>
	}
}

bool is_prime(long i){
	if(i>0){
		for(int j = 2;j<i;j++){
 344:	21 96       	adiw	r28, 0x01	; 1
 346:	9e 01       	movw	r18, r28
 348:	0d 2e       	mov	r0, r29
 34a:	00 0c       	add	r0, r0
 34c:	44 0b       	sbc	r20, r20
 34e:	55 0b       	sbc	r21, r21
 350:	2c 15       	cp	r18, r12
 352:	3d 05       	cpc	r19, r13
 354:	4e 05       	cpc	r20, r14
 356:	5f 05       	cpc	r21, r15
 358:	6c f3       	brlt	.-38     	; 0x334 <is_prime+0x4e>
			if((i%j)==0){
				return false; //inte prime
			}
		}
	}
	return true;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	05 c0       	rjmp	.+10     	; 0x368 <is_prime+0x82>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	03 c0       	rjmp	.+6      	; 0x368 <is_prime+0x82>

bool is_prime(long i){
	if(i>0){
		for(int j = 2;j<i;j++){
			if((i%j)==0){
				return false; //inte prime
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	01 c0       	rjmp	.+2      	; 0x368 <is_prime+0x82>
 366:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	return true;
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <printAt>:
int pp;
mutex currMut = MUTEX_INIT;
void printAt(long num, int pos) {
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	6b 01       	movw	r12, r22
 384:	7c 01       	movw	r14, r24
 386:	ea 01       	movw	r28, r20
	lock(&currMut);
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 6d 03 	call	0x6da	; 0x6da <lock>
    pp = pos;
 390:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 394:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 398:	c7 01       	movw	r24, r14
 39a:	b6 01       	movw	r22, r12
 39c:	24 e6       	ldi	r18, 0x64	; 100
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodsi4>
 3a8:	2a e0       	ldi	r18, 0x0A	; 10
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodsi4>
 3b4:	be 01       	movw	r22, r28
 3b6:	80 e3       	ldi	r24, 0x30	; 48
 3b8:	82 0f       	add	r24, r18
 3ba:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	97 e2       	ldi	r25, 0x27	; 39
 3c2:	01 97       	sbiw	r24, 0x01	; 1
	for(int i =0;i<10000;i++){
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <printAt+0x4c>
		
	}
    pp++;
 3c6:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <pp>
 3ca:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <pp+0x1>
 3ce:	21 96       	adiw	r28, 0x01	; 1
 3d0:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 3d4:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
    writeChar( num % 10 + '0', pp);
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	2a e0       	ldi	r18, 0x0A	; 10
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodsi4>
 3e8:	86 2f       	mov	r24, r22
 3ea:	be 01       	movw	r22, r28
 3ec:	80 5d       	subi	r24, 0xD0	; 208
 3ee:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
	unlock(&currMut);
 3f2:	88 e1       	ldi	r24, 0x18	; 24
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 94 03 	call	0x728	; 0x728 <unlock>
	
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	08 95       	ret

00000408 <computePrimes>:

void computePrimes(int pos) {
 408:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 40a:	c1 2c       	mov	r12, r1
 40c:	d1 2c       	mov	r13, r1
 40e:	76 01       	movw	r14, r12
 410:	c3 94       	inc	r12
        if (is_prime(n)) {
 412:	c7 01       	movw	r24, r14
 414:	b6 01       	movw	r22, r12
 416:	0e 94 73 01 	call	0x2e6	; 0x2e6 <is_prime>
 41a:	88 23       	and	r24, r24
 41c:	29 f0       	breq	.+10     	; 0x428 <computePrimes+0x20>
            printAt(n, pos);
 41e:	ae 01       	movw	r20, r28
 420:	c7 01       	movw	r24, r14
 422:	b6 01       	movw	r22, r12
 424:	0e 94 bb 01 	call	0x376	; 0x376 <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	c8 1a       	sub	r12, r24
 42c:	d8 0a       	sbc	r13, r24
 42e:	e8 0a       	sbc	r14, r24
 430:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
			//yield();
        }
    }
 432:	ef cf       	rjmp	.-34     	; 0x412 <computePrimes+0xa>

00000434 <main>:
}

int main() {
    spawn(computePrimes, 0);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <spawn>
    computePrimes(3);
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 04 02 	call	0x408	; 0x408 <computePrimes>

00000448 <enqueue>:
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 448:	dc 01       	movw	r26, r24
 44a:	15 96       	adiw	r26, 0x05	; 5
 44c:	1c 92       	st	X, r1
 44e:	1e 92       	st	-X, r1
 450:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 452:	db 01       	movw	r26, r22
 454:	ed 91       	ld	r30, X+
 456:	fc 91       	ld	r31, X
 458:	11 97       	sbiw	r26, 0x01	; 1
 45a:	30 97       	sbiw	r30, 0x00	; 0
 45c:	21 f4       	brne	.+8      	; 0x466 <enqueue+0x1e>
        *queue = p;
 45e:	8d 93       	st	X+, r24
 460:	9c 93       	st	X, r25
 462:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 464:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 466:	24 81       	ldd	r18, Z+4	; 0x04
 468:	35 81       	ldd	r19, Z+5	; 0x05
 46a:	21 15       	cp	r18, r1
 46c:	31 05       	cpc	r19, r1
 46e:	d1 f7       	brne	.-12     	; 0x464 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 470:	95 83       	std	Z+5, r25	; 0x05
 472:	84 83       	std	Z+4, r24	; 0x04
 474:	08 95       	ret

00000476 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	00 d0       	rcall	.+0      	; 0x47c <dispatch+0x6>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	9a 83       	std	Y+2, r25	; 0x02
 482:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 484:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 488:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 48c:	06 96       	adiw	r24, 0x06	; 6
 48e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <setjmp>
 492:	89 2b       	or	r24, r25
 494:	59 f4       	brne	.+22     	; 0x4ac <dispatch+0x36>
        current = next;
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	9a 81       	ldd	r25, Y+2	; 0x02
 49a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 49e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	06 96       	adiw	r24, 0x06	; 6
 4a8:	0e 94 1a 04 	call	0x834	; 0x834 <longjmp>
    }
}
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <spawn>:

void spawn(void (* function)(int), int arg) {
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <spawn+0x6>
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
 4c0:	ac 01       	movw	r20, r24
    thread newp;

    DISABLE();
 4c2:	f8 94       	cli
    if (!initialized) initialize();
 4c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <initialized>
 4c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <initialized+0x1>
 4cc:	89 2b       	or	r24, r25
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <spawn+0x1c>
 4d0:	43 c0       	rjmp	.+134    	; 0x558 <__stack+0x59>
int initialized = 0;

static void initialize(void) {
	    int i;
	    for (i=0; i<NTHREADS-1; i++)
	    threads[i].next = &threads[i+1];
 4d2:	8c ef       	ldi	r24, 0xFC	; 252
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <threads+0x5>
 4da:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <threads+0x4>
 4de:	89 e6       	ldi	r24, 0x69	; 105
 4e0:	92 e0       	ldi	r25, 0x02	; 2
 4e2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <threads+0x72>
 4e6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <threads+0x71>
 4ea:	86 ed       	ldi	r24, 0xD6	; 214
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <threads+0xdf>
 4f2:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <threads+0xde>
	    threads[NTHREADS-1].next = NULL;
 4f6:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 4fa:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>


	    initialized = 1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <initialized+0x1>
 506:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <initialized>
	
	CLKPR=0x80;
 50a:	e1 e6       	ldi	r30, 0x61	; 97
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	90 e8       	ldi	r25, 0x80	; 128
 510:	90 83       	st	Z, r25
	CLKPR=0x00;
 512:	10 82       	st	Z, r1
	
	EIMSK = (1 << PCIE1);
 514:	9d bb       	out	0x1d, r25	; 29
	PCMSK1 = (1 << PCINT15);	
 516:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
	PORTB = (1<<PORTB7);
 51a:	95 b9       	out	0x05, r25	; 5
	
	
	
	
	
	TCCR1A = (1<<COM1A1) | (1<<COM1A0); //OC1A high
 51c:	80 ec       	ldi	r24, 0xC0	; 192
 51e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << WGM12)|(1<<CS10)|(1<<CS12); //TCT och prescale
 522:	9d e0       	ldi	r25, 0x0D	; 13
 524:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	//TCCR1B = ;//Prescale
	OCR1A = 8000000/20480; // set a suitable value to OCR1A
 528:	26 e8       	ldi	r18, 0x86	; 134
 52a:	31 e0       	ldi	r19, 0x01	; 1
 52c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 530:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCNT1 = 0;
 534:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 538:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 = (1<<OCIE1A);
 53c:	92 e0       	ldi	r25, 0x02	; 2
 53e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	
	LCDCRA= (1<<LCDEN) | (1<<LCDAB);
 542:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	LCDCRB= (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0) | (1<<LCDCS);
 546:	87 eb       	ldi	r24, 0xB7	; 183
 548:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDCCR= (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 54c:	8f e0       	ldi	r24, 0x0F	; 15
 54e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDFRR= (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 552:	87 e0       	ldi	r24, 0x07	; 7
 554:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 558:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 55c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 560:	9a 83       	std	Y+2, r25	; 0x02
 562:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	a1 f0       	breq	.+40     	; 0x590 <__stack+0x91>
        *queue = (*queue)->next;
 568:	fc 01       	movw	r30, r24
 56a:	84 81       	ldd	r24, Z+4	; 0x04
 56c:	95 81       	ldd	r25, Z+5	; 0x05
 56e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 572:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 576:	51 83       	std	Z+1, r21	; 0x01
 578:	40 83       	st	Z, r20
    newp->arg = arg;
 57a:	73 83       	std	Z+3, r23	; 0x03
 57c:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 57e:	15 82       	std	Z+5, r1	; 0x05
 580:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 582:	cf 01       	movw	r24, r30
 584:	06 96       	adiw	r24, 0x06	; 6
 586:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <setjmp>
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	49 f5       	brne	.+82     	; 0x5e0 <__stack+0xe1>
 58e:	01 c0       	rjmp	.+2      	; 0x592 <__stack+0x93>
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stack+0x91>
        ENABLE();
 592:	78 94       	sei
        current->function(current->arg);
 594:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 598:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 59c:	ed 91       	ld	r30, X+
 59e:	fc 91       	ld	r31, X
 5a0:	11 97       	sbiw	r26, 0x01	; 1
 5a2:	12 96       	adiw	r26, 0x02	; 2
 5a4:	8d 91       	ld	r24, X+
 5a6:	9c 91       	ld	r25, X
 5a8:	13 97       	sbiw	r26, 0x03	; 3
 5aa:	09 95       	icall
        DISABLE();
 5ac:	f8 94       	cli
        enqueue(current, &freeQ);
 5ae:	62 e0       	ldi	r22, 0x02	; 2
 5b0:	71 e0       	ldi	r23, 0x01	; 1
 5b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5ba:	0e 94 24 02 	call	0x448	; 0x448 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 5c2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	51 f0       	breq	.+20     	; 0x5de <__stack+0xdf>
        *queue = (*queue)->next;
 5ca:	fc 01       	movw	r30, r24
 5cc:	24 81       	ldd	r18, Z+4	; 0x04
 5ce:	35 81       	ldd	r19, Z+5	; 0x05
 5d0:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 5d4:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 5d8:	0e 94 3b 02 	call	0x476	; 0x476 <dispatch>
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <__stack+0xe1>
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stack+0xdf>
    }
    SETSTACK(&newp->context, &newp->stack);
 5e0:	e9 81       	ldd	r30, Y+1	; 0x01
 5e2:	fa 81       	ldd	r31, Y+2	; 0x02
 5e4:	36 96       	adiw	r30, 0x06	; 6
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ea:	87 59       	subi	r24, 0x97	; 151
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	91 8b       	std	Z+17, r25	; 0x11
 5f0:	80 8b       	std	Z+16, r24	; 0x10
 5f2:	93 8b       	std	Z+19, r25	; 0x13
 5f4:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 5f6:	6e e1       	ldi	r22, 0x1E	; 30
 5f8:	71 e0       	ldi	r23, 0x01	; 1
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	9a 81       	ldd	r25, Y+2	; 0x02
 5fe:	0e 94 24 02 	call	0x448	; 0x448 <enqueue>
    ENABLE();
 602:	78 94       	sei
}
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <yield>:
ISR(TIMER1_COMPA_vect) {
	yield();
}

void yield(void) {
	DISABLE();
 60e:	f8 94       	cli
	enqueue(current, &readyQ);
 610:	6e e1       	ldi	r22, 0x1E	; 30
 612:	71 e0       	ldi	r23, 0x01	; 1
 614:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 618:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 61c:	0e 94 24 02 	call	0x448	; 0x448 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 620:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 624:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	59 f0       	breq	.+22     	; 0x642 <yield+0x34>
        *queue = (*queue)->next;
 62c:	fc 01       	movw	r30, r24
 62e:	24 81       	ldd	r18, Z+4	; 0x04
 630:	35 81       	ldd	r19, Z+5	; 0x05
 632:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 636:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 63a:	0e 94 3b 02 	call	0x476	; 0x476 <dispatch>
	ENABLE();
 63e:	78 94       	sei
}
 640:	08 95       	ret
 642:	ff cf       	rjmp	.-2      	; 0x642 <yield+0x34>

00000644 <__vector_3>:

    enqueue(newp, &readyQ);
    ENABLE();
}

ISR(PCINT1_vect) {
 644:	1f 92       	push	r1
 646:	0f 92       	push	r0
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	0f 92       	push	r0
 64c:	11 24       	eor	r1, r1
 64e:	2f 93       	push	r18
 650:	3f 93       	push	r19
 652:	4f 93       	push	r20
 654:	5f 93       	push	r21
 656:	6f 93       	push	r22
 658:	7f 93       	push	r23
 65a:	8f 93       	push	r24
 65c:	9f 93       	push	r25
 65e:	af 93       	push	r26
 660:	bf 93       	push	r27
 662:	ef 93       	push	r30
 664:	ff 93       	push	r31
	DISABLE();
 666:	f8 94       	cli
	//code for interrupt handler
	if(PINB >> 7 == 0){
 668:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 66a:	0e 94 07 03 	call	0x60e	; 0x60e <yield>
	}
	ENABLE();
 66e:	78 94       	sei
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	yield();
 6b4:	0e 94 07 03 	call	0x60e	; 0x60e <yield>
}
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	bf 91       	pop	r27
 6be:	af 91       	pop	r26
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	7f 91       	pop	r23
 6c6:	6f 91       	pop	r22
 6c8:	5f 91       	pop	r21
 6ca:	4f 91       	pop	r20
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <lock>:
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
	DISABLE();
 6da:	f8 94       	cli
	if(m->locked==0){
 6dc:	fc 01       	movw	r30, r24
 6de:	20 81       	ld	r18, Z
 6e0:	31 81       	ldd	r19, Z+1	; 0x01
 6e2:	23 2b       	or	r18, r19
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <lock+0x16>
		m->locked=1;
 6e6:	21 e0       	ldi	r18, 0x01	; 1
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	31 83       	std	Z+1, r19	; 0x01
 6ec:	20 83       	st	Z, r18
 6ee:	1a c0       	rjmp	.+52     	; 0x724 <lock+0x4a>
	}else{
		enqueue(current, &m->waitQ);
 6f0:	bc 01       	movw	r22, r24
 6f2:	6e 5f       	subi	r22, 0xFE	; 254
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6fe:	0e 94 24 02 	call	0x448	; 0x448 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 702:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 706:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 70a:	00 97       	sbiw	r24, 0x00	; 0
 70c:	51 f0       	breq	.+20     	; 0x722 <lock+0x48>
        *queue = (*queue)->next;
 70e:	fc 01       	movw	r30, r24
 710:	24 81       	ldd	r18, Z+4	; 0x04
 712:	35 81       	ldd	r19, Z+5	; 0x05
 714:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 718:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
	DISABLE();
	if(m->locked==0){
		m->locked=1;
	}else{
		enqueue(current, &m->waitQ);
		dispatch(dequeue(&readyQ));
 71c:	0e 94 3b 02 	call	0x476	; 0x476 <dispatch>
 720:	01 c0       	rjmp	.+2      	; 0x724 <lock+0x4a>
 722:	ff cf       	rjmp	.-2      	; 0x722 <lock+0x48>
	}
	ENABLE();
 724:	78 94       	sei
 726:	08 95       	ret

00000728 <unlock>:
}

void unlock(mutex *m) {
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
	DISABLE();
 72c:	f8 94       	cli
	if(m->waitQ!=NULL){
 72e:	fc 01       	movw	r30, r24
 730:	22 81       	ldd	r18, Z+2	; 0x02
 732:	33 81       	ldd	r19, Z+3	; 0x03
 734:	23 2b       	or	r18, r19
 736:	b1 f0       	breq	.+44     	; 0x764 <unlock+0x3c>
 738:	ec 01       	movw	r28, r24
		enqueue(current, &readyQ);
 73a:	6e e1       	ldi	r22, 0x1E	; 30
 73c:	71 e0       	ldi	r23, 0x01	; 1
 73e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 742:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 746:	0e 94 24 02 	call	0x448	; 0x448 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	41 f0       	breq	.+16     	; 0x762 <unlock+0x3a>
        *queue = (*queue)->next;
 752:	fc 01       	movw	r30, r24
 754:	24 81       	ldd	r18, Z+4	; 0x04
 756:	35 81       	ldd	r19, Z+5	; 0x05
 758:	3b 83       	std	Y+3, r19	; 0x03
 75a:	2a 83       	std	Y+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ!=NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&m->waitQ));
 75c:	0e 94 3b 02 	call	0x476	; 0x476 <dispatch>
 760:	04 c0       	rjmp	.+8      	; 0x76a <unlock+0x42>
 762:	ff cf       	rjmp	.-2      	; 0x762 <unlock+0x3a>
	} else{
		m->locked=0;
 764:	fc 01       	movw	r30, r24
 766:	11 82       	std	Z+1, r1	; 0x01
 768:	10 82       	st	Z, r1
	}
	ENABLE();
 76a:	78 94       	sei
}
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <__divmodsi4>:
 772:	05 2e       	mov	r0, r21
 774:	97 fb       	bst	r25, 7
 776:	1e f4       	brtc	.+6      	; 0x77e <__divmodsi4+0xc>
 778:	00 94       	com	r0
 77a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__negsi2>
 77e:	57 fd       	sbrc	r21, 7
 780:	07 d0       	rcall	.+14     	; 0x790 <__divmodsi4_neg2>
 782:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__udivmodsi4>
 786:	07 fc       	sbrc	r0, 7
 788:	03 d0       	rcall	.+6      	; 0x790 <__divmodsi4_neg2>
 78a:	4e f4       	brtc	.+18     	; 0x79e <__divmodsi4_exit>
 78c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__negsi2>

00000790 <__divmodsi4_neg2>:
 790:	50 95       	com	r21
 792:	40 95       	com	r20
 794:	30 95       	com	r19
 796:	21 95       	neg	r18
 798:	3f 4f       	sbci	r19, 0xFF	; 255
 79a:	4f 4f       	sbci	r20, 0xFF	; 255
 79c:	5f 4f       	sbci	r21, 0xFF	; 255

0000079e <__divmodsi4_exit>:
 79e:	08 95       	ret

000007a0 <__negsi2>:
 7a0:	90 95       	com	r25
 7a2:	80 95       	com	r24
 7a4:	70 95       	com	r23
 7a6:	61 95       	neg	r22
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	08 95       	ret

000007b0 <__udivmodsi4>:
 7b0:	a1 e2       	ldi	r26, 0x21	; 33
 7b2:	1a 2e       	mov	r1, r26
 7b4:	aa 1b       	sub	r26, r26
 7b6:	bb 1b       	sub	r27, r27
 7b8:	fd 01       	movw	r30, r26
 7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <__udivmodsi4_ep>

000007bc <__udivmodsi4_loop>:
 7bc:	aa 1f       	adc	r26, r26
 7be:	bb 1f       	adc	r27, r27
 7c0:	ee 1f       	adc	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	a2 17       	cp	r26, r18
 7c6:	b3 07       	cpc	r27, r19
 7c8:	e4 07       	cpc	r30, r20
 7ca:	f5 07       	cpc	r31, r21
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__udivmodsi4_ep>
 7ce:	a2 1b       	sub	r26, r18
 7d0:	b3 0b       	sbc	r27, r19
 7d2:	e4 0b       	sbc	r30, r20
 7d4:	f5 0b       	sbc	r31, r21

000007d6 <__udivmodsi4_ep>:
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	1a 94       	dec	r1
 7e0:	69 f7       	brne	.-38     	; 0x7bc <__udivmodsi4_loop>
 7e2:	60 95       	com	r22
 7e4:	70 95       	com	r23
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	9b 01       	movw	r18, r22
 7ec:	ac 01       	movw	r20, r24
 7ee:	bd 01       	movw	r22, r26
 7f0:	cf 01       	movw	r24, r30
 7f2:	08 95       	ret

000007f4 <setjmp>:
 7f4:	dc 01       	movw	r26, r24
 7f6:	2d 92       	st	X+, r2
 7f8:	3d 92       	st	X+, r3
 7fa:	4d 92       	st	X+, r4
 7fc:	5d 92       	st	X+, r5
 7fe:	6d 92       	st	X+, r6
 800:	7d 92       	st	X+, r7
 802:	8d 92       	st	X+, r8
 804:	9d 92       	st	X+, r9
 806:	ad 92       	st	X+, r10
 808:	bd 92       	st	X+, r11
 80a:	cd 92       	st	X+, r12
 80c:	dd 92       	st	X+, r13
 80e:	ed 92       	st	X+, r14
 810:	fd 92       	st	X+, r15
 812:	0d 93       	st	X+, r16
 814:	1d 93       	st	X+, r17
 816:	cd 93       	st	X+, r28
 818:	dd 93       	st	X+, r29
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	8d b7       	in	r24, 0x3d	; 61
 820:	8d 93       	st	X+, r24
 822:	8e b7       	in	r24, 0x3e	; 62
 824:	8d 93       	st	X+, r24
 826:	8f b7       	in	r24, 0x3f	; 63
 828:	8d 93       	st	X+, r24
 82a:	ed 93       	st	X+, r30
 82c:	fd 93       	st	X+, r31
 82e:	88 27       	eor	r24, r24
 830:	99 27       	eor	r25, r25
 832:	09 94       	ijmp

00000834 <longjmp>:
 834:	dc 01       	movw	r26, r24
 836:	cb 01       	movw	r24, r22
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	91 05       	cpc	r25, r1
 83c:	81 1d       	adc	r24, r1
 83e:	2d 90       	ld	r2, X+
 840:	3d 90       	ld	r3, X+
 842:	4d 90       	ld	r4, X+
 844:	5d 90       	ld	r5, X+
 846:	6d 90       	ld	r6, X+
 848:	7d 90       	ld	r7, X+
 84a:	8d 90       	ld	r8, X+
 84c:	9d 90       	ld	r9, X+
 84e:	ad 90       	ld	r10, X+
 850:	bd 90       	ld	r11, X+
 852:	cd 90       	ld	r12, X+
 854:	dd 90       	ld	r13, X+
 856:	ed 90       	ld	r14, X+
 858:	fd 90       	ld	r15, X+
 85a:	0d 91       	ld	r16, X+
 85c:	1d 91       	ld	r17, X+
 85e:	cd 91       	ld	r28, X+
 860:	dd 91       	ld	r29, X+
 862:	ed 91       	ld	r30, X+
 864:	fd 91       	ld	r31, X+
 866:	0d 90       	ld	r0, X+
 868:	f8 94       	cli
 86a:	fe bf       	out	0x3e, r31	; 62
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	ed bf       	out	0x3d, r30	; 61
 870:	ed 91       	ld	r30, X+
 872:	fd 91       	ld	r31, X+
 874:	09 94       	ijmp

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
